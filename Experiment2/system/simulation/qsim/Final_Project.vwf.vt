// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/27/2023 11:26:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          codric
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module codric_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] Xin;
reg [15:0] Yin;
reg [31:0] angle;
reg clock;
// wires                                               
wire [16:0] Xout;
wire [16:0] Yout;

// assign statements (if any)                          
codric i1 (
// port map - connection between master ports and signals/registers   
	.Xin(Xin),
	.Xout(Xout),
	.Yin(Yin),
	.Yout(Yout),
	.angle(angle),
	.clock(clock)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
// Xin[ 15 ]
initial
begin
	Xin[15] = 1'b0;
end 
// Xin[ 14 ]
initial
begin
	Xin[14] = 1'b1;
end 
// Xin[ 13 ]
initial
begin
	Xin[13] = 1'b0;
end 
// Xin[ 12 ]
initial
begin
	Xin[12] = 1'b0;
end 
// Xin[ 11 ]
initial
begin
	Xin[11] = 1'b1;
end 
// Xin[ 10 ]
initial
begin
	Xin[10] = 1'b0;
end 
// Xin[ 9 ]
initial
begin
	Xin[9] = 1'b1;
end 
// Xin[ 8 ]
initial
begin
	Xin[8] = 1'b1;
end 
// Xin[ 7 ]
initial
begin
	Xin[7] = 1'b1;
end 
// Xin[ 6 ]
initial
begin
	Xin[6] = 1'b1;
end 
// Xin[ 5 ]
initial
begin
	Xin[5] = 1'b1;
end 
// Xin[ 4 ]
initial
begin
	Xin[4] = 1'b0;
end 
// Xin[ 3 ]
initial
begin
	Xin[3] = 1'b0;
end 
// Xin[ 2 ]
initial
begin
	Xin[2] = 1'b1;
end 
// Xin[ 1 ]
initial
begin
	Xin[1] = 1'b1;
end 
// Xin[ 0 ]
initial
begin
	Xin[0] = 1'b1;
end 
// Yin[ 15 ]
initial
begin
	Yin[15] = 1'b0;
end 
// Yin[ 14 ]
initial
begin
	Yin[14] = 1'b0;
end 
// Yin[ 13 ]
initial
begin
	Yin[13] = 1'b0;
end 
// Yin[ 12 ]
initial
begin
	Yin[12] = 1'b0;
end 
// Yin[ 11 ]
initial
begin
	Yin[11] = 1'b0;
end 
// Yin[ 10 ]
initial
begin
	Yin[10] = 1'b0;
end 
// Yin[ 9 ]
initial
begin
	Yin[9] = 1'b0;
end 
// Yin[ 8 ]
initial
begin
	Yin[8] = 1'b0;
end 
// Yin[ 7 ]
initial
begin
	Yin[7] = 1'b0;
end 
// Yin[ 6 ]
initial
begin
	Yin[6] = 1'b0;
end 
// Yin[ 5 ]
initial
begin
	Yin[5] = 1'b0;
end 
// Yin[ 4 ]
initial
begin
	Yin[4] = 1'b0;
end 
// Yin[ 3 ]
initial
begin
	Yin[3] = 1'b0;
end 
// Yin[ 2 ]
initial
begin
	Yin[2] = 1'b0;
end 
// Yin[ 1 ]
initial
begin
	Yin[1] = 1'b0;
end 
// Yin[ 0 ]
initial
begin
	Yin[0] = 1'b1;
end 
// angle[ 31 ]
initial
begin
	angle[31] = 1'b0;
end 
// angle[ 30 ]
initial
begin
	angle[30] = 1'b0;
end 
// angle[ 29 ]
initial
begin
	angle[29] = 1'b1;
end 
// angle[ 28 ]
initial
begin
	angle[28] = 1'b1;
end 
// angle[ 27 ]
initial
begin
	angle[27] = 1'b0;
end 
// angle[ 26 ]
initial
begin
	angle[26] = 1'b0;
end 
// angle[ 25 ]
initial
begin
	angle[25] = 1'b0;
end 
// angle[ 24 ]
initial
begin
	angle[24] = 1'b1;
end 
// angle[ 23 ]
initial
begin
	angle[23] = 1'b0;
end 
// angle[ 22 ]
initial
begin
	angle[22] = 1'b0;
end 
// angle[ 21 ]
initial
begin
	angle[21] = 1'b1;
end 
// angle[ 20 ]
initial
begin
	angle[20] = 1'b0;
end 
// angle[ 19 ]
initial
begin
	angle[19] = 1'b1;
end 
// angle[ 18 ]
initial
begin
	angle[18] = 1'b1;
end 
// angle[ 17 ]
initial
begin
	angle[17] = 1'b1;
end 
// angle[ 16 ]
initial
begin
	angle[16] = 1'b0;
end 
// angle[ 15 ]
initial
begin
	angle[15] = 1'b1;
end 
// angle[ 14 ]
initial
begin
	angle[14] = 1'b0;
end 
// angle[ 13 ]
initial
begin
	angle[13] = 1'b0;
end 
// angle[ 12 ]
initial
begin
	angle[12] = 1'b0;
end 
// angle[ 11 ]
initial
begin
	angle[11] = 1'b0;
end 
// angle[ 10 ]
initial
begin
	angle[10] = 1'b1;
end 
// angle[ 9 ]
initial
begin
	angle[9] = 1'b0;
end 
// angle[ 8 ]
initial
begin
	angle[8] = 1'b1;
end 
// angle[ 7 ]
initial
begin
	angle[7] = 1'b1;
end 
// angle[ 6 ]
initial
begin
	angle[6] = 1'b1;
end 
// angle[ 5 ]
initial
begin
	angle[5] = 1'b1;
end 
// angle[ 4 ]
initial
begin
	angle[4] = 1'b1;
end 
// angle[ 3 ]
initial
begin
	angle[3] = 1'b0;
end 
// angle[ 2 ]
initial
begin
	angle[2] = 1'b0;
end 
// angle[ 1 ]
initial
begin
	angle[1] = 1'b1;
end 
// angle[ 0 ]
initial
begin
	angle[0] = 1'b0;
end 
endmodule

