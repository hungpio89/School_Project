// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2023 14:32:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Final_Project
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Final_Project_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] angle;
reg clk;
reg rst;
reg start;
// wires                                               
wire done;
wire [31:0] fn1;
wire [31:0] fn2;

// assign statements (if any)                          
Final_Project i1 (
// port map - connection between master ports and signals/registers   
	.angle(angle),
	.clk(clk),
	.done(done),
	.fn1(fn1),
	.fn2(fn2),
	.rst(rst),
	.start(start)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// start
initial
begin
	start = 1'b0;
	start = #40000 1'b1;
	start = #10000 1'b0;
	start = #40000 1'b1;
	start = #10000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 
// angle[ 31 ]
initial
begin
	angle[31] = 1'b0;
end 
// angle[ 30 ]
initial
begin
	angle[30] = 1'b0;
end 
// angle[ 29 ]
initial
begin
	angle[29] = 1'b1;
	angle[29] = #30000 1'b0;
	angle[29] = #50000 1'b1;
	angle[29] = #30000 1'b0;
end 
// angle[ 28 ]
initial
begin
	angle[28] = 1'b0;
	angle[28] = #80000 1'b1;
	angle[28] = #30000 1'b0;
end 
// angle[ 27 ]
initial
begin
	angle[27] = 1'b1;
	angle[27] = #30000 1'b0;
end 
// angle[ 26 ]
initial
begin
	angle[26] = 1'b0;
	angle[26] = #80000 1'b1;
	angle[26] = #30000 1'b0;
end 
// angle[ 25 ]
initial
begin
	angle[25] = 1'b1;
	angle[25] = #30000 1'b0;
end 
// angle[ 24 ]
initial
begin
	angle[24] = 1'b0;
	angle[24] = #80000 1'b1;
	angle[24] = #30000 1'b0;
end 
// angle[ 23 ]
initial
begin
	angle[23] = 1'b1;
	angle[23] = #30000 1'b0;
end 
// angle[ 22 ]
initial
begin
	angle[22] = 1'b0;
	angle[22] = #80000 1'b1;
	angle[22] = #30000 1'b0;
end 
// angle[ 21 ]
initial
begin
	angle[21] = 1'b1;
	angle[21] = #30000 1'b0;
end 
// angle[ 20 ]
initial
begin
	angle[20] = 1'b0;
	angle[20] = #80000 1'b1;
	angle[20] = #30000 1'b0;
end 
// angle[ 19 ]
initial
begin
	angle[19] = 1'b1;
	angle[19] = #30000 1'b0;
end 
// angle[ 18 ]
initial
begin
	angle[18] = 1'b0;
	angle[18] = #80000 1'b1;
	angle[18] = #30000 1'b0;
end 
// angle[ 17 ]
initial
begin
	angle[17] = 1'b1;
	angle[17] = #30000 1'b0;
end 
// angle[ 16 ]
initial
begin
	angle[16] = 1'b0;
	angle[16] = #80000 1'b1;
	angle[16] = #30000 1'b0;
end 
// angle[ 15 ]
initial
begin
	angle[15] = 1'b1;
	angle[15] = #30000 1'b0;
end 
// angle[ 14 ]
initial
begin
	angle[14] = 1'b0;
	angle[14] = #80000 1'b1;
	angle[14] = #30000 1'b0;
end 
// angle[ 13 ]
initial
begin
	angle[13] = 1'b1;
	angle[13] = #30000 1'b0;
end 
// angle[ 12 ]
initial
begin
	angle[12] = 1'b0;
	angle[12] = #80000 1'b1;
	angle[12] = #30000 1'b0;
end 
// angle[ 11 ]
initial
begin
	angle[11] = 1'b1;
	angle[11] = #30000 1'b0;
end 
// angle[ 10 ]
initial
begin
	angle[10] = 1'b0;
	angle[10] = #80000 1'b1;
	angle[10] = #30000 1'b0;
end 
// angle[ 9 ]
initial
begin
	angle[9] = 1'b1;
	angle[9] = #30000 1'b0;
end 
// angle[ 8 ]
initial
begin
	angle[8] = 1'b0;
	angle[8] = #80000 1'b1;
	angle[8] = #30000 1'b0;
end 
// angle[ 7 ]
initial
begin
	angle[7] = 1'b1;
	angle[7] = #30000 1'b0;
end 
// angle[ 6 ]
initial
begin
	angle[6] = 1'b0;
	angle[6] = #80000 1'b1;
	angle[6] = #30000 1'b0;
end 
// angle[ 5 ]
initial
begin
	angle[5] = 1'b1;
	angle[5] = #30000 1'b0;
end 
// angle[ 4 ]
initial
begin
	angle[4] = 1'b0;
	angle[4] = #80000 1'b1;
	angle[4] = #30000 1'b0;
end 
// angle[ 3 ]
initial
begin
	angle[3] = 1'b1;
	angle[3] = #30000 1'b0;
end 
// angle[ 2 ]
initial
begin
	angle[2] = 1'b0;
	angle[2] = #80000 1'b1;
	angle[2] = #30000 1'b0;
end 
// angle[ 1 ]
initial
begin
	angle[1] = 1'b1;
	angle[1] = #30000 1'b0;
end 
// angle[ 0 ]
initial
begin
	angle[0] = 1'b0;
	angle[0] = #80000 1'b1;
	angle[0] = #30000 1'b0;
end 
endmodule

