// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/29/2023 23:08:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          wrapper
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module wrapper_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] address;
reg chipselect;
reg clk;
reg rst;
reg write_n;
reg [31:0] writedata;
// wires                                               
wire irq_pin;
wire [31:0] readdata;

// assign statements (if any)                          
wrapper i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.chipselect(chipselect),
	.clk(clk),
	.irq_pin(irq_pin),
	.readdata(readdata),
	.rst(rst),
	.write_n(write_n),
	.writedata(writedata)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #180000 1'b1;
	rst = #20000 1'b0;
end 

// write_n
initial
begin
	write_n = 1'b0;
	write_n = #40000 1'b1;
	write_n = #280000 1'b0;
	write_n = #40000 1'b1;
end 

// chipselect
initial
begin
	chipselect = 1'b1;
	chipselect = #40000 1'b0;
	chipselect = #20000 1'b1;
	chipselect = #20000 1'b0;
	chipselect = #20000 1'b1;
	chipselect = #40000 1'b0;
	chipselect = #40000 1'b1;
	chipselect = #20000 1'b0;
	chipselect = #20000 1'b1;
	chipselect = #20000 1'b0;
	chipselect = #20000 1'b1;
	chipselect = #20000 1'b0;
	chipselect = #40000 1'b1;
	chipselect = #40000 1'b0;
	chipselect = #20000 1'b1;
	chipselect = #20000 1'b0;
	chipselect = #20000 1'b1;
	chipselect = #20000 1'b0;
	chipselect = #40000 1'b1;
	chipselect = #20000 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
	address[1] = #60000 1'b1;
	address[1] = #20000 1'b0;
	address[1] = #20000 1'b1;
	address[1] = #40000 1'b0;
	address[1] = #40000 1'b1;
	address[1] = #20000 1'b0;
	address[1] = #20000 1'b1;
	address[1] = #20000 1'b0;
	address[1] = #140000 1'b1;
	address[1] = #20000 1'b0;
	address[1] = #20000 1'b1;
	address[1] = #20000 1'b0;
	address[1] = #40000 1'b1;
	address[1] = #20000 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b0;
	address[0] = #20000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #20000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #100000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #60000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #60000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #20000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #20000 1'b1;
	address[0] = #20000 1'b0;
end 
// writedata[ 31 ]
initial
begin
	writedata[31] = 1'b0;
end 
// writedata[ 30 ]
initial
begin
	writedata[30] = 1'b0;
end 
// writedata[ 29 ]
initial
begin
	writedata[29] = 1'b1;
	writedata[29] = #20000 1'b0;
	writedata[29] = #300000 1'b1;
	writedata[29] = #20000 1'b0;
end 
// writedata[ 28 ]
initial
begin
	writedata[28] = 1'b0;
	writedata[28] = #320000 1'b1;
	writedata[28] = #20000 1'b0;
end 
// writedata[ 27 ]
initial
begin
	writedata[27] = 1'b1;
	writedata[27] = #20000 1'b0;
end 
// writedata[ 26 ]
initial
begin
	writedata[26] = 1'b0;
	writedata[26] = #320000 1'b1;
	writedata[26] = #20000 1'b0;
end 
// writedata[ 25 ]
initial
begin
	writedata[25] = 1'b1;
	writedata[25] = #20000 1'b0;
end 
// writedata[ 24 ]
initial
begin
	writedata[24] = 1'b0;
	writedata[24] = #320000 1'b1;
	writedata[24] = #20000 1'b0;
end 
// writedata[ 23 ]
initial
begin
	writedata[23] = 1'b1;
	writedata[23] = #20000 1'b0;
end 
// writedata[ 22 ]
initial
begin
	writedata[22] = 1'b0;
	writedata[22] = #320000 1'b1;
	writedata[22] = #20000 1'b0;
end 
// writedata[ 21 ]
initial
begin
	writedata[21] = 1'b1;
	writedata[21] = #20000 1'b0;
end 
// writedata[ 20 ]
initial
begin
	writedata[20] = 1'b0;
	writedata[20] = #320000 1'b1;
	writedata[20] = #20000 1'b0;
end 
// writedata[ 19 ]
initial
begin
	writedata[19] = 1'b1;
	writedata[19] = #20000 1'b0;
end 
// writedata[ 18 ]
initial
begin
	writedata[18] = 1'b0;
	writedata[18] = #320000 1'b1;
	writedata[18] = #20000 1'b0;
end 
// writedata[ 17 ]
initial
begin
	writedata[17] = 1'b1;
	writedata[17] = #20000 1'b0;
end 
// writedata[ 16 ]
initial
begin
	writedata[16] = 1'b0;
	writedata[16] = #320000 1'b1;
	writedata[16] = #20000 1'b0;
end 
// writedata[ 15 ]
initial
begin
	writedata[15] = 1'b1;
	writedata[15] = #20000 1'b0;
end 
// writedata[ 14 ]
initial
begin
	writedata[14] = 1'b0;
	writedata[14] = #320000 1'b1;
	writedata[14] = #20000 1'b0;
end 
// writedata[ 13 ]
initial
begin
	writedata[13] = 1'b1;
	writedata[13] = #20000 1'b0;
end 
// writedata[ 12 ]
initial
begin
	writedata[12] = 1'b0;
	writedata[12] = #320000 1'b1;
	writedata[12] = #20000 1'b0;
end 
// writedata[ 11 ]
initial
begin
	writedata[11] = 1'b1;
	writedata[11] = #20000 1'b0;
end 
// writedata[ 10 ]
initial
begin
	writedata[10] = 1'b0;
	writedata[10] = #320000 1'b1;
	writedata[10] = #20000 1'b0;
end 
// writedata[ 9 ]
initial
begin
	writedata[9] = 1'b1;
	writedata[9] = #20000 1'b0;
end 
// writedata[ 8 ]
initial
begin
	writedata[8] = 1'b0;
	writedata[8] = #320000 1'b1;
	writedata[8] = #20000 1'b0;
end 
// writedata[ 7 ]
initial
begin
	writedata[7] = 1'b1;
	writedata[7] = #20000 1'b0;
end 
// writedata[ 6 ]
initial
begin
	writedata[6] = 1'b0;
	writedata[6] = #320000 1'b1;
	writedata[6] = #20000 1'b0;
end 
// writedata[ 5 ]
initial
begin
	writedata[5] = 1'b1;
	writedata[5] = #20000 1'b0;
end 
// writedata[ 4 ]
initial
begin
	writedata[4] = 1'b0;
	writedata[4] = #320000 1'b1;
	writedata[4] = #20000 1'b0;
end 
// writedata[ 3 ]
initial
begin
	writedata[3] = 1'b1;
	writedata[3] = #20000 1'b0;
end 
// writedata[ 2 ]
initial
begin
	writedata[2] = 1'b0;
	writedata[2] = #320000 1'b1;
	writedata[2] = #20000 1'b0;
end 
// writedata[ 1 ]
initial
begin
	writedata[1] = 1'b1;
	writedata[1] = #20000 1'b0;
end 
// writedata[ 0 ]
initial
begin
	writedata[0] = 1'b1;
	writedata[0] = #40000 1'b0;
	writedata[0] = #280000 1'b1;
	writedata[0] = #40000 1'b0;
end 
endmodule

