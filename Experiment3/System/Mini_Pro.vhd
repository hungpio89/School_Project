
---------------------------------------------------------
--  This code is generated by Terasic System Builder
---------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

entity Mini_Pro is
port
(

	------------ CLOCK ------------
	CLOCK2_50       	:in    	std_logic;
	CLOCK3_50       	:in    	std_logic;
	CLOCK4_50       	:in    	std_logic;
	CLOCK_50        	:in    	std_logic;

	------------ KEY ------------
	KEY             	:in    	std_logic_vector(3 downto 0);

	------------ SW ------------
	SW              	:in    	std_logic_vector(9 downto 0);

	------------ LED ------------
	LEDR            	:out   	std_logic_vector(9 downto 0);

	------------ Seg7 ------------
	HEX0            	:out   	std_logic_vector(6 downto 0);
	HEX1            	:out   	std_logic_vector(6 downto 0);
	HEX2            	:out   	std_logic_vector(6 downto 0);
	HEX3            	:out   	std_logic_vector(6 downto 0);
	HEX4            	:out   	std_logic_vector(6 downto 0);
	HEX5            	:out   	std_logic_vector(6 downto 0);

	------------ SDRAM ------------
	DRAM_ADDR       	:out   	std_logic_vector(12 downto 0);
	DRAM_BA         	:out   	std_logic_vector(1 downto 0);
	DRAM_CAS_N      	:out   	std_logic;
	DRAM_CKE        	:out   	std_logic;
	DRAM_CLK        	:out   	std_logic;
	DRAM_CS_N       	:out   	std_logic;
	DRAM_DQ         	:inout 	std_logic_vector(15 downto 0);
	DRAM_LDQM       	:out   	std_logic;
	DRAM_RAS_N      	:out   	std_logic;
	DRAM_UDQM       	:out   	std_logic;
	DRAM_WE_N       	:out   	std_logic;

	------------ ADC ------------
	ADC_CONVST      	:out   	std_logic;
	ADC_DIN         	:out   	std_logic;
	ADC_DOUT        	:in    	std_logic;
	ADC_SCLK        	:out   	std_logic;

	------------ GPIO, GPIO connect to GPIO Default ------------
	GPIO            	:inout 	std_logic_vector(35 downto 0)
);

end entity;



---------------------------------------------------------
--  Structural coding
---------------------------------------------------------


architecture rtl of Mini_Pro is

-- declare --
component labmininios is
	port (
		clk_clk         : in    std_logic                     := '0';             --       clk.clk
		h_bridge_export : out   std_logic_vector(2 downto 0);                     --  h_bridge.export
		lcd_export      : out   std_logic_vector(10 downto 0);                    --       lcd.export
		reset_reset     : in    std_logic                     := '0';             --     reset.reset
		sdram_addr      : out   std_logic_vector(12 downto 0);                    --     sdram.addr
		sdram_ba        : out   std_logic_vector(1 downto 0);                     --          .ba
		sdram_cas_n     : out   std_logic;                                        --          .cas_n
		sdram_cke       : out   std_logic;                                        --          .cke
		sdram_cs_n      : out   std_logic;                                        --          .cs_n
		sdram_dq        : inout std_logic_vector(15 downto 0) := (others => '0'); --          .dq
		sdram_dqm       : out   std_logic_vector(1 downto 0);                     --          .dqm
		sdram_ras_n     : out   std_logic;                                        --          .ras_n
		sdram_we_n      : out   std_logic;                                        --          .we_n
		sdram_clk_clk   : out   std_logic;                                        -- sdram_clk.clk
		switch_export   : in    std_logic_vector(9 downto 0)  := (others => '0')  --    switch.export
	);
end component labmininios;
signal DQM: STD_LOGIC_VECTOR (1 downto 0);
begin

-- body --
	DRAM_UDQM <= DQM(1);
	DRAM_LDQM <= DQM(0);
stage0: labmininios port map 
(
	clk_clk 						=> CLOCK_50,
	h_bridge_export(1) => GPIO(1), -- INA
	h_bridge_export(0) => GPIO(2), -- INB
	h_bridge_export(2) => GPIO(3), -- EN
	lcd_export(10) 		=> GPIO(23), -- RS
	lcd_export(9)  		=> GPIO(24), -- RW
	lcd_export(8)  		=> GPIO(25), -- E
	lcd_export(7)  		=> GPIO(35), -- D7
	lcd_export(6)  		=> GPIO(33), -- D6
	lcd_export(5)  		=> GPIO(31), -- D5
	lcd_export(4)  		=> GPIO(29), -- D4
	lcd_export(3)  		=> GPIO(34), -- D3
	lcd_export(2)  		=> GPIO(32), -- D2
	lcd_export(1)  		=> GPIO(30), -- D1
	lcd_export(0)  		=> GPIO(28), -- D0
	reset_reset 				=> '0',
	sdram_addr 			=> DRAM_ADDR,   
	sdram_ba 				=> DRAM_BA,    
	sdram_cas_n 			=> DRAM_CAS_N,
	sdram_cke 			=> DRAM_CKE,  
	sdram_cs_n 			=> DRAM_CS_N, 
	sdram_dq 				=> DRAM_DQ,   
	sdram_dqm 			=> DQM,  
	sdram_ras_n 			=> DRAM_RAS_N,
	sdram_we_n 			=> DRAM_WE_N,
	sdram_clk_clk 				=> DRAM_CLK, 
	switch_export		=> SW
);	
end rtl;

