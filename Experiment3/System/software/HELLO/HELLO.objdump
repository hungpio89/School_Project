
HELLO.elf:     file format elf32-littlenios2
HELLO.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04040230

Program Header:
    LOAD off    0x00001000 vaddr 0x04040000 paddr 0x04040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04040020 paddr 0x04040020 align 2**12
         filesz 0x00004fec memsz 0x00004fec flags r-x
    LOAD off    0x00007000 vaddr 0x00000000 paddr 0x0404500c align 2**12
         filesz 0x000017dc memsz 0x00001918 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04040000  04040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04040020  04040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004ddc  04040230  04040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000184  00000000  0404500c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  00000184  04045190  00007184  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000013c  000017dc  040467e8  000087dc  2**2
                  ALLOC, SMALL_DATA
  6 .DMEM         00000000  00001918  00001918  000087dc  2**0
                  CONTENTS
  7 .IMEM         00000000  040467e8  040467e8  000087dc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000087dc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000007f0  00000000  00000000  00008800  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009c9e  00000000  00000000  00008ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003b51  00000000  00000000  00012c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003d83  00000000  00000000  000167df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000f68  00000000  00000000  0001a564  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002354  00000000  00000000  0001b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004e6a  00000000  00000000  0001d820  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0002268c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000009f8  00000000  00000000  000226d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000250c6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000250c9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000250cc  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000250cd  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000250ce  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000250d2  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000250d6  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000250da  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000250e5  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000250f0  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000250fb  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001c  00000000  00000000  00025106  2**0
                  CONTENTS, READONLY
 30 .jdi          00004b37  00000000  00000000  00025122  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005074d  00000000  00000000  00029c59  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04040000 l    d  .entry	00000000 .entry
04040020 l    d  .exceptions	00000000 .exceptions
04040230 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000184 l    d  .rwdata	00000000 .rwdata
000017dc l    d  .bss	00000000 .bss
00001918 l    d  .DMEM	00000000 .DMEM
040467e8 l    d  .IMEM	00000000 .IMEM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HELLO_bsp//obj/HAL/src/crt0.o
04040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
000017dc l     O .bss	00000004 on_off.2829
00001800 l     O .bss	00000018 alarm1.2834
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
04042ae0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04042e1c l     F .text	00000034 alt_dev_reg
00000184 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04043110 l     F .text	0000020c altera_avalon_jtag_uart_irq
0404331c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04043954 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04043ba0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04043cd4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04043d00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04044160 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040442c0 l     F .text	0000003c alt_get_errno
040442fc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000138c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
000017f8 g     O .bss	00000004 alt_instruction_exception_handler
04042bcc g     F .text	0000007c alt_main
00001818 g     O .bss	00000100 alt_irq
04045190 g       *ABS*	00000000 __flash_rwdata_start
00000000 g       *ABS*	00000000 __alt_mem_DMEM
04040340 g     F .text	00000090 lcd_DisplayString
0404026c g     F .text	00000070 lcd_data
040413c0 g     F .text	00000070 .hidden __fixsfsi
04041554 g     F .text	000000dc .hidden __gtdf2
040445c8 g     F .text	00000024 altera_nios2_gen2_irq_init
04040000 g     F .entry	0000000c __reset
04040020 g       *ABS*	00000000 __flash_exceptions_start
000017fc g     O .bss	00000004 errno
000017e4 g     O .bss	00000004 alt_argv
000097b0 g       *ABS*	00000000 _gp
04042dec g     F .text	00000030 usleep
04040edc g     F .text	000004e4 .hidden __subsf3
0000120c g     O .rwdata	00000180 alt_fd_list
040445ec g     F .text	00000090 alt_find_dev
040449ac g     F .text	00000148 memcpy
04044244 g     F .text	0000007c alt_io_redirect
0404500c g       *ABS*	00000000 __DTOR_END__
04044848 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04043514 g     F .text	0000021c altera_avalon_jtag_uart_read
04044f1c g     F .text	00000064 .hidden __udivsi3
0404097c g     F .text	00000074 .hidden __fixunsdfsi
000017c8 g     O .rwdata	00000004 alt_max_fd
04042818 g     F .text	00000110 .hidden __extendsfdf2
000017d4 g     O .rwdata	00000004 _global_impure_ptr
00001918 g       *ABS*	00000000 __bss_end
04044070 g     F .text	000000f0 alt_iic_isr_register
04042ce4 g     F .text	00000108 alt_tick
04044024 g     F .text	0000004c alt_ic_irq_enabled
04042c48 g     F .text	0000009c alt_alarm_stop
000017f4 g     O .bss	00000004 alt_irq_active
040400fc g     F .exceptions	000000d4 alt_irq_handler
000011e4 g     O .rwdata	00000028 alt_dev_null
04043cb4 g     F .text	00000020 alt_dcache_flush_all
04042798 g     F .text	00000080 .hidden __fixdfsi
000017dc g       *ABS*	00000000 __ram_rwdata_end
000017c0 g     O .rwdata	00000008 alt_dev_list
040409f0 g     F .text	000000bc .hidden __gtsf2
00000184 g       *ABS*	00000000 __ram_rodata_end
04044f80 g     F .text	00000058 .hidden __umodsi3
00001918 g       *ABS*	00000000 end
04043050 g     F .text	000000c0 altera_avalon_jtag_uart_init
040401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0404500c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
040439cc g     F .text	0000007c alt_avalon_timer_sc_init
04042928 g     F .text	00000064 .hidden __clzsi2
04043730 g     F .text	00000224 altera_avalon_jtag_uart_write
04044ca4 g     F .text	00000180 __call_exitprocs
04040230 g     F .text	0000003c _start
000017ec g     O .bss	00000004 _alt_tick_rate
000017f0 g     O .bss	00000004 _alt_nticks
04042e88 g     F .text	00000064 alt_sys_init
04041430 g     F .text	00000124 .hidden __floatsisf
04044b8c g     F .text	00000118 __register_exitproc
040433bc g     F .text	00000068 altera_avalon_jtag_uart_close
0404298c g     F .text	00000028 .hidden __mulsi3
00000184 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
04042eec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04044784 g     F .text	000000c4 alt_get_fd
04043a48 g     F .text	00000158 alt_busy_sleep
04044930 g     F .text	0000007c memcmp
04042fac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001918 g       *ABS*	00000000 __alt_stack_base
04042ffc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04040000 g       *ABS*	00000000 __alt_mem_IMEM
04041630 g     F .text	0000086c .hidden __muldf3
0404467c g     F .text	00000108 alt_find_file
04043d3c g     F .text	000000a4 alt_dev_llist_insert
000017dc g       *ABS*	00000000 __bss_start
04040404 g     F .text	00000048 lcd_init
040404c4 g     F .text	00000458 main
000017e8 g     O .bss	00000004 alt_envp
04042f4c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000017cc g     O .rwdata	00000004 alt_errno
04044e24 g     F .text	00000084 .hidden __divsi3
0404500c g       *ABS*	00000000 __CTOR_END__
04040aac g     F .text	00000430 .hidden __mulsf3
040403d0 g     F .text	00000034 PWM
0404500c g       *ABS*	00000000 __flash_rodata_start
0404500c g       *ABS*	00000000 __DTOR_LIST__
04042e50 g     F .text	00000038 alt_irq_init
04044544 g     F .text	00000084 alt_release_fd
0000004c g     O .rodata	00000100 .hidden __clz_tab
040448e4 g     F .text	00000014 atexit
0404044c g     F .text	00000078 lcd_callback
040409f0 g     F .text	000000bc .hidden __gesf2
000017d8 g     O .rwdata	00000004 _impure_ptr
000017e0 g     O .bss	00000004 alt_argc
04043e40 g     F .text	00000060 _do_dtors
04040020 g       .exceptions	00000000 alt_irq_entry
000017b8 g     O .rwdata	00000008 alt_fs_list
04040020 g       *ABS*	00000000 __ram_exceptions_start
04043ec0 g     F .text	00000050 alt_ic_isr_register
000017dc g       *ABS*	00000000 _edata
00001918 g       *ABS*	00000000 _end
04040230 g       *ABS*	00000000 __ram_exceptions_end
04043424 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04043f98 g     F .text	0000008c alt_ic_irq_disable
040448f8 g     F .text	00000038 exit
04044ea8 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04040020 g     F .exceptions	00000000 alt_exception
040402dc g     F .text	00000064 lcd_cmd
0404091c g     F .text	00000060 .hidden __fixunssfsi
04044fd8 g     F .text	00000034 _exit
040429b4 g     F .text	0000012c alt_alarm_start
04044af4 g     F .text	00000098 strlen
040443e8 g     F .text	0000015c open
04041554 g     F .text	000000dc .hidden __gedf2
04043ea0 g     F .text	00000020 alt_icache_flush_all
000017d0 g     O .rwdata	00000004 alt_priority_mask
04043f10 g     F .text	00000088 alt_ic_irq_enable
04041e9c g     F .text	000008fc .hidden __subdf3
000017b0 g     O .rwdata	00000008 alt_alarm_list
04043de0 g     F .text	00000060 _do_ctors
04043bdc g     F .text	000000d8 close
04042b48 g     F .text	00000084 alt_load



Disassembly of section .entry:

04040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4040000:	00410134 	movhi	at,1028
    ori r1, r1, %lo(_start)
 4040004:	08408c14 	ori	at,at,560
    jmp r1
 4040008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 404002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 404003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 404004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 404005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 404006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 404007c:	10000326 	beq	r2,zero,404008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4040080:	20000226 	beq	r4,zero,404008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4040084:	40400fc0 	call	40400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4040088:	00000706 	br	40400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 404008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4040098:	40401d00 	call	40401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 404009c:	1000021e 	bne	r2,zero,40400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40400f8:	ef80083a 	eret

040400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40400fc:	defff904 	addi	sp,sp,-28
 4040100:	dfc00615 	stw	ra,24(sp)
 4040104:	df000515 	stw	fp,20(sp)
 4040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 404010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4040110:	0005313a 	rdctl	r2,ipending
 4040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 404011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4040124:	00800044 	movi	r2,1
 4040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 404012c:	e0fffb17 	ldw	r3,-20(fp)
 4040130:	e0bffc17 	ldw	r2,-16(fp)
 4040134:	1884703a 	and	r2,r3,r2
 4040138:	10001426 	beq	r2,zero,404018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 404013c:	00800034 	movhi	r2,0
 4040140:	10860604 	addi	r2,r2,6168
 4040144:	e0fffd17 	ldw	r3,-12(fp)
 4040148:	180690fa 	slli	r3,r3,3
 404014c:	10c5883a 	add	r2,r2,r3
 4040150:	10c00017 	ldw	r3,0(r2)
 4040154:	00800034 	movhi	r2,0
 4040158:	10860604 	addi	r2,r2,6168
 404015c:	e13ffd17 	ldw	r4,-12(fp)
 4040160:	200890fa 	slli	r4,r4,3
 4040164:	1105883a 	add	r2,r2,r4
 4040168:	10800104 	addi	r2,r2,4
 404016c:	10800017 	ldw	r2,0(r2)
 4040170:	1009883a 	mov	r4,r2
 4040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 404017c:	0005313a 	rdctl	r2,ipending
 4040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4040184:	e0bfff17 	ldw	r2,-4(fp)
 4040188:	00000706 	br	40401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 404018c:	e0bffc17 	ldw	r2,-16(fp)
 4040190:	1085883a 	add	r2,r2,r2
 4040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4040198:	e0bffd17 	ldw	r2,-12(fp)
 404019c:	10800044 	addi	r2,r2,1
 40401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40401a4:	003fe106 	br	404012c <__flash_rwdata_start+0xffffaf9c>

    active = alt_irq_pending ();
 40401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40401ac:	e0bffb17 	ldw	r2,-20(fp)
 40401b0:	103fdb1e 	bne	r2,zero,4040120 <__flash_rwdata_start+0xffffaf90>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40401b4:	0001883a 	nop
}
 40401b8:	0001883a 	nop
 40401bc:	e037883a 	mov	sp,fp
 40401c0:	dfc00117 	ldw	ra,4(sp)
 40401c4:	df000017 	ldw	fp,0(sp)
 40401c8:	dec00204 	addi	sp,sp,8
 40401cc:	f800283a 	ret

040401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40401d0:	defffb04 	addi	sp,sp,-20
 40401d4:	dfc00415 	stw	ra,16(sp)
 40401d8:	df000315 	stw	fp,12(sp)
 40401dc:	df000304 	addi	fp,sp,12
 40401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40401e4:	00bfffc4 	movi	r2,-1
 40401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40401f0:	d0a01217 	ldw	r2,-32696(gp)
 40401f4:	10000726 	beq	r2,zero,4040214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40401f8:	d0a01217 	ldw	r2,-32696(gp)
 40401fc:	e0fffd17 	ldw	r3,-12(fp)
 4040200:	e1bffe17 	ldw	r6,-8(fp)
 4040204:	e17fff17 	ldw	r5,-4(fp)
 4040208:	1809883a 	mov	r4,r3
 404020c:	103ee83a 	callr	r2
 4040210:	00000206 	br	404021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4040214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4040218:	0005883a 	mov	r2,zero
}
 404021c:	e037883a 	mov	sp,fp
 4040220:	dfc00117 	ldw	ra,4(sp)
 4040224:	df000017 	ldw	fp,0(sp)
 4040228:	dec00204 	addi	sp,sp,8
 404022c:	f800283a 	ret

Disassembly of section .text:

04040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4040230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4040234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4040238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 404023c:	d6a5ec14 	ori	gp,gp,38832
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4040240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4040244:	1085f714 	ori	r2,r2,6108

    movhi r3, %hi(__bss_end)
 4040248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 404024c:	18c64614 	ori	r3,r3,6424

    beq r2, r3, 1f
 4040250:	10c00326 	beq	r2,r3,4040260 <_start+0x30>

0:
    stw zero, (r2)
 4040254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4040258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 404025c:	10fffd36 	bltu	r2,r3,4040254 <__flash_rwdata_start+0xffffb0c4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4040260:	4042b480 	call	4042b48 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4040264:	4042bcc0 	call	4042bcc <alt_main>

04040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4040268:	003fff06 	br	4040268 <__flash_rwdata_start+0xffffb0d8>

0404026c <lcd_data>:
#define Enable	0x100 // 0b00100000000

#define LINE1	0x80
#define LINE2	0xC0

void lcd_data (alt_u8 data){
 404026c:	defffb04 	addi	sp,sp,-20
 4040270:	dfc00415 	stw	ra,16(sp)
 4040274:	df000315 	stw	fp,12(sp)
 4040278:	df000304 	addi	fp,sp,12
 404027c:	2005883a 	mov	r2,r4
 4040280:	e0bfff05 	stb	r2,-4(fp)
	int my_data = Init | data;
 4040284:	e0bfff03 	ldbu	r2,-4(fp)
 4040288:	10814014 	ori	r2,r2,1280
 404028c:	e0bffd15 	stw	r2,-12(fp)
	int clear = React | data;
 4040290:	e0bfff03 	ldbu	r2,-4(fp)
 4040294:	10810014 	ori	r2,r2,1024
 4040298:	e0bffe15 	stw	r2,-8(fp)
	IOWR(LCD_BASE,0,my_data);
 404029c:	00810234 	movhi	r2,1032
 40402a0:	10840c04 	addi	r2,r2,4144
 40402a4:	e0fffd17 	ldw	r3,-12(fp)
 40402a8:	10c00035 	stwio	r3,0(r2)
	usleep(10000);
 40402ac:	0109c404 	movi	r4,10000
 40402b0:	4042dec0 	call	4042dec <usleep>
	IOWR(LCD_BASE,0,clear);
 40402b4:	00810234 	movhi	r2,1032
 40402b8:	10840c04 	addi	r2,r2,4144
 40402bc:	e0fffe17 	ldw	r3,-8(fp)
 40402c0:	10c00035 	stwio	r3,0(r2)
}
 40402c4:	0001883a 	nop
 40402c8:	e037883a 	mov	sp,fp
 40402cc:	dfc00117 	ldw	ra,4(sp)
 40402d0:	df000017 	ldw	fp,0(sp)
 40402d4:	dec00204 	addi	sp,sp,8
 40402d8:	f800283a 	ret

040402dc <lcd_cmd>:

void lcd_cmd(alt_u8 data){
 40402dc:	defffc04 	addi	sp,sp,-16
 40402e0:	dfc00315 	stw	ra,12(sp)
 40402e4:	df000215 	stw	fp,8(sp)
 40402e8:	df000204 	addi	fp,sp,8
 40402ec:	2005883a 	mov	r2,r4
 40402f0:	e0bfff05 	stb	r2,-4(fp)
	int my_data = Enable | data;
 40402f4:	e0bfff03 	ldbu	r2,-4(fp)
 40402f8:	10804014 	ori	r2,r2,256
 40402fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR(LCD_BASE,0,my_data);
 4040300:	00810234 	movhi	r2,1032
 4040304:	10840c04 	addi	r2,r2,4144
 4040308:	e0fffe17 	ldw	r3,-8(fp)
 404030c:	10c00035 	stwio	r3,0(r2)
	usleep(10000);
 4040310:	0109c404 	movi	r4,10000
 4040314:	4042dec0 	call	4042dec <usleep>
	IOWR(LCD_BASE,0,data);
 4040318:	e0ffff03 	ldbu	r3,-4(fp)
 404031c:	00810234 	movhi	r2,1032
 4040320:	10840c04 	addi	r2,r2,4144
 4040324:	10c00035 	stwio	r3,0(r2)
}
 4040328:	0001883a 	nop
 404032c:	e037883a 	mov	sp,fp
 4040330:	dfc00117 	ldw	ra,4(sp)
 4040334:	df000017 	ldw	fp,0(sp)
 4040338:	dec00204 	addi	sp,sp,8
 404033c:	f800283a 	ret

04040340 <lcd_DisplayString>:

void lcd_DisplayString(alt_u8 no_line, char str[]){
 4040340:	defffb04 	addi	sp,sp,-20
 4040344:	dfc00415 	stw	ra,16(sp)
 4040348:	df000315 	stw	fp,12(sp)
 404034c:	df000304 	addi	fp,sp,12
 4040350:	2005883a 	mov	r2,r4
 4040354:	e17fff15 	stw	r5,-4(fp)
 4040358:	e0bffe05 	stb	r2,-8(fp)
	lcd_cmd(no_line);
 404035c:	e0bffe03 	ldbu	r2,-8(fp)
 4040360:	1009883a 	mov	r4,r2
 4040364:	40402dc0 	call	40402dc <lcd_cmd>
	for(int i = 0; str[i]!=0; i++){
 4040368:	e03ffd15 	stw	zero,-12(fp)
 404036c:	00000a06 	br	4040398 <lcd_DisplayString+0x58>
		lcd_data(str[i]);
 4040370:	e0bffd17 	ldw	r2,-12(fp)
 4040374:	e0ffff17 	ldw	r3,-4(fp)
 4040378:	1885883a 	add	r2,r3,r2
 404037c:	10800003 	ldbu	r2,0(r2)
 4040380:	10803fcc 	andi	r2,r2,255
 4040384:	1009883a 	mov	r4,r2
 4040388:	404026c0 	call	404026c <lcd_data>
	IOWR(LCD_BASE,0,data);
}

void lcd_DisplayString(alt_u8 no_line, char str[]){
	lcd_cmd(no_line);
	for(int i = 0; str[i]!=0; i++){
 404038c:	e0bffd17 	ldw	r2,-12(fp)
 4040390:	10800044 	addi	r2,r2,1
 4040394:	e0bffd15 	stw	r2,-12(fp)
 4040398:	e0bffd17 	ldw	r2,-12(fp)
 404039c:	e0ffff17 	ldw	r3,-4(fp)
 40403a0:	1885883a 	add	r2,r3,r2
 40403a4:	10800003 	ldbu	r2,0(r2)
 40403a8:	10803fcc 	andi	r2,r2,255
 40403ac:	1080201c 	xori	r2,r2,128
 40403b0:	10bfe004 	addi	r2,r2,-128
 40403b4:	103fee1e 	bne	r2,zero,4040370 <__flash_rwdata_start+0xffffb1e0>
		lcd_data(str[i]);
	}
}
 40403b8:	0001883a 	nop
 40403bc:	e037883a 	mov	sp,fp
 40403c0:	dfc00117 	ldw	ra,4(sp)
 40403c4:	df000017 	ldw	fp,0(sp)
 40403c8:	dec00204 	addi	sp,sp,8
 40403cc:	f800283a 	ret

040403d0 <PWM>:
void PWM(int data){
 40403d0:	defffe04 	addi	sp,sp,-8
 40403d4:	df000115 	stw	fp,4(sp)
 40403d8:	df000104 	addi	fp,sp,4
 40403dc:	e13fff15 	stw	r4,-4(fp)
	IOWR(H_BRIDGE_BASE,0,data);
 40403e0:	00810234 	movhi	r2,1032
 40403e4:	10841004 	addi	r2,r2,4160
 40403e8:	e0ffff17 	ldw	r3,-4(fp)
 40403ec:	10c00035 	stwio	r3,0(r2)
}
 40403f0:	0001883a 	nop
 40403f4:	e037883a 	mov	sp,fp
 40403f8:	df000017 	ldw	fp,0(sp)
 40403fc:	dec00104 	addi	sp,sp,4
 4040400:	f800283a 	ret

04040404 <lcd_init>:

void lcd_init()
{
 4040404:	defffe04 	addi	sp,sp,-8
 4040408:	dfc00115 	stw	ra,4(sp)
 404040c:	df000015 	stw	fp,0(sp)
 4040410:	d839883a 	mov	fp,sp
	lcd_cmd(0x38); // Function Set: 8-bit, 2 Line, 5x7 Dots
 4040414:	01000e04 	movi	r4,56
 4040418:	40402dc0 	call	40402dc <lcd_cmd>
	lcd_cmd(0x0C); // Display on Cursor off
 404041c:	01000304 	movi	r4,12
 4040420:	40402dc0 	call	40402dc <lcd_cmd>
	lcd_cmd(0x06); // Entry mode
 4040424:	01000184 	movi	r4,6
 4040428:	40402dc0 	call	40402dc <lcd_cmd>
	lcd_cmd(0x01); // Clear Display
 404042c:	01000044 	movi	r4,1
 4040430:	40402dc0 	call	40402dc <lcd_cmd>
}
 4040434:	0001883a 	nop
 4040438:	e037883a 	mov	sp,fp
 404043c:	dfc00117 	ldw	ra,4(sp)
 4040440:	df000017 	ldw	fp,0(sp)
 4040444:	dec00204 	addi	sp,sp,8
 4040448:	f800283a 	ret

0404044c <lcd_callback>:
alt_u32 lcd_callback(void* context){
 404044c:	defffc04 	addi	sp,sp,-16
 4040450:	dfc00315 	stw	ra,12(sp)
 4040454:	df000215 	stw	fp,8(sp)
 4040458:	df000204 	addi	fp,sp,8
 404045c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 sw = IORD(SWITCH_BASE,0);
 4040460:	00810234 	movhi	r2,1032
 4040464:	10840804 	addi	r2,r2,4128
 4040468:	10800037 	ldwio	r2,0(r2)
 404046c:	e0bffe15 	stw	r2,-8(fp)
	static  int on_off =0;
	if (sw == 0x01) {
 4040470:	e0bffe17 	ldw	r2,-8(fp)
 4040474:	10800058 	cmpnei	r2,r2,1
 4040478:	10000c1e 	bne	r2,zero,40404ac <lcd_callback+0x60>
		if(!on_off){
 404047c:	d0a00b17 	ldw	r2,-32724(gp)
 4040480:	1000071e 	bne	r2,zero,40404a0 <lcd_callback+0x54>
			lcd_DisplayString(LINE1," HELLO WORLD !!!");
 4040484:	01400034 	movhi	r5,0
 4040488:	29400004 	addi	r5,r5,0
 404048c:	01002004 	movi	r4,128
 4040490:	40403400 	call	4040340 <lcd_DisplayString>
			on_off = 1;
 4040494:	00800044 	movi	r2,1
 4040498:	d0a00b15 	stw	r2,-32724(gp)
 404049c:	00000306 	br	40404ac <lcd_callback+0x60>
		}
		else{
			lcd_cmd(0x01);
 40404a0:	01000044 	movi	r4,1
 40404a4:	40402dc0 	call	40402dc <lcd_cmd>
			on_off = 0;
 40404a8:	d0200b15 	stw	zero,-32724(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40404ac:	d0a00f17 	ldw	r2,-32708(gp)
		}
	}
return alt_ticks_per_second();
}
 40404b0:	e037883a 	mov	sp,fp
 40404b4:	dfc00117 	ldw	ra,4(sp)
 40404b8:	df000017 	ldw	fp,0(sp)
 40404bc:	dec00204 	addi	sp,sp,8
 40404c0:	f800283a 	ret

040404c4 <main>:
			act_deact = 0;
	}
	return alt_ticks_per_second();
}*/

int main(){
 40404c4:	defffa04 	addi	sp,sp,-24
 40404c8:	dfc00515 	stw	ra,20(sp)
 40404cc:	df000415 	stw	fp,16(sp)
 40404d0:	dc400315 	stw	r17,12(sp)
 40404d4:	dc000215 	stw	r16,8(sp)
 40404d8:	df000404 	addi	fp,sp,16
	float Duty_cycle = 1;
 40404dc:	008fe034 	movhi	r2,16256
 40404e0:	e0bffc15 	stw	r2,-16(fp)
	int freq = 1000;
 40404e4:	0080fa04 	movi	r2,1000
 40404e8:	e0bffd15 	stw	r2,-12(fp)
	static alt_alarm alarm1; //alarm2;
	lcd_init();
 40404ec:	40404040 	call	4040404 <lcd_init>
 40404f0:	d0a00f17 	ldw	r2,-32708(gp)
	alt_alarm_start(&alarm1, alt_ticks_per_second(),lcd_callback, NULL);
 40404f4:	000f883a 	mov	r7,zero
 40404f8:	01810134 	movhi	r6,1028
 40404fc:	31811304 	addi	r6,r6,1100
 4040500:	100b883a 	mov	r5,r2
 4040504:	01000034 	movhi	r4,0
 4040508:	21060004 	addi	r4,r4,6144
 404050c:	40429b40 	call	40429b4 <alt_alarm_start>
//	alt_alarm_start(&alarm2, alt_ticks_per_second(),h_bridge_callback, NULL);
  while(1){
	  if (IORD(SWITCH_BASE,0) == 0x02){
 4040510:	00810234 	movhi	r2,1032
 4040514:	10840804 	addi	r2,r2,4128
 4040518:	10800037 	ldwio	r2,0(r2)
 404051c:	10800098 	cmpnei	r2,r2,2
 4040520:	1000421e 	bne	r2,zero,404062c <main+0x168>
	  		  lcd_init();
 4040524:	40404040 	call	4040404 <lcd_init>
	  		  lcd_DisplayString(LINE1,"Duty cycle: 100%");
 4040528:	01400034 	movhi	r5,0
 404052c:	29400504 	addi	r5,r5,20
 4040530:	01002004 	movi	r4,128
 4040534:	40403400 	call	4040340 <lcd_DisplayString>
	  		  lcd_DisplayString(LINE2,"Frequency : 1khZ");
 4040538:	01400034 	movhi	r5,0
 404053c:	29400a04 	addi	r5,r5,40
 4040540:	01003004 	movi	r4,192
 4040544:	40403400 	call	4040340 <lcd_DisplayString>
	  		  while(IORD(SWITCH_BASE,0) == 0x02){
 4040548:	00003206 	br	4040614 <main+0x150>
		  		  PWM(0b110);
 404054c:	01000184 	movi	r4,6
 4040550:	40403d00 	call	40403d0 <PWM>
		  		  usleep((float)freq*Duty_cycle);
 4040554:	e13ffd17 	ldw	r4,-12(fp)
 4040558:	40414300 	call	4041430 <__floatsisf>
 404055c:	1007883a 	mov	r3,r2
 4040560:	e17ffc17 	ldw	r5,-16(fp)
 4040564:	1809883a 	mov	r4,r3
 4040568:	4040aac0 	call	4040aac <__mulsf3>
 404056c:	1007883a 	mov	r3,r2
 4040570:	1805883a 	mov	r2,r3
 4040574:	1009883a 	mov	r4,r2
 4040578:	404091c0 	call	404091c <__fixunssfsi>
 404057c:	1009883a 	mov	r4,r2
 4040580:	4042dec0 	call	4042dec <usleep>
		  		  PWM(0b100);
 4040584:	01000104 	movi	r4,4
 4040588:	40403d00 	call	40403d0 <PWM>
		  		  usleep((float)freq*(1.0-Duty_cycle));
 404058c:	e13ffd17 	ldw	r4,-12(fp)
 4040590:	40414300 	call	4041430 <__floatsisf>
 4040594:	1007883a 	mov	r3,r2
 4040598:	1809883a 	mov	r4,r3
 404059c:	40428180 	call	4042818 <__extendsfdf2>
 40405a0:	1021883a 	mov	r16,r2
 40405a4:	1823883a 	mov	r17,r3
 40405a8:	e13ffc17 	ldw	r4,-16(fp)
 40405ac:	40428180 	call	4042818 <__extendsfdf2>
 40405b0:	1009883a 	mov	r4,r2
 40405b4:	180b883a 	mov	r5,r3
 40405b8:	200d883a 	mov	r6,r4
 40405bc:	280f883a 	mov	r7,r5
 40405c0:	0009883a 	mov	r4,zero
 40405c4:	014ffc34 	movhi	r5,16368
 40405c8:	4041e9c0 	call	4041e9c <__subdf3>
 40405cc:	1009883a 	mov	r4,r2
 40405d0:	180b883a 	mov	r5,r3
 40405d4:	2005883a 	mov	r2,r4
 40405d8:	2807883a 	mov	r3,r5
 40405dc:	100d883a 	mov	r6,r2
 40405e0:	180f883a 	mov	r7,r3
 40405e4:	8009883a 	mov	r4,r16
 40405e8:	880b883a 	mov	r5,r17
 40405ec:	40416300 	call	4041630 <__muldf3>
 40405f0:	1009883a 	mov	r4,r2
 40405f4:	180b883a 	mov	r5,r3
 40405f8:	2005883a 	mov	r2,r4
 40405fc:	2807883a 	mov	r3,r5
 4040600:	1009883a 	mov	r4,r2
 4040604:	180b883a 	mov	r5,r3
 4040608:	404097c0 	call	404097c <__fixunsdfsi>
 404060c:	1009883a 	mov	r4,r2
 4040610:	4042dec0 	call	4042dec <usleep>
  while(1){
	  if (IORD(SWITCH_BASE,0) == 0x02){
	  		  lcd_init();
	  		  lcd_DisplayString(LINE1,"Duty cycle: 100%");
	  		  lcd_DisplayString(LINE2,"Frequency : 1khZ");
	  		  while(IORD(SWITCH_BASE,0) == 0x02){
 4040614:	00810234 	movhi	r2,1032
 4040618:	10840804 	addi	r2,r2,4128
 404061c:	10800037 	ldwio	r2,0(r2)
 4040620:	108000a0 	cmpeqi	r2,r2,2
 4040624:	103fc91e 	bne	r2,zero,404054c <__flash_rwdata_start+0xffffb3bc>
 4040628:	003fb906 	br	4040510 <__flash_rwdata_start+0xffffb380>
		  		  usleep((float)freq*Duty_cycle);
		  		  PWM(0b100);
		  		  usleep((float)freq*(1.0-Duty_cycle));
	  		  }
	  	  }
	  else if (IORD(SWITCH_BASE,0) == 0x04){
 404062c:	00810234 	movhi	r2,1032
 4040630:	10840804 	addi	r2,r2,4128
 4040634:	10800037 	ldwio	r2,0(r2)
 4040638:	10800118 	cmpnei	r2,r2,4
 404063c:	1000591e 	bne	r2,zero,40407a4 <main+0x2e0>
	  		  	lcd_init();
 4040640:	40404040 	call	4040404 <lcd_init>
	  		  	lcd_DisplayString(LINE1,"Duty cycle: 75%");
 4040644:	01400034 	movhi	r5,0
 4040648:	29400f04 	addi	r5,r5,60
 404064c:	01002004 	movi	r4,128
 4040650:	40403400 	call	4040340 <lcd_DisplayString>
	  		  	lcd_DisplayString(LINE2,"Frequency : 1khZ");
 4040654:	01400034 	movhi	r5,0
 4040658:	29400a04 	addi	r5,r5,40
 404065c:	01003004 	movi	r4,192
 4040660:	40403400 	call	4040340 <lcd_DisplayString>
	  		  	while(IORD(SWITCH_BASE,0) == 0x04){
 4040664:	00004906 	br	404078c <main+0x2c8>
	  			  	PWM(0b110);
 4040668:	01000184 	movi	r4,6
 404066c:	40403d00 	call	40403d0 <PWM>
	  			  	usleep((float)freq*Duty_cycle*0.75);
 4040670:	e13ffd17 	ldw	r4,-12(fp)
 4040674:	40414300 	call	4041430 <__floatsisf>
 4040678:	1007883a 	mov	r3,r2
 404067c:	e17ffc17 	ldw	r5,-16(fp)
 4040680:	1809883a 	mov	r4,r3
 4040684:	4040aac0 	call	4040aac <__mulsf3>
 4040688:	1007883a 	mov	r3,r2
 404068c:	1805883a 	mov	r2,r3
 4040690:	1009883a 	mov	r4,r2
 4040694:	40428180 	call	4042818 <__extendsfdf2>
 4040698:	1011883a 	mov	r8,r2
 404069c:	1813883a 	mov	r9,r3
 40406a0:	000d883a 	mov	r6,zero
 40406a4:	01cffa34 	movhi	r7,16360
 40406a8:	4009883a 	mov	r4,r8
 40406ac:	480b883a 	mov	r5,r9
 40406b0:	40416300 	call	4041630 <__muldf3>
 40406b4:	1009883a 	mov	r4,r2
 40406b8:	180b883a 	mov	r5,r3
 40406bc:	2005883a 	mov	r2,r4
 40406c0:	2807883a 	mov	r3,r5
 40406c4:	1009883a 	mov	r4,r2
 40406c8:	180b883a 	mov	r5,r3
 40406cc:	404097c0 	call	404097c <__fixunsdfsi>
 40406d0:	1009883a 	mov	r4,r2
 40406d4:	4042dec0 	call	4042dec <usleep>
	  			 	PWM(0b100);
 40406d8:	01000104 	movi	r4,4
 40406dc:	40403d00 	call	40403d0 <PWM>
	  			 	usleep((float)freq*(1.0-Duty_cycle*0.75));
 40406e0:	e13ffd17 	ldw	r4,-12(fp)
 40406e4:	40414300 	call	4041430 <__floatsisf>
 40406e8:	1007883a 	mov	r3,r2
 40406ec:	1809883a 	mov	r4,r3
 40406f0:	40428180 	call	4042818 <__extendsfdf2>
 40406f4:	1021883a 	mov	r16,r2
 40406f8:	1823883a 	mov	r17,r3
 40406fc:	e13ffc17 	ldw	r4,-16(fp)
 4040700:	40428180 	call	4042818 <__extendsfdf2>
 4040704:	1011883a 	mov	r8,r2
 4040708:	1813883a 	mov	r9,r3
 404070c:	000d883a 	mov	r6,zero
 4040710:	01cffa34 	movhi	r7,16360
 4040714:	4009883a 	mov	r4,r8
 4040718:	480b883a 	mov	r5,r9
 404071c:	40416300 	call	4041630 <__muldf3>
 4040720:	1009883a 	mov	r4,r2
 4040724:	180b883a 	mov	r5,r3
 4040728:	2005883a 	mov	r2,r4
 404072c:	2807883a 	mov	r3,r5
 4040730:	100d883a 	mov	r6,r2
 4040734:	180f883a 	mov	r7,r3
 4040738:	0009883a 	mov	r4,zero
 404073c:	014ffc34 	movhi	r5,16368
 4040740:	4041e9c0 	call	4041e9c <__subdf3>
 4040744:	1009883a 	mov	r4,r2
 4040748:	180b883a 	mov	r5,r3
 404074c:	2005883a 	mov	r2,r4
 4040750:	2807883a 	mov	r3,r5
 4040754:	100d883a 	mov	r6,r2
 4040758:	180f883a 	mov	r7,r3
 404075c:	8009883a 	mov	r4,r16
 4040760:	880b883a 	mov	r5,r17
 4040764:	40416300 	call	4041630 <__muldf3>
 4040768:	1009883a 	mov	r4,r2
 404076c:	180b883a 	mov	r5,r3
 4040770:	2005883a 	mov	r2,r4
 4040774:	2807883a 	mov	r3,r5
 4040778:	1009883a 	mov	r4,r2
 404077c:	180b883a 	mov	r5,r3
 4040780:	404097c0 	call	404097c <__fixunsdfsi>
 4040784:	1009883a 	mov	r4,r2
 4040788:	4042dec0 	call	4042dec <usleep>
	  	  }
	  else if (IORD(SWITCH_BASE,0) == 0x04){
	  		  	lcd_init();
	  		  	lcd_DisplayString(LINE1,"Duty cycle: 75%");
	  		  	lcd_DisplayString(LINE2,"Frequency : 1khZ");
	  		  	while(IORD(SWITCH_BASE,0) == 0x04){
 404078c:	00810234 	movhi	r2,1032
 4040790:	10840804 	addi	r2,r2,4128
 4040794:	10800037 	ldwio	r2,0(r2)
 4040798:	10800120 	cmpeqi	r2,r2,4
 404079c:	103fb21e 	bne	r2,zero,4040668 <__flash_rwdata_start+0xffffb4d8>
 40407a0:	003f5b06 	br	4040510 <__flash_rwdata_start+0xffffb380>
	  			 	PWM(0b100);
	  			 	usleep((float)freq*(1.0-Duty_cycle*0.75));
	  		  	}
	  }
	  // INVERSE
	  else if (IORD(SWITCH_BASE,0) == 0x08){
 40407a4:	00810234 	movhi	r2,1032
 40407a8:	10840804 	addi	r2,r2,4128
 40407ac:	10800037 	ldwio	r2,0(r2)
 40407b0:	10800218 	cmpnei	r2,r2,8
 40407b4:	103f561e 	bne	r2,zero,4040510 <__flash_rwdata_start+0xffffb380>
	  	  		  	lcd_init();
 40407b8:	40404040 	call	4040404 <lcd_init>
	  	  		  	lcd_DisplayString(LINE1,"Duty cycle: 75%");
 40407bc:	01400034 	movhi	r5,0
 40407c0:	29400f04 	addi	r5,r5,60
 40407c4:	01002004 	movi	r4,128
 40407c8:	40403400 	call	4040340 <lcd_DisplayString>
	  	  		  	lcd_DisplayString(LINE2,"Frequency : 1khZ");
 40407cc:	01400034 	movhi	r5,0
 40407d0:	29400a04 	addi	r5,r5,40
 40407d4:	01003004 	movi	r4,192
 40407d8:	40403400 	call	4040340 <lcd_DisplayString>
	  	  		  	while(IORD(SWITCH_BASE,0) == 0x08){
 40407dc:	00004906 	br	4040904 <main+0x440>
	  	  			  	PWM(0b101);
 40407e0:	01000144 	movi	r4,5
 40407e4:	40403d00 	call	40403d0 <PWM>
	  	  			  	usleep((float)freq*Duty_cycle*0.75);
 40407e8:	e13ffd17 	ldw	r4,-12(fp)
 40407ec:	40414300 	call	4041430 <__floatsisf>
 40407f0:	1007883a 	mov	r3,r2
 40407f4:	e17ffc17 	ldw	r5,-16(fp)
 40407f8:	1809883a 	mov	r4,r3
 40407fc:	4040aac0 	call	4040aac <__mulsf3>
 4040800:	1007883a 	mov	r3,r2
 4040804:	1805883a 	mov	r2,r3
 4040808:	1009883a 	mov	r4,r2
 404080c:	40428180 	call	4042818 <__extendsfdf2>
 4040810:	1011883a 	mov	r8,r2
 4040814:	1813883a 	mov	r9,r3
 4040818:	000d883a 	mov	r6,zero
 404081c:	01cffa34 	movhi	r7,16360
 4040820:	4009883a 	mov	r4,r8
 4040824:	480b883a 	mov	r5,r9
 4040828:	40416300 	call	4041630 <__muldf3>
 404082c:	1009883a 	mov	r4,r2
 4040830:	180b883a 	mov	r5,r3
 4040834:	2005883a 	mov	r2,r4
 4040838:	2807883a 	mov	r3,r5
 404083c:	1009883a 	mov	r4,r2
 4040840:	180b883a 	mov	r5,r3
 4040844:	404097c0 	call	404097c <__fixunsdfsi>
 4040848:	1009883a 	mov	r4,r2
 404084c:	4042dec0 	call	4042dec <usleep>
	  	  			 	PWM(0b100);
 4040850:	01000104 	movi	r4,4
 4040854:	40403d00 	call	40403d0 <PWM>
	  	  			 	usleep((float)freq*(1.0-Duty_cycle*0.75));
 4040858:	e13ffd17 	ldw	r4,-12(fp)
 404085c:	40414300 	call	4041430 <__floatsisf>
 4040860:	1007883a 	mov	r3,r2
 4040864:	1809883a 	mov	r4,r3
 4040868:	40428180 	call	4042818 <__extendsfdf2>
 404086c:	1021883a 	mov	r16,r2
 4040870:	1823883a 	mov	r17,r3
 4040874:	e13ffc17 	ldw	r4,-16(fp)
 4040878:	40428180 	call	4042818 <__extendsfdf2>
 404087c:	1011883a 	mov	r8,r2
 4040880:	1813883a 	mov	r9,r3
 4040884:	000d883a 	mov	r6,zero
 4040888:	01cffa34 	movhi	r7,16360
 404088c:	4009883a 	mov	r4,r8
 4040890:	480b883a 	mov	r5,r9
 4040894:	40416300 	call	4041630 <__muldf3>
 4040898:	1009883a 	mov	r4,r2
 404089c:	180b883a 	mov	r5,r3
 40408a0:	2005883a 	mov	r2,r4
 40408a4:	2807883a 	mov	r3,r5
 40408a8:	100d883a 	mov	r6,r2
 40408ac:	180f883a 	mov	r7,r3
 40408b0:	0009883a 	mov	r4,zero
 40408b4:	014ffc34 	movhi	r5,16368
 40408b8:	4041e9c0 	call	4041e9c <__subdf3>
 40408bc:	1009883a 	mov	r4,r2
 40408c0:	180b883a 	mov	r5,r3
 40408c4:	2005883a 	mov	r2,r4
 40408c8:	2807883a 	mov	r3,r5
 40408cc:	100d883a 	mov	r6,r2
 40408d0:	180f883a 	mov	r7,r3
 40408d4:	8009883a 	mov	r4,r16
 40408d8:	880b883a 	mov	r5,r17
 40408dc:	40416300 	call	4041630 <__muldf3>
 40408e0:	1009883a 	mov	r4,r2
 40408e4:	180b883a 	mov	r5,r3
 40408e8:	2005883a 	mov	r2,r4
 40408ec:	2807883a 	mov	r3,r5
 40408f0:	1009883a 	mov	r4,r2
 40408f4:	180b883a 	mov	r5,r3
 40408f8:	404097c0 	call	404097c <__fixunsdfsi>
 40408fc:	1009883a 	mov	r4,r2
 4040900:	4042dec0 	call	4042dec <usleep>
	  // INVERSE
	  else if (IORD(SWITCH_BASE,0) == 0x08){
	  	  		  	lcd_init();
	  	  		  	lcd_DisplayString(LINE1,"Duty cycle: 75%");
	  	  		  	lcd_DisplayString(LINE2,"Frequency : 1khZ");
	  	  		  	while(IORD(SWITCH_BASE,0) == 0x08){
 4040904:	00810234 	movhi	r2,1032
 4040908:	10840804 	addi	r2,r2,4128
 404090c:	10800037 	ldwio	r2,0(r2)
 4040910:	10800220 	cmpeqi	r2,r2,8
 4040914:	103fb21e 	bne	r2,zero,40407e0 <__flash_rwdata_start+0xffffb650>
	  	  			  	usleep((float)freq*Duty_cycle*0.75);
	  	  			 	PWM(0b100);
	  	  			 	usleep((float)freq*(1.0-Duty_cycle*0.75));
	  	  		  	}
	  }
  }
 4040918:	003efd06 	br	4040510 <__flash_rwdata_start+0xffffb380>

0404091c <__fixunssfsi>:
 404091c:	defffd04 	addi	sp,sp,-12
 4040920:	dc000015 	stw	r16,0(sp)
 4040924:	0413c034 	movhi	r16,20224
 4040928:	800b883a 	mov	r5,r16
 404092c:	dc400115 	stw	r17,4(sp)
 4040930:	dfc00215 	stw	ra,8(sp)
 4040934:	2023883a 	mov	r17,r4
 4040938:	40409f00 	call	40409f0 <__gesf2>
 404093c:	1000070e 	bge	r2,zero,404095c <__fixunssfsi+0x40>
 4040940:	8809883a 	mov	r4,r17
 4040944:	40413c00 	call	40413c0 <__fixsfsi>
 4040948:	dfc00217 	ldw	ra,8(sp)
 404094c:	dc400117 	ldw	r17,4(sp)
 4040950:	dc000017 	ldw	r16,0(sp)
 4040954:	dec00304 	addi	sp,sp,12
 4040958:	f800283a 	ret
 404095c:	800b883a 	mov	r5,r16
 4040960:	8809883a 	mov	r4,r17
 4040964:	4040edc0 	call	4040edc <__subsf3>
 4040968:	1009883a 	mov	r4,r2
 404096c:	40413c00 	call	40413c0 <__fixsfsi>
 4040970:	00e00034 	movhi	r3,32768
 4040974:	10c5883a 	add	r2,r2,r3
 4040978:	003ff306 	br	4040948 <__flash_rwdata_start+0xffffb7b8>

0404097c <__fixunsdfsi>:
 404097c:	defffd04 	addi	sp,sp,-12
 4040980:	000d883a 	mov	r6,zero
 4040984:	01d07834 	movhi	r7,16864
 4040988:	dc400115 	stw	r17,4(sp)
 404098c:	dc000015 	stw	r16,0(sp)
 4040990:	dfc00215 	stw	ra,8(sp)
 4040994:	2023883a 	mov	r17,r4
 4040998:	2821883a 	mov	r16,r5
 404099c:	40415540 	call	4041554 <__gedf2>
 40409a0:	1000080e 	bge	r2,zero,40409c4 <__fixunsdfsi+0x48>
 40409a4:	8809883a 	mov	r4,r17
 40409a8:	800b883a 	mov	r5,r16
 40409ac:	40427980 	call	4042798 <__fixdfsi>
 40409b0:	dfc00217 	ldw	ra,8(sp)
 40409b4:	dc400117 	ldw	r17,4(sp)
 40409b8:	dc000017 	ldw	r16,0(sp)
 40409bc:	dec00304 	addi	sp,sp,12
 40409c0:	f800283a 	ret
 40409c4:	000d883a 	mov	r6,zero
 40409c8:	01d07834 	movhi	r7,16864
 40409cc:	8809883a 	mov	r4,r17
 40409d0:	800b883a 	mov	r5,r16
 40409d4:	4041e9c0 	call	4041e9c <__subdf3>
 40409d8:	180b883a 	mov	r5,r3
 40409dc:	1009883a 	mov	r4,r2
 40409e0:	40427980 	call	4042798 <__fixdfsi>
 40409e4:	00e00034 	movhi	r3,32768
 40409e8:	10c5883a 	add	r2,r2,r3
 40409ec:	003ff006 	br	40409b0 <__flash_rwdata_start+0xffffb820>

040409f0 <__gesf2>:
 40409f0:	2004d5fa 	srli	r2,r4,23
 40409f4:	2806d5fa 	srli	r3,r5,23
 40409f8:	01802034 	movhi	r6,128
 40409fc:	31bfffc4 	addi	r6,r6,-1
 4040a00:	10803fcc 	andi	r2,r2,255
 4040a04:	01c03fc4 	movi	r7,255
 4040a08:	3110703a 	and	r8,r6,r4
 4040a0c:	18c03fcc 	andi	r3,r3,255
 4040a10:	314c703a 	and	r6,r6,r5
 4040a14:	2008d7fa 	srli	r4,r4,31
 4040a18:	280ad7fa 	srli	r5,r5,31
 4040a1c:	11c01926 	beq	r2,r7,4040a84 <__gesf2+0x94>
 4040a20:	01c03fc4 	movi	r7,255
 4040a24:	19c00f26 	beq	r3,r7,4040a64 <__gesf2+0x74>
 4040a28:	1000061e 	bne	r2,zero,4040a44 <__gesf2+0x54>
 4040a2c:	400f003a 	cmpeq	r7,r8,zero
 4040a30:	1800071e 	bne	r3,zero,4040a50 <__gesf2+0x60>
 4040a34:	3000061e 	bne	r6,zero,4040a50 <__gesf2+0x60>
 4040a38:	0005883a 	mov	r2,zero
 4040a3c:	40000e1e 	bne	r8,zero,4040a78 <__gesf2+0x88>
 4040a40:	f800283a 	ret
 4040a44:	18000a1e 	bne	r3,zero,4040a70 <__gesf2+0x80>
 4040a48:	30000b26 	beq	r6,zero,4040a78 <__gesf2+0x88>
 4040a4c:	000f883a 	mov	r7,zero
 4040a50:	29403fcc 	andi	r5,r5,255
 4040a54:	38000726 	beq	r7,zero,4040a74 <__gesf2+0x84>
 4040a58:	28000826 	beq	r5,zero,4040a7c <__gesf2+0x8c>
 4040a5c:	00800044 	movi	r2,1
 4040a60:	f800283a 	ret
 4040a64:	303ff026 	beq	r6,zero,4040a28 <__flash_rwdata_start+0xffffb898>
 4040a68:	00bfff84 	movi	r2,-2
 4040a6c:	f800283a 	ret
 4040a70:	29403fcc 	andi	r5,r5,255
 4040a74:	21400526 	beq	r4,r5,4040a8c <__gesf2+0x9c>
 4040a78:	203ff826 	beq	r4,zero,4040a5c <__flash_rwdata_start+0xffffb8cc>
 4040a7c:	00bfffc4 	movi	r2,-1
 4040a80:	f800283a 	ret
 4040a84:	403fe626 	beq	r8,zero,4040a20 <__flash_rwdata_start+0xffffb890>
 4040a88:	003ff706 	br	4040a68 <__flash_rwdata_start+0xffffb8d8>
 4040a8c:	18bffa16 	blt	r3,r2,4040a78 <__flash_rwdata_start+0xffffb8e8>
 4040a90:	10c00216 	blt	r2,r3,4040a9c <__gesf2+0xac>
 4040a94:	323ff836 	bltu	r6,r8,4040a78 <__flash_rwdata_start+0xffffb8e8>
 4040a98:	4180022e 	bgeu	r8,r6,4040aa4 <__gesf2+0xb4>
 4040a9c:	203fef1e 	bne	r4,zero,4040a5c <__flash_rwdata_start+0xffffb8cc>
 4040aa0:	003ff606 	br	4040a7c <__flash_rwdata_start+0xffffb8ec>
 4040aa4:	0005883a 	mov	r2,zero
 4040aa8:	f800283a 	ret

04040aac <__mulsf3>:
 4040aac:	defff504 	addi	sp,sp,-44
 4040ab0:	dc000115 	stw	r16,4(sp)
 4040ab4:	2020d5fa 	srli	r16,r4,23
 4040ab8:	dd400615 	stw	r21,24(sp)
 4040abc:	202ad7fa 	srli	r21,r4,31
 4040ac0:	dc800315 	stw	r18,12(sp)
 4040ac4:	04802034 	movhi	r18,128
 4040ac8:	df000915 	stw	fp,36(sp)
 4040acc:	dd000515 	stw	r20,20(sp)
 4040ad0:	94bfffc4 	addi	r18,r18,-1
 4040ad4:	dfc00a15 	stw	ra,40(sp)
 4040ad8:	ddc00815 	stw	r23,32(sp)
 4040adc:	dd800715 	stw	r22,28(sp)
 4040ae0:	dcc00415 	stw	r19,16(sp)
 4040ae4:	dc400215 	stw	r17,8(sp)
 4040ae8:	84003fcc 	andi	r16,r16,255
 4040aec:	9124703a 	and	r18,r18,r4
 4040af0:	a829883a 	mov	r20,r21
 4040af4:	af003fcc 	andi	fp,r21,255
 4040af8:	80005426 	beq	r16,zero,4040c4c <__mulsf3+0x1a0>
 4040afc:	00803fc4 	movi	r2,255
 4040b00:	80802f26 	beq	r16,r2,4040bc0 <__mulsf3+0x114>
 4040b04:	91002034 	orhi	r4,r18,128
 4040b08:	202490fa 	slli	r18,r4,3
 4040b0c:	843fe044 	addi	r16,r16,-127
 4040b10:	0023883a 	mov	r17,zero
 4040b14:	002f883a 	mov	r23,zero
 4040b18:	2804d5fa 	srli	r2,r5,23
 4040b1c:	282cd7fa 	srli	r22,r5,31
 4040b20:	01002034 	movhi	r4,128
 4040b24:	213fffc4 	addi	r4,r4,-1
 4040b28:	10803fcc 	andi	r2,r2,255
 4040b2c:	2166703a 	and	r19,r4,r5
 4040b30:	b1803fcc 	andi	r6,r22,255
 4040b34:	10004c26 	beq	r2,zero,4040c68 <__mulsf3+0x1bc>
 4040b38:	00c03fc4 	movi	r3,255
 4040b3c:	10c04726 	beq	r2,r3,4040c5c <__mulsf3+0x1b0>
 4040b40:	99002034 	orhi	r4,r19,128
 4040b44:	202690fa 	slli	r19,r4,3
 4040b48:	10bfe044 	addi	r2,r2,-127
 4040b4c:	0007883a 	mov	r3,zero
 4040b50:	80a1883a 	add	r16,r16,r2
 4040b54:	010003c4 	movi	r4,15
 4040b58:	1c44b03a 	or	r2,r3,r17
 4040b5c:	b56af03a 	xor	r21,r22,r21
 4040b60:	81c00044 	addi	r7,r16,1
 4040b64:	20806b36 	bltu	r4,r2,4040d14 <__mulsf3+0x268>
 4040b68:	100490ba 	slli	r2,r2,2
 4040b6c:	01010134 	movhi	r4,1028
 4040b70:	2102e004 	addi	r4,r4,2944
 4040b74:	1105883a 	add	r2,r2,r4
 4040b78:	10800017 	ldw	r2,0(r2)
 4040b7c:	1000683a 	jmp	r2
 4040b80:	04040d14 	movui	r16,4148
 4040b84:	04040bd4 	movui	r16,4143
 4040b88:	04040bd4 	movui	r16,4143
 4040b8c:	04040bd0 	cmplti	r16,zero,4143
 4040b90:	04040cf8 	rdprs	r16,zero,4147
 4040b94:	04040cf8 	rdprs	r16,zero,4147
 4040b98:	04040ce4 	muli	r16,zero,4147
 4040b9c:	04040bd0 	cmplti	r16,zero,4143
 4040ba0:	04040cf8 	rdprs	r16,zero,4147
 4040ba4:	04040ce4 	muli	r16,zero,4147
 4040ba8:	04040cf8 	rdprs	r16,zero,4147
 4040bac:	04040bd0 	cmplti	r16,zero,4143
 4040bb0:	04040d04 	movi	r16,4148
 4040bb4:	04040d04 	movi	r16,4148
 4040bb8:	04040d04 	movi	r16,4148
 4040bbc:	04040e14 	movui	r16,4152
 4040bc0:	90003b1e 	bne	r18,zero,4040cb0 <__mulsf3+0x204>
 4040bc4:	04400204 	movi	r17,8
 4040bc8:	05c00084 	movi	r23,2
 4040bcc:	003fd206 	br	4040b18 <__flash_rwdata_start+0xffffb988>
 4040bd0:	302b883a 	mov	r21,r6
 4040bd4:	00800084 	movi	r2,2
 4040bd8:	18802626 	beq	r3,r2,4040c74 <__mulsf3+0x1c8>
 4040bdc:	008000c4 	movi	r2,3
 4040be0:	1880b826 	beq	r3,r2,4040ec4 <__mulsf3+0x418>
 4040be4:	00800044 	movi	r2,1
 4040be8:	1880af1e 	bne	r3,r2,4040ea8 <__mulsf3+0x3fc>
 4040bec:	a829883a 	mov	r20,r21
 4040bf0:	0007883a 	mov	r3,zero
 4040bf4:	0009883a 	mov	r4,zero
 4040bf8:	18803fcc 	andi	r2,r3,255
 4040bfc:	100695fa 	slli	r3,r2,23
 4040c00:	a0803fcc 	andi	r2,r20,255
 4040c04:	100a97fa 	slli	r5,r2,31
 4040c08:	00802034 	movhi	r2,128
 4040c0c:	10bfffc4 	addi	r2,r2,-1
 4040c10:	2084703a 	and	r2,r4,r2
 4040c14:	10c4b03a 	or	r2,r2,r3
 4040c18:	1144b03a 	or	r2,r2,r5
 4040c1c:	dfc00a17 	ldw	ra,40(sp)
 4040c20:	df000917 	ldw	fp,36(sp)
 4040c24:	ddc00817 	ldw	r23,32(sp)
 4040c28:	dd800717 	ldw	r22,28(sp)
 4040c2c:	dd400617 	ldw	r21,24(sp)
 4040c30:	dd000517 	ldw	r20,20(sp)
 4040c34:	dcc00417 	ldw	r19,16(sp)
 4040c38:	dc800317 	ldw	r18,12(sp)
 4040c3c:	dc400217 	ldw	r17,8(sp)
 4040c40:	dc000117 	ldw	r16,4(sp)
 4040c44:	dec00b04 	addi	sp,sp,44
 4040c48:	f800283a 	ret
 4040c4c:	90000d1e 	bne	r18,zero,4040c84 <__mulsf3+0x1d8>
 4040c50:	04400104 	movi	r17,4
 4040c54:	05c00044 	movi	r23,1
 4040c58:	003faf06 	br	4040b18 <__flash_rwdata_start+0xffffb988>
 4040c5c:	9806c03a 	cmpne	r3,r19,zero
 4040c60:	18c00084 	addi	r3,r3,2
 4040c64:	003fba06 	br	4040b50 <__flash_rwdata_start+0xffffb9c0>
 4040c68:	9800141e 	bne	r19,zero,4040cbc <__mulsf3+0x210>
 4040c6c:	00c00044 	movi	r3,1
 4040c70:	003fb706 	br	4040b50 <__flash_rwdata_start+0xffffb9c0>
 4040c74:	a829883a 	mov	r20,r21
 4040c78:	00ffffc4 	movi	r3,-1
 4040c7c:	0009883a 	mov	r4,zero
 4040c80:	003fdd06 	br	4040bf8 <__flash_rwdata_start+0xffffba68>
 4040c84:	9009883a 	mov	r4,r18
 4040c88:	d9400015 	stw	r5,0(sp)
 4040c8c:	40429280 	call	4042928 <__clzsi2>
 4040c90:	10fffec4 	addi	r3,r2,-5
 4040c94:	10801d84 	addi	r2,r2,118
 4040c98:	90e4983a 	sll	r18,r18,r3
 4040c9c:	00a1c83a 	sub	r16,zero,r2
 4040ca0:	0023883a 	mov	r17,zero
 4040ca4:	002f883a 	mov	r23,zero
 4040ca8:	d9400017 	ldw	r5,0(sp)
 4040cac:	003f9a06 	br	4040b18 <__flash_rwdata_start+0xffffb988>
 4040cb0:	04400304 	movi	r17,12
 4040cb4:	05c000c4 	movi	r23,3
 4040cb8:	003f9706 	br	4040b18 <__flash_rwdata_start+0xffffb988>
 4040cbc:	9809883a 	mov	r4,r19
 4040cc0:	d9800015 	stw	r6,0(sp)
 4040cc4:	40429280 	call	4042928 <__clzsi2>
 4040cc8:	10fffec4 	addi	r3,r2,-5
 4040ccc:	10801d84 	addi	r2,r2,118
 4040cd0:	98e6983a 	sll	r19,r19,r3
 4040cd4:	0085c83a 	sub	r2,zero,r2
 4040cd8:	0007883a 	mov	r3,zero
 4040cdc:	d9800017 	ldw	r6,0(sp)
 4040ce0:	003f9b06 	br	4040b50 <__flash_rwdata_start+0xffffb9c0>
 4040ce4:	01002034 	movhi	r4,128
 4040ce8:	0029883a 	mov	r20,zero
 4040cec:	213fffc4 	addi	r4,r4,-1
 4040cf0:	00ffffc4 	movi	r3,-1
 4040cf4:	003fc006 	br	4040bf8 <__flash_rwdata_start+0xffffba68>
 4040cf8:	9027883a 	mov	r19,r18
 4040cfc:	b807883a 	mov	r3,r23
 4040d00:	003fb406 	br	4040bd4 <__flash_rwdata_start+0xffffba44>
 4040d04:	9027883a 	mov	r19,r18
 4040d08:	e02b883a 	mov	r21,fp
 4040d0c:	b807883a 	mov	r3,r23
 4040d10:	003fb006 	br	4040bd4 <__flash_rwdata_start+0xffffba44>
 4040d14:	9028d43a 	srli	r20,r18,16
 4040d18:	982cd43a 	srli	r22,r19,16
 4040d1c:	94bfffcc 	andi	r18,r18,65535
 4040d20:	9cffffcc 	andi	r19,r19,65535
 4040d24:	980b883a 	mov	r5,r19
 4040d28:	9009883a 	mov	r4,r18
 4040d2c:	d9c00015 	stw	r7,0(sp)
 4040d30:	404298c0 	call	404298c <__mulsi3>
 4040d34:	a00b883a 	mov	r5,r20
 4040d38:	9809883a 	mov	r4,r19
 4040d3c:	1023883a 	mov	r17,r2
 4040d40:	404298c0 	call	404298c <__mulsi3>
 4040d44:	a009883a 	mov	r4,r20
 4040d48:	b00b883a 	mov	r5,r22
 4040d4c:	1027883a 	mov	r19,r2
 4040d50:	404298c0 	call	404298c <__mulsi3>
 4040d54:	b00b883a 	mov	r5,r22
 4040d58:	9009883a 	mov	r4,r18
 4040d5c:	1029883a 	mov	r20,r2
 4040d60:	404298c0 	call	404298c <__mulsi3>
 4040d64:	8806d43a 	srli	r3,r17,16
 4040d68:	14c5883a 	add	r2,r2,r19
 4040d6c:	d9c00017 	ldw	r7,0(sp)
 4040d70:	1885883a 	add	r2,r3,r2
 4040d74:	14c0022e 	bgeu	r2,r19,4040d80 <__mulsf3+0x2d4>
 4040d78:	00c00074 	movhi	r3,1
 4040d7c:	a0e9883a 	add	r20,r20,r3
 4040d80:	1026943a 	slli	r19,r2,16
 4040d84:	8c7fffcc 	andi	r17,r17,65535
 4040d88:	1004d43a 	srli	r2,r2,16
 4040d8c:	9c63883a 	add	r17,r19,r17
 4040d90:	882691ba 	slli	r19,r17,6
 4040d94:	1505883a 	add	r2,r2,r20
 4040d98:	8822d6ba 	srli	r17,r17,26
 4040d9c:	100891ba 	slli	r4,r2,6
 4040da0:	9826c03a 	cmpne	r19,r19,zero
 4040da4:	9c62b03a 	or	r17,r19,r17
 4040da8:	8926b03a 	or	r19,r17,r4
 4040dac:	9882002c 	andhi	r2,r19,2048
 4040db0:	10000426 	beq	r2,zero,4040dc4 <__mulsf3+0x318>
 4040db4:	9804d07a 	srli	r2,r19,1
 4040db8:	9900004c 	andi	r4,r19,1
 4040dbc:	3821883a 	mov	r16,r7
 4040dc0:	1126b03a 	or	r19,r2,r4
 4040dc4:	80c01fc4 	addi	r3,r16,127
 4040dc8:	00c0210e 	bge	zero,r3,4040e50 <__mulsf3+0x3a4>
 4040dcc:	988001cc 	andi	r2,r19,7
 4040dd0:	10000426 	beq	r2,zero,4040de4 <__mulsf3+0x338>
 4040dd4:	988003cc 	andi	r2,r19,15
 4040dd8:	01000104 	movi	r4,4
 4040ddc:	11000126 	beq	r2,r4,4040de4 <__mulsf3+0x338>
 4040de0:	9927883a 	add	r19,r19,r4
 4040de4:	9882002c 	andhi	r2,r19,2048
 4040de8:	10000426 	beq	r2,zero,4040dfc <__mulsf3+0x350>
 4040dec:	00be0034 	movhi	r2,63488
 4040df0:	10bfffc4 	addi	r2,r2,-1
 4040df4:	80c02004 	addi	r3,r16,128
 4040df8:	98a6703a 	and	r19,r19,r2
 4040dfc:	00803f84 	movi	r2,254
 4040e00:	10ff9c16 	blt	r2,r3,4040c74 <__flash_rwdata_start+0xffffbae4>
 4040e04:	980891ba 	slli	r4,r19,6
 4040e08:	a829883a 	mov	r20,r21
 4040e0c:	2008d27a 	srli	r4,r4,9
 4040e10:	003f7906 	br	4040bf8 <__flash_rwdata_start+0xffffba68>
 4040e14:	9080102c 	andhi	r2,r18,64
 4040e18:	10000826 	beq	r2,zero,4040e3c <__mulsf3+0x390>
 4040e1c:	9880102c 	andhi	r2,r19,64
 4040e20:	1000061e 	bne	r2,zero,4040e3c <__mulsf3+0x390>
 4040e24:	00802034 	movhi	r2,128
 4040e28:	99001034 	orhi	r4,r19,64
 4040e2c:	10bfffc4 	addi	r2,r2,-1
 4040e30:	b029883a 	mov	r20,r22
 4040e34:	2088703a 	and	r4,r4,r2
 4040e38:	003fad06 	br	4040cf0 <__flash_rwdata_start+0xffffbb60>
 4040e3c:	00802034 	movhi	r2,128
 4040e40:	91001034 	orhi	r4,r18,64
 4040e44:	10bfffc4 	addi	r2,r2,-1
 4040e48:	2088703a 	and	r4,r4,r2
 4040e4c:	003fa806 	br	4040cf0 <__flash_rwdata_start+0xffffbb60>
 4040e50:	00800044 	movi	r2,1
 4040e54:	10c7c83a 	sub	r3,r2,r3
 4040e58:	008006c4 	movi	r2,27
 4040e5c:	10ff6316 	blt	r2,r3,4040bec <__flash_rwdata_start+0xffffba5c>
 4040e60:	00800804 	movi	r2,32
 4040e64:	10c5c83a 	sub	r2,r2,r3
 4040e68:	9884983a 	sll	r2,r19,r2
 4040e6c:	98c6d83a 	srl	r3,r19,r3
 4040e70:	1004c03a 	cmpne	r2,r2,zero
 4040e74:	1884b03a 	or	r2,r3,r2
 4040e78:	10c001cc 	andi	r3,r2,7
 4040e7c:	18000426 	beq	r3,zero,4040e90 <__mulsf3+0x3e4>
 4040e80:	10c003cc 	andi	r3,r2,15
 4040e84:	01000104 	movi	r4,4
 4040e88:	19000126 	beq	r3,r4,4040e90 <__mulsf3+0x3e4>
 4040e8c:	1105883a 	add	r2,r2,r4
 4040e90:	10c1002c 	andhi	r3,r2,1024
 4040e94:	18000626 	beq	r3,zero,4040eb0 <__mulsf3+0x404>
 4040e98:	a829883a 	mov	r20,r21
 4040e9c:	00c00044 	movi	r3,1
 4040ea0:	0009883a 	mov	r4,zero
 4040ea4:	003f5406 	br	4040bf8 <__flash_rwdata_start+0xffffba68>
 4040ea8:	3821883a 	mov	r16,r7
 4040eac:	003fc506 	br	4040dc4 <__flash_rwdata_start+0xffffbc34>
 4040eb0:	100491ba 	slli	r2,r2,6
 4040eb4:	a829883a 	mov	r20,r21
 4040eb8:	0007883a 	mov	r3,zero
 4040ebc:	1008d27a 	srli	r4,r2,9
 4040ec0:	003f4d06 	br	4040bf8 <__flash_rwdata_start+0xffffba68>
 4040ec4:	00802034 	movhi	r2,128
 4040ec8:	99001034 	orhi	r4,r19,64
 4040ecc:	10bfffc4 	addi	r2,r2,-1
 4040ed0:	a829883a 	mov	r20,r21
 4040ed4:	2088703a 	and	r4,r4,r2
 4040ed8:	003f8506 	br	4040cf0 <__flash_rwdata_start+0xffffbb60>

04040edc <__subsf3>:
 4040edc:	defffc04 	addi	sp,sp,-16
 4040ee0:	280cd5fa 	srli	r6,r5,23
 4040ee4:	dc000015 	stw	r16,0(sp)
 4040ee8:	01c02034 	movhi	r7,128
 4040eec:	2020d5fa 	srli	r16,r4,23
 4040ef0:	39ffffc4 	addi	r7,r7,-1
 4040ef4:	3906703a 	and	r3,r7,r4
 4040ef8:	dc400115 	stw	r17,4(sp)
 4040efc:	394e703a 	and	r7,r7,r5
 4040f00:	2022d7fa 	srli	r17,r4,31
 4040f04:	dfc00315 	stw	ra,12(sp)
 4040f08:	dc800215 	stw	r18,8(sp)
 4040f0c:	31803fcc 	andi	r6,r6,255
 4040f10:	01003fc4 	movi	r4,255
 4040f14:	84003fcc 	andi	r16,r16,255
 4040f18:	180690fa 	slli	r3,r3,3
 4040f1c:	2804d7fa 	srli	r2,r5,31
 4040f20:	380e90fa 	slli	r7,r7,3
 4040f24:	31006d26 	beq	r6,r4,40410dc <__subsf3+0x200>
 4040f28:	1080005c 	xori	r2,r2,1
 4040f2c:	8189c83a 	sub	r4,r16,r6
 4040f30:	14404f26 	beq	r2,r17,4041070 <__subsf3+0x194>
 4040f34:	0100770e 	bge	zero,r4,4041114 <__subsf3+0x238>
 4040f38:	30001e1e 	bne	r6,zero,4040fb4 <__subsf3+0xd8>
 4040f3c:	38006a1e 	bne	r7,zero,40410e8 <__subsf3+0x20c>
 4040f40:	188001cc 	andi	r2,r3,7
 4040f44:	10000426 	beq	r2,zero,4040f58 <__subsf3+0x7c>
 4040f48:	188003cc 	andi	r2,r3,15
 4040f4c:	01000104 	movi	r4,4
 4040f50:	11000126 	beq	r2,r4,4040f58 <__subsf3+0x7c>
 4040f54:	1907883a 	add	r3,r3,r4
 4040f58:	1881002c 	andhi	r2,r3,1024
 4040f5c:	10003926 	beq	r2,zero,4041044 <__subsf3+0x168>
 4040f60:	84000044 	addi	r16,r16,1
 4040f64:	00803fc4 	movi	r2,255
 4040f68:	80807526 	beq	r16,r2,4041140 <__subsf3+0x264>
 4040f6c:	180691ba 	slli	r3,r3,6
 4040f70:	8880004c 	andi	r2,r17,1
 4040f74:	180ad27a 	srli	r5,r3,9
 4040f78:	84003fcc 	andi	r16,r16,255
 4040f7c:	800695fa 	slli	r3,r16,23
 4040f80:	10803fcc 	andi	r2,r2,255
 4040f84:	01002034 	movhi	r4,128
 4040f88:	213fffc4 	addi	r4,r4,-1
 4040f8c:	100497fa 	slli	r2,r2,31
 4040f90:	2920703a 	and	r16,r5,r4
 4040f94:	80e0b03a 	or	r16,r16,r3
 4040f98:	8084b03a 	or	r2,r16,r2
 4040f9c:	dfc00317 	ldw	ra,12(sp)
 4040fa0:	dc800217 	ldw	r18,8(sp)
 4040fa4:	dc400117 	ldw	r17,4(sp)
 4040fa8:	dc000017 	ldw	r16,0(sp)
 4040fac:	dec00404 	addi	sp,sp,16
 4040fb0:	f800283a 	ret
 4040fb4:	00803fc4 	movi	r2,255
 4040fb8:	80bfe126 	beq	r16,r2,4040f40 <__flash_rwdata_start+0xffffbdb0>
 4040fbc:	39c10034 	orhi	r7,r7,1024
 4040fc0:	008006c4 	movi	r2,27
 4040fc4:	11007416 	blt	r2,r4,4041198 <__subsf3+0x2bc>
 4040fc8:	00800804 	movi	r2,32
 4040fcc:	1105c83a 	sub	r2,r2,r4
 4040fd0:	3884983a 	sll	r2,r7,r2
 4040fd4:	390ed83a 	srl	r7,r7,r4
 4040fd8:	1008c03a 	cmpne	r4,r2,zero
 4040fdc:	390eb03a 	or	r7,r7,r4
 4040fe0:	19c7c83a 	sub	r3,r3,r7
 4040fe4:	1881002c 	andhi	r2,r3,1024
 4040fe8:	10001426 	beq	r2,zero,404103c <__subsf3+0x160>
 4040fec:	04810034 	movhi	r18,1024
 4040ff0:	94bfffc4 	addi	r18,r18,-1
 4040ff4:	1ca4703a 	and	r18,r3,r18
 4040ff8:	9009883a 	mov	r4,r18
 4040ffc:	40429280 	call	4042928 <__clzsi2>
 4041000:	10bffec4 	addi	r2,r2,-5
 4041004:	90a4983a 	sll	r18,r18,r2
 4041008:	14005116 	blt	r2,r16,4041150 <__subsf3+0x274>
 404100c:	1405c83a 	sub	r2,r2,r16
 4041010:	10c00044 	addi	r3,r2,1
 4041014:	00800804 	movi	r2,32
 4041018:	10c5c83a 	sub	r2,r2,r3
 404101c:	9084983a 	sll	r2,r18,r2
 4041020:	90e4d83a 	srl	r18,r18,r3
 4041024:	0021883a 	mov	r16,zero
 4041028:	1006c03a 	cmpne	r3,r2,zero
 404102c:	90c6b03a 	or	r3,r18,r3
 4041030:	003fc306 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041034:	2000e026 	beq	r4,zero,40413b8 <__subsf3+0x4dc>
 4041038:	2007883a 	mov	r3,r4
 404103c:	188001cc 	andi	r2,r3,7
 4041040:	103fc11e 	bne	r2,zero,4040f48 <__flash_rwdata_start+0xffffbdb8>
 4041044:	180ad0fa 	srli	r5,r3,3
 4041048:	00c03fc4 	movi	r3,255
 404104c:	8880004c 	andi	r2,r17,1
 4041050:	80c0031e 	bne	r16,r3,4041060 <__subsf3+0x184>
 4041054:	28006d26 	beq	r5,zero,404120c <__subsf3+0x330>
 4041058:	29401034 	orhi	r5,r5,64
 404105c:	043fffc4 	movi	r16,-1
 4041060:	00c02034 	movhi	r3,128
 4041064:	18ffffc4 	addi	r3,r3,-1
 4041068:	28ca703a 	and	r5,r5,r3
 404106c:	003fc206 	br	4040f78 <__flash_rwdata_start+0xffffbde8>
 4041070:	01003c0e 	bge	zero,r4,4041164 <__subsf3+0x288>
 4041074:	30002126 	beq	r6,zero,40410fc <__subsf3+0x220>
 4041078:	01403fc4 	movi	r5,255
 404107c:	817fb026 	beq	r16,r5,4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041080:	39c10034 	orhi	r7,r7,1024
 4041084:	014006c4 	movi	r5,27
 4041088:	29007416 	blt	r5,r4,404125c <__subsf3+0x380>
 404108c:	01400804 	movi	r5,32
 4041090:	290bc83a 	sub	r5,r5,r4
 4041094:	394a983a 	sll	r5,r7,r5
 4041098:	390ed83a 	srl	r7,r7,r4
 404109c:	2808c03a 	cmpne	r4,r5,zero
 40410a0:	390eb03a 	or	r7,r7,r4
 40410a4:	19c7883a 	add	r3,r3,r7
 40410a8:	1901002c 	andhi	r4,r3,1024
 40410ac:	20003826 	beq	r4,zero,4041190 <__subsf3+0x2b4>
 40410b0:	84000044 	addi	r16,r16,1
 40410b4:	01003fc4 	movi	r4,255
 40410b8:	81005426 	beq	r16,r4,404120c <__subsf3+0x330>
 40410bc:	1023883a 	mov	r17,r2
 40410c0:	00bf0034 	movhi	r2,64512
 40410c4:	10bfffc4 	addi	r2,r2,-1
 40410c8:	1900004c 	andi	r4,r3,1
 40410cc:	1886703a 	and	r3,r3,r2
 40410d0:	1806d07a 	srli	r3,r3,1
 40410d4:	1906b03a 	or	r3,r3,r4
 40410d8:	003f9906 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 40410dc:	383f9226 	beq	r7,zero,4040f28 <__flash_rwdata_start+0xffffbd98>
 40410e0:	10803fcc 	andi	r2,r2,255
 40410e4:	003f9106 	br	4040f2c <__flash_rwdata_start+0xffffbd9c>
 40410e8:	213fffc4 	addi	r4,r4,-1
 40410ec:	203fbc26 	beq	r4,zero,4040fe0 <__flash_rwdata_start+0xffffbe50>
 40410f0:	00803fc4 	movi	r2,255
 40410f4:	80bfb21e 	bne	r16,r2,4040fc0 <__flash_rwdata_start+0xffffbe30>
 40410f8:	003f9106 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 40410fc:	383f9026 	beq	r7,zero,4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041100:	213fffc4 	addi	r4,r4,-1
 4041104:	203fe726 	beq	r4,zero,40410a4 <__flash_rwdata_start+0xffffbf14>
 4041108:	01403fc4 	movi	r5,255
 404110c:	817fdd1e 	bne	r16,r5,4041084 <__flash_rwdata_start+0xffffbef4>
 4041110:	003f8b06 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041114:	2000221e 	bne	r4,zero,40411a0 <__subsf3+0x2c4>
 4041118:	81000044 	addi	r4,r16,1
 404111c:	21003fcc 	andi	r4,r4,255
 4041120:	01400044 	movi	r5,1
 4041124:	2900470e 	bge	r5,r4,4041244 <__subsf3+0x368>
 4041128:	19e5c83a 	sub	r18,r3,r7
 404112c:	9141002c 	andhi	r5,r18,1024
 4041130:	28002d26 	beq	r5,zero,40411e8 <__subsf3+0x30c>
 4041134:	38e5c83a 	sub	r18,r7,r3
 4041138:	1023883a 	mov	r17,r2
 404113c:	003fae06 	br	4040ff8 <__flash_rwdata_start+0xffffbe68>
 4041140:	8880004c 	andi	r2,r17,1
 4041144:	043fffc4 	movi	r16,-1
 4041148:	000b883a 	mov	r5,zero
 404114c:	003f8a06 	br	4040f78 <__flash_rwdata_start+0xffffbde8>
 4041150:	00ff0034 	movhi	r3,64512
 4041154:	18ffffc4 	addi	r3,r3,-1
 4041158:	80a1c83a 	sub	r16,r16,r2
 404115c:	90c6703a 	and	r3,r18,r3
 4041160:	003f7706 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041164:	2000431e 	bne	r4,zero,4041274 <__subsf3+0x398>
 4041168:	81000044 	addi	r4,r16,1
 404116c:	21803fcc 	andi	r6,r4,255
 4041170:	01400044 	movi	r5,1
 4041174:	2980280e 	bge	r5,r6,4041218 <__subsf3+0x33c>
 4041178:	01403fc4 	movi	r5,255
 404117c:	21402326 	beq	r4,r5,404120c <__subsf3+0x330>
 4041180:	19c7883a 	add	r3,r3,r7
 4041184:	1806d07a 	srli	r3,r3,1
 4041188:	2021883a 	mov	r16,r4
 404118c:	003f6c06 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041190:	1023883a 	mov	r17,r2
 4041194:	003fa906 	br	404103c <__flash_rwdata_start+0xffffbeac>
 4041198:	01c00044 	movi	r7,1
 404119c:	003f9006 	br	4040fe0 <__flash_rwdata_start+0xffffbe50>
 40411a0:	8000151e 	bne	r16,zero,40411f8 <__subsf3+0x31c>
 40411a4:	18002f26 	beq	r3,zero,4041264 <__subsf3+0x388>
 40411a8:	0108303a 	nor	r4,zero,r4
 40411ac:	20000a26 	beq	r4,zero,40411d8 <__subsf3+0x2fc>
 40411b0:	01403fc4 	movi	r5,255
 40411b4:	31402b26 	beq	r6,r5,4041264 <__subsf3+0x388>
 40411b8:	014006c4 	movi	r5,27
 40411bc:	29006e16 	blt	r5,r4,4041378 <__subsf3+0x49c>
 40411c0:	01400804 	movi	r5,32
 40411c4:	290bc83a 	sub	r5,r5,r4
 40411c8:	194a983a 	sll	r5,r3,r5
 40411cc:	1908d83a 	srl	r4,r3,r4
 40411d0:	2806c03a 	cmpne	r3,r5,zero
 40411d4:	20c6b03a 	or	r3,r4,r3
 40411d8:	38c7c83a 	sub	r3,r7,r3
 40411dc:	3021883a 	mov	r16,r6
 40411e0:	1023883a 	mov	r17,r2
 40411e4:	003f7f06 	br	4040fe4 <__flash_rwdata_start+0xffffbe54>
 40411e8:	903f831e 	bne	r18,zero,4040ff8 <__flash_rwdata_start+0xffffbe68>
 40411ec:	0005883a 	mov	r2,zero
 40411f0:	0021883a 	mov	r16,zero
 40411f4:	003f9a06 	br	4041060 <__flash_rwdata_start+0xffffbed0>
 40411f8:	01403fc4 	movi	r5,255
 40411fc:	31401926 	beq	r6,r5,4041264 <__subsf3+0x388>
 4041200:	0109c83a 	sub	r4,zero,r4
 4041204:	18c10034 	orhi	r3,r3,1024
 4041208:	003feb06 	br	40411b8 <__flash_rwdata_start+0xffffc028>
 404120c:	043fffc4 	movi	r16,-1
 4041210:	000b883a 	mov	r5,zero
 4041214:	003f5806 	br	4040f78 <__flash_rwdata_start+0xffffbde8>
 4041218:	8000481e 	bne	r16,zero,404133c <__subsf3+0x460>
 404121c:	18006226 	beq	r3,zero,40413a8 <__subsf3+0x4cc>
 4041220:	383f4726 	beq	r7,zero,4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041224:	19c7883a 	add	r3,r3,r7
 4041228:	1881002c 	andhi	r2,r3,1024
 404122c:	103f8326 	beq	r2,zero,404103c <__flash_rwdata_start+0xffffbeac>
 4041230:	00bf0034 	movhi	r2,64512
 4041234:	10bfffc4 	addi	r2,r2,-1
 4041238:	2821883a 	mov	r16,r5
 404123c:	1886703a 	and	r3,r3,r2
 4041240:	003f3f06 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041244:	80001c1e 	bne	r16,zero,40412b8 <__subsf3+0x3dc>
 4041248:	1800261e 	bne	r3,zero,40412e4 <__subsf3+0x408>
 404124c:	38004c26 	beq	r7,zero,4041380 <__subsf3+0x4a4>
 4041250:	3807883a 	mov	r3,r7
 4041254:	1023883a 	mov	r17,r2
 4041258:	003f3906 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 404125c:	01c00044 	movi	r7,1
 4041260:	003f9006 	br	40410a4 <__flash_rwdata_start+0xffffbf14>
 4041264:	3807883a 	mov	r3,r7
 4041268:	3021883a 	mov	r16,r6
 404126c:	1023883a 	mov	r17,r2
 4041270:	003f3306 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041274:	8000161e 	bne	r16,zero,40412d0 <__subsf3+0x3f4>
 4041278:	18002d26 	beq	r3,zero,4041330 <__subsf3+0x454>
 404127c:	0108303a 	nor	r4,zero,r4
 4041280:	20000a26 	beq	r4,zero,40412ac <__subsf3+0x3d0>
 4041284:	01403fc4 	movi	r5,255
 4041288:	31402926 	beq	r6,r5,4041330 <__subsf3+0x454>
 404128c:	014006c4 	movi	r5,27
 4041290:	29004716 	blt	r5,r4,40413b0 <__subsf3+0x4d4>
 4041294:	01400804 	movi	r5,32
 4041298:	290bc83a 	sub	r5,r5,r4
 404129c:	194a983a 	sll	r5,r3,r5
 40412a0:	1908d83a 	srl	r4,r3,r4
 40412a4:	2806c03a 	cmpne	r3,r5,zero
 40412a8:	20c6b03a 	or	r3,r4,r3
 40412ac:	19c7883a 	add	r3,r3,r7
 40412b0:	3021883a 	mov	r16,r6
 40412b4:	003f7c06 	br	40410a8 <__flash_rwdata_start+0xffffbf18>
 40412b8:	1800111e 	bne	r3,zero,4041300 <__subsf3+0x424>
 40412bc:	38003326 	beq	r7,zero,404138c <__subsf3+0x4b0>
 40412c0:	3807883a 	mov	r3,r7
 40412c4:	1023883a 	mov	r17,r2
 40412c8:	04003fc4 	movi	r16,255
 40412cc:	003f1c06 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 40412d0:	01403fc4 	movi	r5,255
 40412d4:	31401626 	beq	r6,r5,4041330 <__subsf3+0x454>
 40412d8:	0109c83a 	sub	r4,zero,r4
 40412dc:	18c10034 	orhi	r3,r3,1024
 40412e0:	003fea06 	br	404128c <__flash_rwdata_start+0xffffc0fc>
 40412e4:	383f1626 	beq	r7,zero,4040f40 <__flash_rwdata_start+0xffffbdb0>
 40412e8:	19c9c83a 	sub	r4,r3,r7
 40412ec:	2141002c 	andhi	r5,r4,1024
 40412f0:	283f5026 	beq	r5,zero,4041034 <__flash_rwdata_start+0xffffbea4>
 40412f4:	38c7c83a 	sub	r3,r7,r3
 40412f8:	1023883a 	mov	r17,r2
 40412fc:	003f1006 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041300:	38001b26 	beq	r7,zero,4041370 <__subsf3+0x494>
 4041304:	1806d0fa 	srli	r3,r3,3
 4041308:	1900102c 	andhi	r4,r3,64
 404130c:	20000526 	beq	r4,zero,4041324 <__subsf3+0x448>
 4041310:	380ed0fa 	srli	r7,r7,3
 4041314:	3900102c 	andhi	r4,r7,64
 4041318:	2000021e 	bne	r4,zero,4041324 <__subsf3+0x448>
 404131c:	3807883a 	mov	r3,r7
 4041320:	1023883a 	mov	r17,r2
 4041324:	180690fa 	slli	r3,r3,3
 4041328:	04003fc4 	movi	r16,255
 404132c:	003f0406 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041330:	3807883a 	mov	r3,r7
 4041334:	3021883a 	mov	r16,r6
 4041338:	003f0106 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 404133c:	18001726 	beq	r3,zero,404139c <__subsf3+0x4c0>
 4041340:	38000b26 	beq	r7,zero,4041370 <__subsf3+0x494>
 4041344:	1806d0fa 	srli	r3,r3,3
 4041348:	1900102c 	andhi	r4,r3,64
 404134c:	20000426 	beq	r4,zero,4041360 <__subsf3+0x484>
 4041350:	380ed0fa 	srli	r7,r7,3
 4041354:	3900102c 	andhi	r4,r7,64
 4041358:	2000011e 	bne	r4,zero,4041360 <__subsf3+0x484>
 404135c:	3807883a 	mov	r3,r7
 4041360:	180690fa 	slli	r3,r3,3
 4041364:	1023883a 	mov	r17,r2
 4041368:	04003fc4 	movi	r16,255
 404136c:	003ef406 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041370:	04003fc4 	movi	r16,255
 4041374:	003ef206 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 4041378:	00c00044 	movi	r3,1
 404137c:	003f9606 	br	40411d8 <__flash_rwdata_start+0xffffc048>
 4041380:	000b883a 	mov	r5,zero
 4041384:	0005883a 	mov	r2,zero
 4041388:	003f3506 	br	4041060 <__flash_rwdata_start+0xffffbed0>
 404138c:	01402034 	movhi	r5,128
 4041390:	297fffc4 	addi	r5,r5,-1
 4041394:	0005883a 	mov	r2,zero
 4041398:	003f2f06 	br	4041058 <__flash_rwdata_start+0xffffbec8>
 404139c:	3807883a 	mov	r3,r7
 40413a0:	04003fc4 	movi	r16,255
 40413a4:	003ee606 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 40413a8:	3807883a 	mov	r3,r7
 40413ac:	003ee406 	br	4040f40 <__flash_rwdata_start+0xffffbdb0>
 40413b0:	00c00044 	movi	r3,1
 40413b4:	003fbd06 	br	40412ac <__flash_rwdata_start+0xffffc11c>
 40413b8:	0005883a 	mov	r2,zero
 40413bc:	003f2806 	br	4041060 <__flash_rwdata_start+0xffffbed0>

040413c0 <__fixsfsi>:
 40413c0:	200ad5fa 	srli	r5,r4,23
 40413c4:	00c02034 	movhi	r3,128
 40413c8:	18ffffc4 	addi	r3,r3,-1
 40413cc:	29403fcc 	andi	r5,r5,255
 40413d0:	00801f84 	movi	r2,126
 40413d4:	1906703a 	and	r3,r3,r4
 40413d8:	2008d7fa 	srli	r4,r4,31
 40413dc:	11400e0e 	bge	r2,r5,4041418 <__fixsfsi+0x58>
 40413e0:	00802744 	movi	r2,157
 40413e4:	11400816 	blt	r2,r5,4041408 <__fixsfsi+0x48>
 40413e8:	00802544 	movi	r2,149
 40413ec:	18c02034 	orhi	r3,r3,128
 40413f0:	11400b0e 	bge	r2,r5,4041420 <__fixsfsi+0x60>
 40413f4:	28bfda84 	addi	r2,r5,-150
 40413f8:	1884983a 	sll	r2,r3,r2
 40413fc:	20000726 	beq	r4,zero,404141c <__fixsfsi+0x5c>
 4041400:	0085c83a 	sub	r2,zero,r2
 4041404:	f800283a 	ret
 4041408:	00a00034 	movhi	r2,32768
 404140c:	10bfffc4 	addi	r2,r2,-1
 4041410:	2085883a 	add	r2,r4,r2
 4041414:	f800283a 	ret
 4041418:	0005883a 	mov	r2,zero
 404141c:	f800283a 	ret
 4041420:	00802584 	movi	r2,150
 4041424:	1145c83a 	sub	r2,r2,r5
 4041428:	1884d83a 	srl	r2,r3,r2
 404142c:	003ff306 	br	40413fc <__flash_rwdata_start+0xffffc26c>

04041430 <__floatsisf>:
 4041430:	defffd04 	addi	sp,sp,-12
 4041434:	dfc00215 	stw	ra,8(sp)
 4041438:	dc400115 	stw	r17,4(sp)
 404143c:	dc000015 	stw	r16,0(sp)
 4041440:	20003526 	beq	r4,zero,4041518 <__floatsisf+0xe8>
 4041444:	2021883a 	mov	r16,r4
 4041448:	2022d7fa 	srli	r17,r4,31
 404144c:	20003616 	blt	r4,zero,4041528 <__floatsisf+0xf8>
 4041450:	8009883a 	mov	r4,r16
 4041454:	40429280 	call	4042928 <__clzsi2>
 4041458:	00c02784 	movi	r3,158
 404145c:	1887c83a 	sub	r3,r3,r2
 4041460:	01002584 	movi	r4,150
 4041464:	20c01416 	blt	r4,r3,40414b8 <__floatsisf+0x88>
 4041468:	20c9c83a 	sub	r4,r4,r3
 404146c:	8120983a 	sll	r16,r16,r4
 4041470:	00802034 	movhi	r2,128
 4041474:	10bfffc4 	addi	r2,r2,-1
 4041478:	8809883a 	mov	r4,r17
 404147c:	80a0703a 	and	r16,r16,r2
 4041480:	18803fcc 	andi	r2,r3,255
 4041484:	100695fa 	slli	r3,r2,23
 4041488:	20803fcc 	andi	r2,r4,255
 404148c:	100897fa 	slli	r4,r2,31
 4041490:	00802034 	movhi	r2,128
 4041494:	10bfffc4 	addi	r2,r2,-1
 4041498:	8084703a 	and	r2,r16,r2
 404149c:	10c4b03a 	or	r2,r2,r3
 40414a0:	1104b03a 	or	r2,r2,r4
 40414a4:	dfc00217 	ldw	ra,8(sp)
 40414a8:	dc400117 	ldw	r17,4(sp)
 40414ac:	dc000017 	ldw	r16,0(sp)
 40414b0:	dec00304 	addi	sp,sp,12
 40414b4:	f800283a 	ret
 40414b8:	01002644 	movi	r4,153
 40414bc:	20c01c16 	blt	r4,r3,4041530 <__floatsisf+0x100>
 40414c0:	20c9c83a 	sub	r4,r4,r3
 40414c4:	8120983a 	sll	r16,r16,r4
 40414c8:	013f0034 	movhi	r4,64512
 40414cc:	213fffc4 	addi	r4,r4,-1
 40414d0:	814001cc 	andi	r5,r16,7
 40414d4:	8108703a 	and	r4,r16,r4
 40414d8:	28000426 	beq	r5,zero,40414ec <__floatsisf+0xbc>
 40414dc:	840003cc 	andi	r16,r16,15
 40414e0:	01400104 	movi	r5,4
 40414e4:	81400126 	beq	r16,r5,40414ec <__floatsisf+0xbc>
 40414e8:	2149883a 	add	r4,r4,r5
 40414ec:	2141002c 	andhi	r5,r4,1024
 40414f0:	28000526 	beq	r5,zero,4041508 <__floatsisf+0xd8>
 40414f4:	00c027c4 	movi	r3,159
 40414f8:	1887c83a 	sub	r3,r3,r2
 40414fc:	00bf0034 	movhi	r2,64512
 4041500:	10bfffc4 	addi	r2,r2,-1
 4041504:	2088703a 	and	r4,r4,r2
 4041508:	202091ba 	slli	r16,r4,6
 404150c:	8809883a 	mov	r4,r17
 4041510:	8020d27a 	srli	r16,r16,9
 4041514:	003fda06 	br	4041480 <__flash_rwdata_start+0xffffc2f0>
 4041518:	0009883a 	mov	r4,zero
 404151c:	0007883a 	mov	r3,zero
 4041520:	0021883a 	mov	r16,zero
 4041524:	003fd606 	br	4041480 <__flash_rwdata_start+0xffffc2f0>
 4041528:	0121c83a 	sub	r16,zero,r4
 404152c:	003fc806 	br	4041450 <__flash_rwdata_start+0xffffc2c0>
 4041530:	01002e44 	movi	r4,185
 4041534:	20c9c83a 	sub	r4,r4,r3
 4041538:	01400144 	movi	r5,5
 404153c:	8108983a 	sll	r4,r16,r4
 4041540:	288bc83a 	sub	r5,r5,r2
 4041544:	8160d83a 	srl	r16,r16,r5
 4041548:	2008c03a 	cmpne	r4,r4,zero
 404154c:	8120b03a 	or	r16,r16,r4
 4041550:	003fdd06 	br	40414c8 <__flash_rwdata_start+0xffffc338>

04041554 <__gedf2>:
 4041554:	2804d53a 	srli	r2,r5,20
 4041558:	3806d53a 	srli	r3,r7,20
 404155c:	02000434 	movhi	r8,16
 4041560:	423fffc4 	addi	r8,r8,-1
 4041564:	1081ffcc 	andi	r2,r2,2047
 4041568:	0241ffc4 	movi	r9,2047
 404156c:	2a14703a 	and	r10,r5,r8
 4041570:	18c1ffcc 	andi	r3,r3,2047
 4041574:	3a10703a 	and	r8,r7,r8
 4041578:	280ad7fa 	srli	r5,r5,31
 404157c:	380ed7fa 	srli	r7,r7,31
 4041580:	12401d26 	beq	r2,r9,40415f8 <__gedf2+0xa4>
 4041584:	0241ffc4 	movi	r9,2047
 4041588:	1a401226 	beq	r3,r9,40415d4 <__gedf2+0x80>
 404158c:	1000081e 	bne	r2,zero,40415b0 <__gedf2+0x5c>
 4041590:	2296b03a 	or	r11,r4,r10
 4041594:	5813003a 	cmpeq	r9,r11,zero
 4041598:	1800091e 	bne	r3,zero,40415c0 <__gedf2+0x6c>
 404159c:	3218b03a 	or	r12,r6,r8
 40415a0:	6000071e 	bne	r12,zero,40415c0 <__gedf2+0x6c>
 40415a4:	0005883a 	mov	r2,zero
 40415a8:	5800101e 	bne	r11,zero,40415ec <__gedf2+0x98>
 40415ac:	f800283a 	ret
 40415b0:	18000c1e 	bne	r3,zero,40415e4 <__gedf2+0x90>
 40415b4:	3212b03a 	or	r9,r6,r8
 40415b8:	48000c26 	beq	r9,zero,40415ec <__gedf2+0x98>
 40415bc:	0013883a 	mov	r9,zero
 40415c0:	39c03fcc 	andi	r7,r7,255
 40415c4:	48000826 	beq	r9,zero,40415e8 <__gedf2+0x94>
 40415c8:	38000926 	beq	r7,zero,40415f0 <__gedf2+0x9c>
 40415cc:	00800044 	movi	r2,1
 40415d0:	f800283a 	ret
 40415d4:	3212b03a 	or	r9,r6,r8
 40415d8:	483fec26 	beq	r9,zero,404158c <__flash_rwdata_start+0xffffc3fc>
 40415dc:	00bfff84 	movi	r2,-2
 40415e0:	f800283a 	ret
 40415e4:	39c03fcc 	andi	r7,r7,255
 40415e8:	29c00626 	beq	r5,r7,4041604 <__gedf2+0xb0>
 40415ec:	283ff726 	beq	r5,zero,40415cc <__flash_rwdata_start+0xffffc43c>
 40415f0:	00bfffc4 	movi	r2,-1
 40415f4:	f800283a 	ret
 40415f8:	2292b03a 	or	r9,r4,r10
 40415fc:	483fe126 	beq	r9,zero,4041584 <__flash_rwdata_start+0xffffc3f4>
 4041600:	003ff606 	br	40415dc <__flash_rwdata_start+0xffffc44c>
 4041604:	18bff916 	blt	r3,r2,40415ec <__flash_rwdata_start+0xffffc45c>
 4041608:	10c00316 	blt	r2,r3,4041618 <__gedf2+0xc4>
 404160c:	42bff736 	bltu	r8,r10,40415ec <__flash_rwdata_start+0xffffc45c>
 4041610:	52000326 	beq	r10,r8,4041620 <__gedf2+0xcc>
 4041614:	5200042e 	bgeu	r10,r8,4041628 <__gedf2+0xd4>
 4041618:	283fec1e 	bne	r5,zero,40415cc <__flash_rwdata_start+0xffffc43c>
 404161c:	003ff406 	br	40415f0 <__flash_rwdata_start+0xffffc460>
 4041620:	313ff236 	bltu	r6,r4,40415ec <__flash_rwdata_start+0xffffc45c>
 4041624:	21bffc36 	bltu	r4,r6,4041618 <__flash_rwdata_start+0xffffc488>
 4041628:	0005883a 	mov	r2,zero
 404162c:	f800283a 	ret

04041630 <__muldf3>:
 4041630:	deffee04 	addi	sp,sp,-72
 4041634:	dd000c15 	stw	r20,48(sp)
 4041638:	2828d53a 	srli	r20,r5,20
 404163c:	ddc00f15 	stw	r23,60(sp)
 4041640:	282ed7fa 	srli	r23,r5,31
 4041644:	dc000815 	stw	r16,32(sp)
 4041648:	04000434 	movhi	r16,16
 404164c:	dcc00b15 	stw	r19,44(sp)
 4041650:	843fffc4 	addi	r16,r16,-1
 4041654:	dfc01115 	stw	ra,68(sp)
 4041658:	df001015 	stw	fp,64(sp)
 404165c:	dd800e15 	stw	r22,56(sp)
 4041660:	dd400d15 	stw	r21,52(sp)
 4041664:	dc800a15 	stw	r18,40(sp)
 4041668:	dc400915 	stw	r17,36(sp)
 404166c:	a501ffcc 	andi	r20,r20,2047
 4041670:	2c20703a 	and	r16,r5,r16
 4041674:	b827883a 	mov	r19,r23
 4041678:	ba403fcc 	andi	r9,r23,255
 404167c:	a0006026 	beq	r20,zero,4041800 <__muldf3+0x1d0>
 4041680:	0081ffc4 	movi	r2,2047
 4041684:	202d883a 	mov	r22,r4
 4041688:	a0803626 	beq	r20,r2,4041764 <__muldf3+0x134>
 404168c:	84000434 	orhi	r16,r16,16
 4041690:	200ad77a 	srli	r5,r4,29
 4041694:	800490fa 	slli	r2,r16,3
 4041698:	202c90fa 	slli	r22,r4,3
 404169c:	a53f0044 	addi	r20,r20,-1023
 40416a0:	28a0b03a 	or	r16,r5,r2
 40416a4:	002b883a 	mov	r21,zero
 40416a8:	000b883a 	mov	r5,zero
 40416ac:	3804d53a 	srli	r2,r7,20
 40416b0:	3838d7fa 	srli	fp,r7,31
 40416b4:	04400434 	movhi	r17,16
 40416b8:	8c7fffc4 	addi	r17,r17,-1
 40416bc:	1081ffcc 	andi	r2,r2,2047
 40416c0:	3025883a 	mov	r18,r6
 40416c4:	3c62703a 	and	r17,r7,r17
 40416c8:	e2803fcc 	andi	r10,fp,255
 40416cc:	10006d26 	beq	r2,zero,4041884 <__muldf3+0x254>
 40416d0:	00c1ffc4 	movi	r3,2047
 40416d4:	10c06526 	beq	r2,r3,404186c <__muldf3+0x23c>
 40416d8:	8c400434 	orhi	r17,r17,16
 40416dc:	300ed77a 	srli	r7,r6,29
 40416e0:	880690fa 	slli	r3,r17,3
 40416e4:	302490fa 	slli	r18,r6,3
 40416e8:	10bf0044 	addi	r2,r2,-1023
 40416ec:	38e2b03a 	or	r17,r7,r3
 40416f0:	000f883a 	mov	r7,zero
 40416f4:	a087883a 	add	r3,r20,r2
 40416f8:	010003c4 	movi	r4,15
 40416fc:	3d44b03a 	or	r2,r7,r21
 4041700:	e5ccf03a 	xor	r6,fp,r23
 4041704:	1a000044 	addi	r8,r3,1
 4041708:	20809b36 	bltu	r4,r2,4041978 <__muldf3+0x348>
 404170c:	100490ba 	slli	r2,r2,2
 4041710:	01010134 	movhi	r4,1028
 4041714:	2105c904 	addi	r4,r4,5924
 4041718:	1105883a 	add	r2,r2,r4
 404171c:	10800017 	ldw	r2,0(r2)
 4041720:	1000683a 	jmp	r2
 4041724:	04041978 	rdprs	r16,zero,4197
 4041728:	04041784 	movi	r16,4190
 404172c:	04041784 	movi	r16,4190
 4041730:	04041780 	call	404178 <_gp+0x3fa9c8>
 4041734:	04041954 	movui	r16,4197
 4041738:	04041954 	movui	r16,4197
 404173c:	0404193c 	xorhi	r16,zero,4196
 4041740:	04041780 	call	404178 <_gp+0x3fa9c8>
 4041744:	04041954 	movui	r16,4197
 4041748:	0404193c 	xorhi	r16,zero,4196
 404174c:	04041954 	movui	r16,4197
 4041750:	04041780 	call	404178 <_gp+0x3fa9c8>
 4041754:	04041964 	muli	r16,zero,4197
 4041758:	04041964 	muli	r16,zero,4197
 404175c:	04041964 	muli	r16,zero,4197
 4041760:	04041cc4 	movi	r16,4211
 4041764:	2404b03a 	or	r2,r4,r16
 4041768:	1000711e 	bne	r2,zero,4041930 <__muldf3+0x300>
 404176c:	05400204 	movi	r21,8
 4041770:	0021883a 	mov	r16,zero
 4041774:	002d883a 	mov	r22,zero
 4041778:	01400084 	movi	r5,2
 404177c:	003fcb06 	br	40416ac <__flash_rwdata_start+0xffffc51c>
 4041780:	500d883a 	mov	r6,r10
 4041784:	00800084 	movi	r2,2
 4041788:	38805926 	beq	r7,r2,40418f0 <__muldf3+0x2c0>
 404178c:	008000c4 	movi	r2,3
 4041790:	3881bb26 	beq	r7,r2,4041e80 <__muldf3+0x850>
 4041794:	00800044 	movi	r2,1
 4041798:	3881961e 	bne	r7,r2,4041df4 <__muldf3+0x7c4>
 404179c:	3027883a 	mov	r19,r6
 40417a0:	0005883a 	mov	r2,zero
 40417a4:	0021883a 	mov	r16,zero
 40417a8:	002d883a 	mov	r22,zero
 40417ac:	1004953a 	slli	r2,r2,20
 40417b0:	98c03fcc 	andi	r3,r19,255
 40417b4:	04400434 	movhi	r17,16
 40417b8:	8c7fffc4 	addi	r17,r17,-1
 40417bc:	180697fa 	slli	r3,r3,31
 40417c0:	8460703a 	and	r16,r16,r17
 40417c4:	80a0b03a 	or	r16,r16,r2
 40417c8:	80c6b03a 	or	r3,r16,r3
 40417cc:	b005883a 	mov	r2,r22
 40417d0:	dfc01117 	ldw	ra,68(sp)
 40417d4:	df001017 	ldw	fp,64(sp)
 40417d8:	ddc00f17 	ldw	r23,60(sp)
 40417dc:	dd800e17 	ldw	r22,56(sp)
 40417e0:	dd400d17 	ldw	r21,52(sp)
 40417e4:	dd000c17 	ldw	r20,48(sp)
 40417e8:	dcc00b17 	ldw	r19,44(sp)
 40417ec:	dc800a17 	ldw	r18,40(sp)
 40417f0:	dc400917 	ldw	r17,36(sp)
 40417f4:	dc000817 	ldw	r16,32(sp)
 40417f8:	dec01204 	addi	sp,sp,72
 40417fc:	f800283a 	ret
 4041800:	2404b03a 	or	r2,r4,r16
 4041804:	202b883a 	mov	r21,r4
 4041808:	10004426 	beq	r2,zero,404191c <__muldf3+0x2ec>
 404180c:	80015126 	beq	r16,zero,4041d54 <__muldf3+0x724>
 4041810:	8009883a 	mov	r4,r16
 4041814:	d9800715 	stw	r6,28(sp)
 4041818:	d9c00215 	stw	r7,8(sp)
 404181c:	da400415 	stw	r9,16(sp)
 4041820:	40429280 	call	4042928 <__clzsi2>
 4041824:	d9800717 	ldw	r6,28(sp)
 4041828:	d9c00217 	ldw	r7,8(sp)
 404182c:	da400417 	ldw	r9,16(sp)
 4041830:	113ffd44 	addi	r4,r2,-11
 4041834:	00c00704 	movi	r3,28
 4041838:	19014216 	blt	r3,r4,4041d44 <__muldf3+0x714>
 404183c:	00c00744 	movi	r3,29
 4041840:	15bffe04 	addi	r22,r2,-8
 4041844:	1907c83a 	sub	r3,r3,r4
 4041848:	85a0983a 	sll	r16,r16,r22
 404184c:	a8c6d83a 	srl	r3,r21,r3
 4041850:	adac983a 	sll	r22,r21,r22
 4041854:	1c20b03a 	or	r16,r3,r16
 4041858:	1080fcc4 	addi	r2,r2,1011
 404185c:	00a9c83a 	sub	r20,zero,r2
 4041860:	002b883a 	mov	r21,zero
 4041864:	000b883a 	mov	r5,zero
 4041868:	003f9006 	br	40416ac <__flash_rwdata_start+0xffffc51c>
 404186c:	3446b03a 	or	r3,r6,r17
 4041870:	1800281e 	bne	r3,zero,4041914 <__muldf3+0x2e4>
 4041874:	0023883a 	mov	r17,zero
 4041878:	0025883a 	mov	r18,zero
 404187c:	01c00084 	movi	r7,2
 4041880:	003f9c06 	br	40416f4 <__flash_rwdata_start+0xffffc564>
 4041884:	3446b03a 	or	r3,r6,r17
 4041888:	18001e26 	beq	r3,zero,4041904 <__muldf3+0x2d4>
 404188c:	88012126 	beq	r17,zero,4041d14 <__muldf3+0x6e4>
 4041890:	8809883a 	mov	r4,r17
 4041894:	d9400215 	stw	r5,8(sp)
 4041898:	d9800715 	stw	r6,28(sp)
 404189c:	da400415 	stw	r9,16(sp)
 40418a0:	da800315 	stw	r10,12(sp)
 40418a4:	40429280 	call	4042928 <__clzsi2>
 40418a8:	d9400217 	ldw	r5,8(sp)
 40418ac:	d9800717 	ldw	r6,28(sp)
 40418b0:	da400417 	ldw	r9,16(sp)
 40418b4:	da800317 	ldw	r10,12(sp)
 40418b8:	113ffd44 	addi	r4,r2,-11
 40418bc:	00c00704 	movi	r3,28
 40418c0:	19011016 	blt	r3,r4,4041d04 <__muldf3+0x6d4>
 40418c4:	00c00744 	movi	r3,29
 40418c8:	14bffe04 	addi	r18,r2,-8
 40418cc:	1907c83a 	sub	r3,r3,r4
 40418d0:	8ca2983a 	sll	r17,r17,r18
 40418d4:	30c6d83a 	srl	r3,r6,r3
 40418d8:	34a4983a 	sll	r18,r6,r18
 40418dc:	1c62b03a 	or	r17,r3,r17
 40418e0:	1080fcc4 	addi	r2,r2,1011
 40418e4:	0085c83a 	sub	r2,zero,r2
 40418e8:	000f883a 	mov	r7,zero
 40418ec:	003f8106 	br	40416f4 <__flash_rwdata_start+0xffffc564>
 40418f0:	3027883a 	mov	r19,r6
 40418f4:	0081ffc4 	movi	r2,2047
 40418f8:	0021883a 	mov	r16,zero
 40418fc:	002d883a 	mov	r22,zero
 4041900:	003faa06 	br	40417ac <__flash_rwdata_start+0xffffc61c>
 4041904:	0023883a 	mov	r17,zero
 4041908:	0025883a 	mov	r18,zero
 404190c:	01c00044 	movi	r7,1
 4041910:	003f7806 	br	40416f4 <__flash_rwdata_start+0xffffc564>
 4041914:	01c000c4 	movi	r7,3
 4041918:	003f7606 	br	40416f4 <__flash_rwdata_start+0xffffc564>
 404191c:	05400104 	movi	r21,4
 4041920:	0021883a 	mov	r16,zero
 4041924:	002d883a 	mov	r22,zero
 4041928:	01400044 	movi	r5,1
 404192c:	003f5f06 	br	40416ac <__flash_rwdata_start+0xffffc51c>
 4041930:	05400304 	movi	r21,12
 4041934:	014000c4 	movi	r5,3
 4041938:	003f5c06 	br	40416ac <__flash_rwdata_start+0xffffc51c>
 404193c:	04000434 	movhi	r16,16
 4041940:	0027883a 	mov	r19,zero
 4041944:	843fffc4 	addi	r16,r16,-1
 4041948:	05bfffc4 	movi	r22,-1
 404194c:	0081ffc4 	movi	r2,2047
 4041950:	003f9606 	br	40417ac <__flash_rwdata_start+0xffffc61c>
 4041954:	8023883a 	mov	r17,r16
 4041958:	b025883a 	mov	r18,r22
 404195c:	280f883a 	mov	r7,r5
 4041960:	003f8806 	br	4041784 <__flash_rwdata_start+0xffffc5f4>
 4041964:	8023883a 	mov	r17,r16
 4041968:	b025883a 	mov	r18,r22
 404196c:	480d883a 	mov	r6,r9
 4041970:	280f883a 	mov	r7,r5
 4041974:	003f8306 	br	4041784 <__flash_rwdata_start+0xffffc5f4>
 4041978:	b026d43a 	srli	r19,r22,16
 404197c:	902ed43a 	srli	r23,r18,16
 4041980:	b5bfffcc 	andi	r22,r22,65535
 4041984:	94bfffcc 	andi	r18,r18,65535
 4041988:	b00b883a 	mov	r5,r22
 404198c:	9009883a 	mov	r4,r18
 4041990:	d8c00515 	stw	r3,20(sp)
 4041994:	d9800715 	stw	r6,28(sp)
 4041998:	da000615 	stw	r8,24(sp)
 404199c:	404298c0 	call	404298c <__mulsi3>
 40419a0:	980b883a 	mov	r5,r19
 40419a4:	9009883a 	mov	r4,r18
 40419a8:	1029883a 	mov	r20,r2
 40419ac:	404298c0 	call	404298c <__mulsi3>
 40419b0:	b80b883a 	mov	r5,r23
 40419b4:	9809883a 	mov	r4,r19
 40419b8:	102b883a 	mov	r21,r2
 40419bc:	404298c0 	call	404298c <__mulsi3>
 40419c0:	b809883a 	mov	r4,r23
 40419c4:	b00b883a 	mov	r5,r22
 40419c8:	1039883a 	mov	fp,r2
 40419cc:	404298c0 	call	404298c <__mulsi3>
 40419d0:	a008d43a 	srli	r4,r20,16
 40419d4:	1545883a 	add	r2,r2,r21
 40419d8:	d8c00517 	ldw	r3,20(sp)
 40419dc:	2085883a 	add	r2,r4,r2
 40419e0:	d9800717 	ldw	r6,28(sp)
 40419e4:	da000617 	ldw	r8,24(sp)
 40419e8:	1540022e 	bgeu	r2,r21,40419f4 <__muldf3+0x3c4>
 40419ec:	01000074 	movhi	r4,1
 40419f0:	e139883a 	add	fp,fp,r4
 40419f4:	100e943a 	slli	r7,r2,16
 40419f8:	1004d43a 	srli	r2,r2,16
 40419fc:	882ad43a 	srli	r21,r17,16
 4041a00:	a53fffcc 	andi	r20,r20,65535
 4041a04:	8c7fffcc 	andi	r17,r17,65535
 4041a08:	3d29883a 	add	r20,r7,r20
 4041a0c:	b00b883a 	mov	r5,r22
 4041a10:	8809883a 	mov	r4,r17
 4041a14:	d8c00515 	stw	r3,20(sp)
 4041a18:	d9800715 	stw	r6,28(sp)
 4041a1c:	da000615 	stw	r8,24(sp)
 4041a20:	dd000115 	stw	r20,4(sp)
 4041a24:	d8800015 	stw	r2,0(sp)
 4041a28:	404298c0 	call	404298c <__mulsi3>
 4041a2c:	980b883a 	mov	r5,r19
 4041a30:	8809883a 	mov	r4,r17
 4041a34:	d8800215 	stw	r2,8(sp)
 4041a38:	404298c0 	call	404298c <__mulsi3>
 4041a3c:	9809883a 	mov	r4,r19
 4041a40:	a80b883a 	mov	r5,r21
 4041a44:	1029883a 	mov	r20,r2
 4041a48:	404298c0 	call	404298c <__mulsi3>
 4041a4c:	b00b883a 	mov	r5,r22
 4041a50:	a809883a 	mov	r4,r21
 4041a54:	d8800415 	stw	r2,16(sp)
 4041a58:	404298c0 	call	404298c <__mulsi3>
 4041a5c:	d9c00217 	ldw	r7,8(sp)
 4041a60:	1505883a 	add	r2,r2,r20
 4041a64:	d8c00517 	ldw	r3,20(sp)
 4041a68:	3826d43a 	srli	r19,r7,16
 4041a6c:	d9800717 	ldw	r6,28(sp)
 4041a70:	da000617 	ldw	r8,24(sp)
 4041a74:	9885883a 	add	r2,r19,r2
 4041a78:	da400417 	ldw	r9,16(sp)
 4041a7c:	1500022e 	bgeu	r2,r20,4041a88 <__muldf3+0x458>
 4041a80:	01000074 	movhi	r4,1
 4041a84:	4913883a 	add	r9,r9,r4
 4041a88:	1028d43a 	srli	r20,r2,16
 4041a8c:	1004943a 	slli	r2,r2,16
 4041a90:	802cd43a 	srli	r22,r16,16
 4041a94:	843fffcc 	andi	r16,r16,65535
 4041a98:	3cffffcc 	andi	r19,r7,65535
 4041a9c:	9009883a 	mov	r4,r18
 4041aa0:	800b883a 	mov	r5,r16
 4041aa4:	a269883a 	add	r20,r20,r9
 4041aa8:	d8c00515 	stw	r3,20(sp)
 4041aac:	d9800715 	stw	r6,28(sp)
 4041ab0:	da000615 	stw	r8,24(sp)
 4041ab4:	14e7883a 	add	r19,r2,r19
 4041ab8:	404298c0 	call	404298c <__mulsi3>
 4041abc:	9009883a 	mov	r4,r18
 4041ac0:	b00b883a 	mov	r5,r22
 4041ac4:	d8800315 	stw	r2,12(sp)
 4041ac8:	404298c0 	call	404298c <__mulsi3>
 4041acc:	b809883a 	mov	r4,r23
 4041ad0:	b00b883a 	mov	r5,r22
 4041ad4:	d8800215 	stw	r2,8(sp)
 4041ad8:	404298c0 	call	404298c <__mulsi3>
 4041adc:	b80b883a 	mov	r5,r23
 4041ae0:	8009883a 	mov	r4,r16
 4041ae4:	d8800415 	stw	r2,16(sp)
 4041ae8:	404298c0 	call	404298c <__mulsi3>
 4041aec:	da800317 	ldw	r10,12(sp)
 4041af0:	d9c00217 	ldw	r7,8(sp)
 4041af4:	d9000017 	ldw	r4,0(sp)
 4041af8:	502ed43a 	srli	r23,r10,16
 4041afc:	11c5883a 	add	r2,r2,r7
 4041b00:	24e5883a 	add	r18,r4,r19
 4041b04:	b885883a 	add	r2,r23,r2
 4041b08:	d8c00517 	ldw	r3,20(sp)
 4041b0c:	d9800717 	ldw	r6,28(sp)
 4041b10:	da000617 	ldw	r8,24(sp)
 4041b14:	da400417 	ldw	r9,16(sp)
 4041b18:	11c0022e 	bgeu	r2,r7,4041b24 <__muldf3+0x4f4>
 4041b1c:	01000074 	movhi	r4,1
 4041b20:	4913883a 	add	r9,r9,r4
 4041b24:	100ed43a 	srli	r7,r2,16
 4041b28:	1004943a 	slli	r2,r2,16
 4041b2c:	55ffffcc 	andi	r23,r10,65535
 4041b30:	3a53883a 	add	r9,r7,r9
 4041b34:	8809883a 	mov	r4,r17
 4041b38:	800b883a 	mov	r5,r16
 4041b3c:	d8c00515 	stw	r3,20(sp)
 4041b40:	d9800715 	stw	r6,28(sp)
 4041b44:	da000615 	stw	r8,24(sp)
 4041b48:	da400415 	stw	r9,16(sp)
 4041b4c:	15ef883a 	add	r23,r2,r23
 4041b50:	404298c0 	call	404298c <__mulsi3>
 4041b54:	8809883a 	mov	r4,r17
 4041b58:	b00b883a 	mov	r5,r22
 4041b5c:	d8800215 	stw	r2,8(sp)
 4041b60:	404298c0 	call	404298c <__mulsi3>
 4041b64:	b00b883a 	mov	r5,r22
 4041b68:	a809883a 	mov	r4,r21
 4041b6c:	d8800315 	stw	r2,12(sp)
 4041b70:	404298c0 	call	404298c <__mulsi3>
 4041b74:	8009883a 	mov	r4,r16
 4041b78:	a80b883a 	mov	r5,r21
 4041b7c:	1023883a 	mov	r17,r2
 4041b80:	404298c0 	call	404298c <__mulsi3>
 4041b84:	d9c00217 	ldw	r7,8(sp)
 4041b88:	da800317 	ldw	r10,12(sp)
 4041b8c:	d8c00517 	ldw	r3,20(sp)
 4041b90:	3808d43a 	srli	r4,r7,16
 4041b94:	1285883a 	add	r2,r2,r10
 4041b98:	d9800717 	ldw	r6,28(sp)
 4041b9c:	2085883a 	add	r2,r4,r2
 4041ba0:	da000617 	ldw	r8,24(sp)
 4041ba4:	da400417 	ldw	r9,16(sp)
 4041ba8:	1280022e 	bgeu	r2,r10,4041bb4 <__muldf3+0x584>
 4041bac:	01000074 	movhi	r4,1
 4041bb0:	8923883a 	add	r17,r17,r4
 4041bb4:	1008943a 	slli	r4,r2,16
 4041bb8:	39ffffcc 	andi	r7,r7,65535
 4041bbc:	e4b9883a 	add	fp,fp,r18
 4041bc0:	21cf883a 	add	r7,r4,r7
 4041bc4:	e4e7803a 	cmpltu	r19,fp,r19
 4041bc8:	3d0f883a 	add	r7,r7,r20
 4041bcc:	bf39883a 	add	fp,r23,fp
 4041bd0:	99c9883a 	add	r4,r19,r7
 4041bd4:	e5ef803a 	cmpltu	r23,fp,r23
 4041bd8:	490b883a 	add	r5,r9,r4
 4041bdc:	1004d43a 	srli	r2,r2,16
 4041be0:	b965883a 	add	r18,r23,r5
 4041be4:	24c9803a 	cmpltu	r4,r4,r19
 4041be8:	3d29803a 	cmpltu	r20,r7,r20
 4041bec:	a128b03a 	or	r20,r20,r4
 4041bf0:	95ef803a 	cmpltu	r23,r18,r23
 4041bf4:	2a53803a 	cmpltu	r9,r5,r9
 4041bf8:	a0a9883a 	add	r20,r20,r2
 4041bfc:	4deeb03a 	or	r23,r9,r23
 4041c00:	a5ef883a 	add	r23,r20,r23
 4041c04:	bc63883a 	add	r17,r23,r17
 4041c08:	e004927a 	slli	r2,fp,9
 4041c0c:	d9000117 	ldw	r4,4(sp)
 4041c10:	882e927a 	slli	r23,r17,9
 4041c14:	9022d5fa 	srli	r17,r18,23
 4041c18:	e038d5fa 	srli	fp,fp,23
 4041c1c:	1104b03a 	or	r2,r2,r4
 4041c20:	9024927a 	slli	r18,r18,9
 4041c24:	1004c03a 	cmpne	r2,r2,zero
 4041c28:	bc62b03a 	or	r17,r23,r17
 4041c2c:	1738b03a 	or	fp,r2,fp
 4041c30:	8880402c 	andhi	r2,r17,256
 4041c34:	e4a4b03a 	or	r18,fp,r18
 4041c38:	10000726 	beq	r2,zero,4041c58 <__muldf3+0x628>
 4041c3c:	9006d07a 	srli	r3,r18,1
 4041c40:	880497fa 	slli	r2,r17,31
 4041c44:	9480004c 	andi	r18,r18,1
 4041c48:	8822d07a 	srli	r17,r17,1
 4041c4c:	1ca4b03a 	or	r18,r3,r18
 4041c50:	14a4b03a 	or	r18,r2,r18
 4041c54:	4007883a 	mov	r3,r8
 4041c58:	1880ffc4 	addi	r2,r3,1023
 4041c5c:	0080460e 	bge	zero,r2,4041d78 <__muldf3+0x748>
 4041c60:	910001cc 	andi	r4,r18,7
 4041c64:	20000726 	beq	r4,zero,4041c84 <__muldf3+0x654>
 4041c68:	910003cc 	andi	r4,r18,15
 4041c6c:	01400104 	movi	r5,4
 4041c70:	21400426 	beq	r4,r5,4041c84 <__muldf3+0x654>
 4041c74:	9149883a 	add	r4,r18,r5
 4041c78:	24a5803a 	cmpltu	r18,r4,r18
 4041c7c:	8ca3883a 	add	r17,r17,r18
 4041c80:	2025883a 	mov	r18,r4
 4041c84:	8900402c 	andhi	r4,r17,256
 4041c88:	20000426 	beq	r4,zero,4041c9c <__muldf3+0x66c>
 4041c8c:	18810004 	addi	r2,r3,1024
 4041c90:	00ffc034 	movhi	r3,65280
 4041c94:	18ffffc4 	addi	r3,r3,-1
 4041c98:	88e2703a 	and	r17,r17,r3
 4041c9c:	00c1ff84 	movi	r3,2046
 4041ca0:	18bf1316 	blt	r3,r2,40418f0 <__flash_rwdata_start+0xffffc760>
 4041ca4:	882c977a 	slli	r22,r17,29
 4041ca8:	9024d0fa 	srli	r18,r18,3
 4041cac:	8822927a 	slli	r17,r17,9
 4041cb0:	1081ffcc 	andi	r2,r2,2047
 4041cb4:	b4acb03a 	or	r22,r22,r18
 4041cb8:	8820d33a 	srli	r16,r17,12
 4041cbc:	3027883a 	mov	r19,r6
 4041cc0:	003eba06 	br	40417ac <__flash_rwdata_start+0xffffc61c>
 4041cc4:	8080022c 	andhi	r2,r16,8
 4041cc8:	10000926 	beq	r2,zero,4041cf0 <__muldf3+0x6c0>
 4041ccc:	8880022c 	andhi	r2,r17,8
 4041cd0:	1000071e 	bne	r2,zero,4041cf0 <__muldf3+0x6c0>
 4041cd4:	00800434 	movhi	r2,16
 4041cd8:	8c000234 	orhi	r16,r17,8
 4041cdc:	10bfffc4 	addi	r2,r2,-1
 4041ce0:	e027883a 	mov	r19,fp
 4041ce4:	80a0703a 	and	r16,r16,r2
 4041ce8:	902d883a 	mov	r22,r18
 4041cec:	003f1706 	br	404194c <__flash_rwdata_start+0xffffc7bc>
 4041cf0:	00800434 	movhi	r2,16
 4041cf4:	84000234 	orhi	r16,r16,8
 4041cf8:	10bfffc4 	addi	r2,r2,-1
 4041cfc:	80a0703a 	and	r16,r16,r2
 4041d00:	003f1206 	br	404194c <__flash_rwdata_start+0xffffc7bc>
 4041d04:	147ff604 	addi	r17,r2,-40
 4041d08:	3462983a 	sll	r17,r6,r17
 4041d0c:	0025883a 	mov	r18,zero
 4041d10:	003ef306 	br	40418e0 <__flash_rwdata_start+0xffffc750>
 4041d14:	3009883a 	mov	r4,r6
 4041d18:	d9400215 	stw	r5,8(sp)
 4041d1c:	d9800715 	stw	r6,28(sp)
 4041d20:	da400415 	stw	r9,16(sp)
 4041d24:	da800315 	stw	r10,12(sp)
 4041d28:	40429280 	call	4042928 <__clzsi2>
 4041d2c:	10800804 	addi	r2,r2,32
 4041d30:	da800317 	ldw	r10,12(sp)
 4041d34:	da400417 	ldw	r9,16(sp)
 4041d38:	d9800717 	ldw	r6,28(sp)
 4041d3c:	d9400217 	ldw	r5,8(sp)
 4041d40:	003edd06 	br	40418b8 <__flash_rwdata_start+0xffffc728>
 4041d44:	143ff604 	addi	r16,r2,-40
 4041d48:	ac20983a 	sll	r16,r21,r16
 4041d4c:	002d883a 	mov	r22,zero
 4041d50:	003ec106 	br	4041858 <__flash_rwdata_start+0xffffc6c8>
 4041d54:	d9800715 	stw	r6,28(sp)
 4041d58:	d9c00215 	stw	r7,8(sp)
 4041d5c:	da400415 	stw	r9,16(sp)
 4041d60:	40429280 	call	4042928 <__clzsi2>
 4041d64:	10800804 	addi	r2,r2,32
 4041d68:	da400417 	ldw	r9,16(sp)
 4041d6c:	d9c00217 	ldw	r7,8(sp)
 4041d70:	d9800717 	ldw	r6,28(sp)
 4041d74:	003eae06 	br	4041830 <__flash_rwdata_start+0xffffc6a0>
 4041d78:	00c00044 	movi	r3,1
 4041d7c:	1887c83a 	sub	r3,r3,r2
 4041d80:	01000e04 	movi	r4,56
 4041d84:	20fe8516 	blt	r4,r3,404179c <__flash_rwdata_start+0xffffc60c>
 4041d88:	010007c4 	movi	r4,31
 4041d8c:	20c01b16 	blt	r4,r3,4041dfc <__muldf3+0x7cc>
 4041d90:	00800804 	movi	r2,32
 4041d94:	10c5c83a 	sub	r2,r2,r3
 4041d98:	888a983a 	sll	r5,r17,r2
 4041d9c:	90c8d83a 	srl	r4,r18,r3
 4041da0:	9084983a 	sll	r2,r18,r2
 4041da4:	88e2d83a 	srl	r17,r17,r3
 4041da8:	2906b03a 	or	r3,r5,r4
 4041dac:	1004c03a 	cmpne	r2,r2,zero
 4041db0:	1886b03a 	or	r3,r3,r2
 4041db4:	188001cc 	andi	r2,r3,7
 4041db8:	10000726 	beq	r2,zero,4041dd8 <__muldf3+0x7a8>
 4041dbc:	188003cc 	andi	r2,r3,15
 4041dc0:	01000104 	movi	r4,4
 4041dc4:	11000426 	beq	r2,r4,4041dd8 <__muldf3+0x7a8>
 4041dc8:	1805883a 	mov	r2,r3
 4041dcc:	10c00104 	addi	r3,r2,4
 4041dd0:	1885803a 	cmpltu	r2,r3,r2
 4041dd4:	88a3883a 	add	r17,r17,r2
 4041dd8:	8880202c 	andhi	r2,r17,128
 4041ddc:	10001c26 	beq	r2,zero,4041e50 <__muldf3+0x820>
 4041de0:	3027883a 	mov	r19,r6
 4041de4:	00800044 	movi	r2,1
 4041de8:	0021883a 	mov	r16,zero
 4041dec:	002d883a 	mov	r22,zero
 4041df0:	003e6e06 	br	40417ac <__flash_rwdata_start+0xffffc61c>
 4041df4:	4007883a 	mov	r3,r8
 4041df8:	003f9706 	br	4041c58 <__flash_rwdata_start+0xffffcac8>
 4041dfc:	017ff844 	movi	r5,-31
 4041e00:	2885c83a 	sub	r2,r5,r2
 4041e04:	888ad83a 	srl	r5,r17,r2
 4041e08:	00800804 	movi	r2,32
 4041e0c:	18801a26 	beq	r3,r2,4041e78 <__muldf3+0x848>
 4041e10:	01001004 	movi	r4,64
 4041e14:	20c7c83a 	sub	r3,r4,r3
 4041e18:	88e2983a 	sll	r17,r17,r3
 4041e1c:	8ca4b03a 	or	r18,r17,r18
 4041e20:	9004c03a 	cmpne	r2,r18,zero
 4041e24:	2884b03a 	or	r2,r5,r2
 4041e28:	144001cc 	andi	r17,r2,7
 4041e2c:	88000d1e 	bne	r17,zero,4041e64 <__muldf3+0x834>
 4041e30:	0021883a 	mov	r16,zero
 4041e34:	102cd0fa 	srli	r22,r2,3
 4041e38:	3027883a 	mov	r19,r6
 4041e3c:	0005883a 	mov	r2,zero
 4041e40:	b46cb03a 	or	r22,r22,r17
 4041e44:	003e5906 	br	40417ac <__flash_rwdata_start+0xffffc61c>
 4041e48:	1007883a 	mov	r3,r2
 4041e4c:	0023883a 	mov	r17,zero
 4041e50:	8820927a 	slli	r16,r17,9
 4041e54:	1805883a 	mov	r2,r3
 4041e58:	8822977a 	slli	r17,r17,29
 4041e5c:	8020d33a 	srli	r16,r16,12
 4041e60:	003ff406 	br	4041e34 <__flash_rwdata_start+0xffffcca4>
 4041e64:	10c003cc 	andi	r3,r2,15
 4041e68:	01000104 	movi	r4,4
 4041e6c:	193ff626 	beq	r3,r4,4041e48 <__flash_rwdata_start+0xffffccb8>
 4041e70:	0023883a 	mov	r17,zero
 4041e74:	003fd506 	br	4041dcc <__flash_rwdata_start+0xffffcc3c>
 4041e78:	0023883a 	mov	r17,zero
 4041e7c:	003fe706 	br	4041e1c <__flash_rwdata_start+0xffffcc8c>
 4041e80:	00800434 	movhi	r2,16
 4041e84:	8c000234 	orhi	r16,r17,8
 4041e88:	10bfffc4 	addi	r2,r2,-1
 4041e8c:	3027883a 	mov	r19,r6
 4041e90:	80a0703a 	and	r16,r16,r2
 4041e94:	902d883a 	mov	r22,r18
 4041e98:	003eac06 	br	404194c <__flash_rwdata_start+0xffffc7bc>

04041e9c <__subdf3>:
 4041e9c:	02000434 	movhi	r8,16
 4041ea0:	423fffc4 	addi	r8,r8,-1
 4041ea4:	defffb04 	addi	sp,sp,-20
 4041ea8:	2a14703a 	and	r10,r5,r8
 4041eac:	3812d53a 	srli	r9,r7,20
 4041eb0:	3a10703a 	and	r8,r7,r8
 4041eb4:	2006d77a 	srli	r3,r4,29
 4041eb8:	3004d77a 	srli	r2,r6,29
 4041ebc:	dc000015 	stw	r16,0(sp)
 4041ec0:	501490fa 	slli	r10,r10,3
 4041ec4:	2820d53a 	srli	r16,r5,20
 4041ec8:	401090fa 	slli	r8,r8,3
 4041ecc:	dc800215 	stw	r18,8(sp)
 4041ed0:	dc400115 	stw	r17,4(sp)
 4041ed4:	dfc00415 	stw	ra,16(sp)
 4041ed8:	202290fa 	slli	r17,r4,3
 4041edc:	dcc00315 	stw	r19,12(sp)
 4041ee0:	4a41ffcc 	andi	r9,r9,2047
 4041ee4:	0101ffc4 	movi	r4,2047
 4041ee8:	2824d7fa 	srli	r18,r5,31
 4041eec:	8401ffcc 	andi	r16,r16,2047
 4041ef0:	50c6b03a 	or	r3,r10,r3
 4041ef4:	380ed7fa 	srli	r7,r7,31
 4041ef8:	408ab03a 	or	r5,r8,r2
 4041efc:	300c90fa 	slli	r6,r6,3
 4041f00:	49009626 	beq	r9,r4,404215c <__subdf3+0x2c0>
 4041f04:	39c0005c 	xori	r7,r7,1
 4041f08:	8245c83a 	sub	r2,r16,r9
 4041f0c:	3c807426 	beq	r7,r18,40420e0 <__subdf3+0x244>
 4041f10:	0080af0e 	bge	zero,r2,40421d0 <__subdf3+0x334>
 4041f14:	48002a1e 	bne	r9,zero,4041fc0 <__subdf3+0x124>
 4041f18:	2988b03a 	or	r4,r5,r6
 4041f1c:	20009a1e 	bne	r4,zero,4042188 <__subdf3+0x2ec>
 4041f20:	888001cc 	andi	r2,r17,7
 4041f24:	10000726 	beq	r2,zero,4041f44 <__subdf3+0xa8>
 4041f28:	888003cc 	andi	r2,r17,15
 4041f2c:	01000104 	movi	r4,4
 4041f30:	11000426 	beq	r2,r4,4041f44 <__subdf3+0xa8>
 4041f34:	890b883a 	add	r5,r17,r4
 4041f38:	2c63803a 	cmpltu	r17,r5,r17
 4041f3c:	1c47883a 	add	r3,r3,r17
 4041f40:	2823883a 	mov	r17,r5
 4041f44:	1880202c 	andhi	r2,r3,128
 4041f48:	10005926 	beq	r2,zero,40420b0 <__subdf3+0x214>
 4041f4c:	84000044 	addi	r16,r16,1
 4041f50:	0081ffc4 	movi	r2,2047
 4041f54:	8080be26 	beq	r16,r2,4042250 <__subdf3+0x3b4>
 4041f58:	017fe034 	movhi	r5,65408
 4041f5c:	297fffc4 	addi	r5,r5,-1
 4041f60:	1946703a 	and	r3,r3,r5
 4041f64:	1804977a 	slli	r2,r3,29
 4041f68:	1806927a 	slli	r3,r3,9
 4041f6c:	8822d0fa 	srli	r17,r17,3
 4041f70:	8401ffcc 	andi	r16,r16,2047
 4041f74:	180ad33a 	srli	r5,r3,12
 4041f78:	9100004c 	andi	r4,r18,1
 4041f7c:	1444b03a 	or	r2,r2,r17
 4041f80:	80c1ffcc 	andi	r3,r16,2047
 4041f84:	1820953a 	slli	r16,r3,20
 4041f88:	20c03fcc 	andi	r3,r4,255
 4041f8c:	180897fa 	slli	r4,r3,31
 4041f90:	00c00434 	movhi	r3,16
 4041f94:	18ffffc4 	addi	r3,r3,-1
 4041f98:	28c6703a 	and	r3,r5,r3
 4041f9c:	1c06b03a 	or	r3,r3,r16
 4041fa0:	1906b03a 	or	r3,r3,r4
 4041fa4:	dfc00417 	ldw	ra,16(sp)
 4041fa8:	dcc00317 	ldw	r19,12(sp)
 4041fac:	dc800217 	ldw	r18,8(sp)
 4041fb0:	dc400117 	ldw	r17,4(sp)
 4041fb4:	dc000017 	ldw	r16,0(sp)
 4041fb8:	dec00504 	addi	sp,sp,20
 4041fbc:	f800283a 	ret
 4041fc0:	0101ffc4 	movi	r4,2047
 4041fc4:	813fd626 	beq	r16,r4,4041f20 <__flash_rwdata_start+0xffffcd90>
 4041fc8:	29402034 	orhi	r5,r5,128
 4041fcc:	01000e04 	movi	r4,56
 4041fd0:	2080a316 	blt	r4,r2,4042260 <__subdf3+0x3c4>
 4041fd4:	010007c4 	movi	r4,31
 4041fd8:	2080c616 	blt	r4,r2,40422f4 <__subdf3+0x458>
 4041fdc:	01000804 	movi	r4,32
 4041fe0:	2089c83a 	sub	r4,r4,r2
 4041fe4:	2910983a 	sll	r8,r5,r4
 4041fe8:	308ed83a 	srl	r7,r6,r2
 4041fec:	3108983a 	sll	r4,r6,r4
 4041ff0:	2884d83a 	srl	r2,r5,r2
 4041ff4:	41ccb03a 	or	r6,r8,r7
 4041ff8:	2008c03a 	cmpne	r4,r4,zero
 4041ffc:	310cb03a 	or	r6,r6,r4
 4042000:	898dc83a 	sub	r6,r17,r6
 4042004:	89a3803a 	cmpltu	r17,r17,r6
 4042008:	1887c83a 	sub	r3,r3,r2
 404200c:	1c47c83a 	sub	r3,r3,r17
 4042010:	3023883a 	mov	r17,r6
 4042014:	1880202c 	andhi	r2,r3,128
 4042018:	10002326 	beq	r2,zero,40420a8 <__subdf3+0x20c>
 404201c:	04c02034 	movhi	r19,128
 4042020:	9cffffc4 	addi	r19,r19,-1
 4042024:	1ce6703a 	and	r19,r3,r19
 4042028:	98007a26 	beq	r19,zero,4042214 <__subdf3+0x378>
 404202c:	9809883a 	mov	r4,r19
 4042030:	40429280 	call	4042928 <__clzsi2>
 4042034:	113ffe04 	addi	r4,r2,-8
 4042038:	00c007c4 	movi	r3,31
 404203c:	19007b16 	blt	r3,r4,404222c <__subdf3+0x390>
 4042040:	00800804 	movi	r2,32
 4042044:	1105c83a 	sub	r2,r2,r4
 4042048:	8884d83a 	srl	r2,r17,r2
 404204c:	9906983a 	sll	r3,r19,r4
 4042050:	8922983a 	sll	r17,r17,r4
 4042054:	10c4b03a 	or	r2,r2,r3
 4042058:	24007816 	blt	r4,r16,404223c <__subdf3+0x3a0>
 404205c:	2421c83a 	sub	r16,r4,r16
 4042060:	80c00044 	addi	r3,r16,1
 4042064:	010007c4 	movi	r4,31
 4042068:	20c09516 	blt	r4,r3,40422c0 <__subdf3+0x424>
 404206c:	01400804 	movi	r5,32
 4042070:	28cbc83a 	sub	r5,r5,r3
 4042074:	88c8d83a 	srl	r4,r17,r3
 4042078:	8962983a 	sll	r17,r17,r5
 404207c:	114a983a 	sll	r5,r2,r5
 4042080:	10c6d83a 	srl	r3,r2,r3
 4042084:	8804c03a 	cmpne	r2,r17,zero
 4042088:	290ab03a 	or	r5,r5,r4
 404208c:	28a2b03a 	or	r17,r5,r2
 4042090:	0021883a 	mov	r16,zero
 4042094:	003fa206 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042098:	2090b03a 	or	r8,r4,r2
 404209c:	40018e26 	beq	r8,zero,40426d8 <__subdf3+0x83c>
 40420a0:	1007883a 	mov	r3,r2
 40420a4:	2023883a 	mov	r17,r4
 40420a8:	888001cc 	andi	r2,r17,7
 40420ac:	103f9e1e 	bne	r2,zero,4041f28 <__flash_rwdata_start+0xffffcd98>
 40420b0:	1804977a 	slli	r2,r3,29
 40420b4:	8822d0fa 	srli	r17,r17,3
 40420b8:	1810d0fa 	srli	r8,r3,3
 40420bc:	9100004c 	andi	r4,r18,1
 40420c0:	1444b03a 	or	r2,r2,r17
 40420c4:	00c1ffc4 	movi	r3,2047
 40420c8:	80c02826 	beq	r16,r3,404216c <__subdf3+0x2d0>
 40420cc:	01400434 	movhi	r5,16
 40420d0:	297fffc4 	addi	r5,r5,-1
 40420d4:	80e0703a 	and	r16,r16,r3
 40420d8:	414a703a 	and	r5,r8,r5
 40420dc:	003fa806 	br	4041f80 <__flash_rwdata_start+0xffffcdf0>
 40420e0:	0080630e 	bge	zero,r2,4042270 <__subdf3+0x3d4>
 40420e4:	48003026 	beq	r9,zero,40421a8 <__subdf3+0x30c>
 40420e8:	0101ffc4 	movi	r4,2047
 40420ec:	813f8c26 	beq	r16,r4,4041f20 <__flash_rwdata_start+0xffffcd90>
 40420f0:	29402034 	orhi	r5,r5,128
 40420f4:	01000e04 	movi	r4,56
 40420f8:	2080a90e 	bge	r4,r2,40423a0 <__subdf3+0x504>
 40420fc:	298cb03a 	or	r6,r5,r6
 4042100:	3012c03a 	cmpne	r9,r6,zero
 4042104:	0005883a 	mov	r2,zero
 4042108:	4c53883a 	add	r9,r9,r17
 404210c:	4c63803a 	cmpltu	r17,r9,r17
 4042110:	10c7883a 	add	r3,r2,r3
 4042114:	88c7883a 	add	r3,r17,r3
 4042118:	4823883a 	mov	r17,r9
 404211c:	1880202c 	andhi	r2,r3,128
 4042120:	1000d026 	beq	r2,zero,4042464 <__subdf3+0x5c8>
 4042124:	84000044 	addi	r16,r16,1
 4042128:	0081ffc4 	movi	r2,2047
 404212c:	8080fe26 	beq	r16,r2,4042528 <__subdf3+0x68c>
 4042130:	00bfe034 	movhi	r2,65408
 4042134:	10bfffc4 	addi	r2,r2,-1
 4042138:	1886703a 	and	r3,r3,r2
 404213c:	880ad07a 	srli	r5,r17,1
 4042140:	180497fa 	slli	r2,r3,31
 4042144:	8900004c 	andi	r4,r17,1
 4042148:	2922b03a 	or	r17,r5,r4
 404214c:	1806d07a 	srli	r3,r3,1
 4042150:	1462b03a 	or	r17,r2,r17
 4042154:	3825883a 	mov	r18,r7
 4042158:	003f7106 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 404215c:	2984b03a 	or	r2,r5,r6
 4042160:	103f6826 	beq	r2,zero,4041f04 <__flash_rwdata_start+0xffffcd74>
 4042164:	39c03fcc 	andi	r7,r7,255
 4042168:	003f6706 	br	4041f08 <__flash_rwdata_start+0xffffcd78>
 404216c:	4086b03a 	or	r3,r8,r2
 4042170:	18015226 	beq	r3,zero,40426bc <__subdf3+0x820>
 4042174:	00c00434 	movhi	r3,16
 4042178:	41400234 	orhi	r5,r8,8
 404217c:	18ffffc4 	addi	r3,r3,-1
 4042180:	28ca703a 	and	r5,r5,r3
 4042184:	003f7e06 	br	4041f80 <__flash_rwdata_start+0xffffcdf0>
 4042188:	10bfffc4 	addi	r2,r2,-1
 404218c:	1000491e 	bne	r2,zero,40422b4 <__subdf3+0x418>
 4042190:	898fc83a 	sub	r7,r17,r6
 4042194:	89e3803a 	cmpltu	r17,r17,r7
 4042198:	1947c83a 	sub	r3,r3,r5
 404219c:	1c47c83a 	sub	r3,r3,r17
 40421a0:	3823883a 	mov	r17,r7
 40421a4:	003f9b06 	br	4042014 <__flash_rwdata_start+0xffffce84>
 40421a8:	2988b03a 	or	r4,r5,r6
 40421ac:	203f5c26 	beq	r4,zero,4041f20 <__flash_rwdata_start+0xffffcd90>
 40421b0:	10bfffc4 	addi	r2,r2,-1
 40421b4:	1000931e 	bne	r2,zero,4042404 <__subdf3+0x568>
 40421b8:	898d883a 	add	r6,r17,r6
 40421bc:	3463803a 	cmpltu	r17,r6,r17
 40421c0:	1947883a 	add	r3,r3,r5
 40421c4:	88c7883a 	add	r3,r17,r3
 40421c8:	3023883a 	mov	r17,r6
 40421cc:	003fd306 	br	404211c <__flash_rwdata_start+0xffffcf8c>
 40421d0:	1000541e 	bne	r2,zero,4042324 <__subdf3+0x488>
 40421d4:	80800044 	addi	r2,r16,1
 40421d8:	1081ffcc 	andi	r2,r2,2047
 40421dc:	01000044 	movi	r4,1
 40421e0:	2080a20e 	bge	r4,r2,404246c <__subdf3+0x5d0>
 40421e4:	8989c83a 	sub	r4,r17,r6
 40421e8:	8905803a 	cmpltu	r2,r17,r4
 40421ec:	1967c83a 	sub	r19,r3,r5
 40421f0:	98a7c83a 	sub	r19,r19,r2
 40421f4:	9880202c 	andhi	r2,r19,128
 40421f8:	10006326 	beq	r2,zero,4042388 <__subdf3+0x4ec>
 40421fc:	3463c83a 	sub	r17,r6,r17
 4042200:	28c7c83a 	sub	r3,r5,r3
 4042204:	344d803a 	cmpltu	r6,r6,r17
 4042208:	19a7c83a 	sub	r19,r3,r6
 404220c:	3825883a 	mov	r18,r7
 4042210:	983f861e 	bne	r19,zero,404202c <__flash_rwdata_start+0xffffce9c>
 4042214:	8809883a 	mov	r4,r17
 4042218:	40429280 	call	4042928 <__clzsi2>
 404221c:	10800804 	addi	r2,r2,32
 4042220:	113ffe04 	addi	r4,r2,-8
 4042224:	00c007c4 	movi	r3,31
 4042228:	193f850e 	bge	r3,r4,4042040 <__flash_rwdata_start+0xffffceb0>
 404222c:	10bff604 	addi	r2,r2,-40
 4042230:	8884983a 	sll	r2,r17,r2
 4042234:	0023883a 	mov	r17,zero
 4042238:	243f880e 	bge	r4,r16,404205c <__flash_rwdata_start+0xffffcecc>
 404223c:	00ffe034 	movhi	r3,65408
 4042240:	18ffffc4 	addi	r3,r3,-1
 4042244:	8121c83a 	sub	r16,r16,r4
 4042248:	10c6703a 	and	r3,r2,r3
 404224c:	003f3406 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042250:	9100004c 	andi	r4,r18,1
 4042254:	000b883a 	mov	r5,zero
 4042258:	0005883a 	mov	r2,zero
 404225c:	003f4806 	br	4041f80 <__flash_rwdata_start+0xffffcdf0>
 4042260:	298cb03a 	or	r6,r5,r6
 4042264:	300cc03a 	cmpne	r6,r6,zero
 4042268:	0005883a 	mov	r2,zero
 404226c:	003f6406 	br	4042000 <__flash_rwdata_start+0xffffce70>
 4042270:	10009a1e 	bne	r2,zero,40424dc <__subdf3+0x640>
 4042274:	82400044 	addi	r9,r16,1
 4042278:	4881ffcc 	andi	r2,r9,2047
 404227c:	02800044 	movi	r10,1
 4042280:	5080670e 	bge	r10,r2,4042420 <__subdf3+0x584>
 4042284:	0081ffc4 	movi	r2,2047
 4042288:	4880af26 	beq	r9,r2,4042548 <__subdf3+0x6ac>
 404228c:	898d883a 	add	r6,r17,r6
 4042290:	1945883a 	add	r2,r3,r5
 4042294:	3447803a 	cmpltu	r3,r6,r17
 4042298:	1887883a 	add	r3,r3,r2
 404229c:	182297fa 	slli	r17,r3,31
 40422a0:	300cd07a 	srli	r6,r6,1
 40422a4:	1806d07a 	srli	r3,r3,1
 40422a8:	4821883a 	mov	r16,r9
 40422ac:	89a2b03a 	or	r17,r17,r6
 40422b0:	003f1b06 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 40422b4:	0101ffc4 	movi	r4,2047
 40422b8:	813f441e 	bne	r16,r4,4041fcc <__flash_rwdata_start+0xffffce3c>
 40422bc:	003f1806 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 40422c0:	843ff844 	addi	r16,r16,-31
 40422c4:	01400804 	movi	r5,32
 40422c8:	1408d83a 	srl	r4,r2,r16
 40422cc:	19405026 	beq	r3,r5,4042410 <__subdf3+0x574>
 40422d0:	01401004 	movi	r5,64
 40422d4:	28c7c83a 	sub	r3,r5,r3
 40422d8:	10c4983a 	sll	r2,r2,r3
 40422dc:	88a2b03a 	or	r17,r17,r2
 40422e0:	8822c03a 	cmpne	r17,r17,zero
 40422e4:	2462b03a 	or	r17,r4,r17
 40422e8:	0007883a 	mov	r3,zero
 40422ec:	0021883a 	mov	r16,zero
 40422f0:	003f6d06 	br	40420a8 <__flash_rwdata_start+0xffffcf18>
 40422f4:	11fff804 	addi	r7,r2,-32
 40422f8:	01000804 	movi	r4,32
 40422fc:	29ced83a 	srl	r7,r5,r7
 4042300:	11004526 	beq	r2,r4,4042418 <__subdf3+0x57c>
 4042304:	01001004 	movi	r4,64
 4042308:	2089c83a 	sub	r4,r4,r2
 404230c:	2904983a 	sll	r2,r5,r4
 4042310:	118cb03a 	or	r6,r2,r6
 4042314:	300cc03a 	cmpne	r6,r6,zero
 4042318:	398cb03a 	or	r6,r7,r6
 404231c:	0005883a 	mov	r2,zero
 4042320:	003f3706 	br	4042000 <__flash_rwdata_start+0xffffce70>
 4042324:	80002a26 	beq	r16,zero,40423d0 <__subdf3+0x534>
 4042328:	0101ffc4 	movi	r4,2047
 404232c:	49006626 	beq	r9,r4,40424c8 <__subdf3+0x62c>
 4042330:	0085c83a 	sub	r2,zero,r2
 4042334:	18c02034 	orhi	r3,r3,128
 4042338:	01000e04 	movi	r4,56
 404233c:	20807e16 	blt	r4,r2,4042538 <__subdf3+0x69c>
 4042340:	010007c4 	movi	r4,31
 4042344:	2080e716 	blt	r4,r2,40426e4 <__subdf3+0x848>
 4042348:	01000804 	movi	r4,32
 404234c:	2089c83a 	sub	r4,r4,r2
 4042350:	1914983a 	sll	r10,r3,r4
 4042354:	8890d83a 	srl	r8,r17,r2
 4042358:	8908983a 	sll	r4,r17,r4
 404235c:	1884d83a 	srl	r2,r3,r2
 4042360:	5222b03a 	or	r17,r10,r8
 4042364:	2006c03a 	cmpne	r3,r4,zero
 4042368:	88e2b03a 	or	r17,r17,r3
 404236c:	3463c83a 	sub	r17,r6,r17
 4042370:	2885c83a 	sub	r2,r5,r2
 4042374:	344d803a 	cmpltu	r6,r6,r17
 4042378:	1187c83a 	sub	r3,r2,r6
 404237c:	4821883a 	mov	r16,r9
 4042380:	3825883a 	mov	r18,r7
 4042384:	003f2306 	br	4042014 <__flash_rwdata_start+0xffffce84>
 4042388:	24d0b03a 	or	r8,r4,r19
 404238c:	40001b1e 	bne	r8,zero,40423fc <__subdf3+0x560>
 4042390:	0005883a 	mov	r2,zero
 4042394:	0009883a 	mov	r4,zero
 4042398:	0021883a 	mov	r16,zero
 404239c:	003f4906 	br	40420c4 <__flash_rwdata_start+0xffffcf34>
 40423a0:	010007c4 	movi	r4,31
 40423a4:	20803a16 	blt	r4,r2,4042490 <__subdf3+0x5f4>
 40423a8:	01000804 	movi	r4,32
 40423ac:	2089c83a 	sub	r4,r4,r2
 40423b0:	2912983a 	sll	r9,r5,r4
 40423b4:	3090d83a 	srl	r8,r6,r2
 40423b8:	3108983a 	sll	r4,r6,r4
 40423bc:	2884d83a 	srl	r2,r5,r2
 40423c0:	4a12b03a 	or	r9,r9,r8
 40423c4:	2008c03a 	cmpne	r4,r4,zero
 40423c8:	4912b03a 	or	r9,r9,r4
 40423cc:	003f4e06 	br	4042108 <__flash_rwdata_start+0xffffcf78>
 40423d0:	1c48b03a 	or	r4,r3,r17
 40423d4:	20003c26 	beq	r4,zero,40424c8 <__subdf3+0x62c>
 40423d8:	0084303a 	nor	r2,zero,r2
 40423dc:	1000381e 	bne	r2,zero,40424c0 <__subdf3+0x624>
 40423e0:	3463c83a 	sub	r17,r6,r17
 40423e4:	28c5c83a 	sub	r2,r5,r3
 40423e8:	344d803a 	cmpltu	r6,r6,r17
 40423ec:	1187c83a 	sub	r3,r2,r6
 40423f0:	4821883a 	mov	r16,r9
 40423f4:	3825883a 	mov	r18,r7
 40423f8:	003f0606 	br	4042014 <__flash_rwdata_start+0xffffce84>
 40423fc:	2023883a 	mov	r17,r4
 4042400:	003f0906 	br	4042028 <__flash_rwdata_start+0xffffce98>
 4042404:	0101ffc4 	movi	r4,2047
 4042408:	813f3a1e 	bne	r16,r4,40420f4 <__flash_rwdata_start+0xffffcf64>
 404240c:	003ec406 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042410:	0005883a 	mov	r2,zero
 4042414:	003fb106 	br	40422dc <__flash_rwdata_start+0xffffd14c>
 4042418:	0005883a 	mov	r2,zero
 404241c:	003fbc06 	br	4042310 <__flash_rwdata_start+0xffffd180>
 4042420:	1c44b03a 	or	r2,r3,r17
 4042424:	80008e1e 	bne	r16,zero,4042660 <__subdf3+0x7c4>
 4042428:	1000c826 	beq	r2,zero,404274c <__subdf3+0x8b0>
 404242c:	2984b03a 	or	r2,r5,r6
 4042430:	103ebb26 	beq	r2,zero,4041f20 <__flash_rwdata_start+0xffffcd90>
 4042434:	8989883a 	add	r4,r17,r6
 4042438:	1945883a 	add	r2,r3,r5
 404243c:	2447803a 	cmpltu	r3,r4,r17
 4042440:	1887883a 	add	r3,r3,r2
 4042444:	1880202c 	andhi	r2,r3,128
 4042448:	2023883a 	mov	r17,r4
 404244c:	103f1626 	beq	r2,zero,40420a8 <__flash_rwdata_start+0xffffcf18>
 4042450:	00bfe034 	movhi	r2,65408
 4042454:	10bfffc4 	addi	r2,r2,-1
 4042458:	5021883a 	mov	r16,r10
 404245c:	1886703a 	and	r3,r3,r2
 4042460:	003eaf06 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042464:	3825883a 	mov	r18,r7
 4042468:	003f0f06 	br	40420a8 <__flash_rwdata_start+0xffffcf18>
 404246c:	1c44b03a 	or	r2,r3,r17
 4042470:	8000251e 	bne	r16,zero,4042508 <__subdf3+0x66c>
 4042474:	1000661e 	bne	r2,zero,4042610 <__subdf3+0x774>
 4042478:	2990b03a 	or	r8,r5,r6
 404247c:	40009626 	beq	r8,zero,40426d8 <__subdf3+0x83c>
 4042480:	2807883a 	mov	r3,r5
 4042484:	3023883a 	mov	r17,r6
 4042488:	3825883a 	mov	r18,r7
 404248c:	003ea406 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042490:	127ff804 	addi	r9,r2,-32
 4042494:	01000804 	movi	r4,32
 4042498:	2a52d83a 	srl	r9,r5,r9
 404249c:	11008c26 	beq	r2,r4,40426d0 <__subdf3+0x834>
 40424a0:	01001004 	movi	r4,64
 40424a4:	2085c83a 	sub	r2,r4,r2
 40424a8:	2884983a 	sll	r2,r5,r2
 40424ac:	118cb03a 	or	r6,r2,r6
 40424b0:	300cc03a 	cmpne	r6,r6,zero
 40424b4:	4992b03a 	or	r9,r9,r6
 40424b8:	0005883a 	mov	r2,zero
 40424bc:	003f1206 	br	4042108 <__flash_rwdata_start+0xffffcf78>
 40424c0:	0101ffc4 	movi	r4,2047
 40424c4:	493f9c1e 	bne	r9,r4,4042338 <__flash_rwdata_start+0xffffd1a8>
 40424c8:	2807883a 	mov	r3,r5
 40424cc:	3023883a 	mov	r17,r6
 40424d0:	4821883a 	mov	r16,r9
 40424d4:	3825883a 	mov	r18,r7
 40424d8:	003e9106 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 40424dc:	80001f1e 	bne	r16,zero,404255c <__subdf3+0x6c0>
 40424e0:	1c48b03a 	or	r4,r3,r17
 40424e4:	20005a26 	beq	r4,zero,4042650 <__subdf3+0x7b4>
 40424e8:	0084303a 	nor	r2,zero,r2
 40424ec:	1000561e 	bne	r2,zero,4042648 <__subdf3+0x7ac>
 40424f0:	89a3883a 	add	r17,r17,r6
 40424f4:	1945883a 	add	r2,r3,r5
 40424f8:	898d803a 	cmpltu	r6,r17,r6
 40424fc:	3087883a 	add	r3,r6,r2
 4042500:	4821883a 	mov	r16,r9
 4042504:	003f0506 	br	404211c <__flash_rwdata_start+0xffffcf8c>
 4042508:	10002b1e 	bne	r2,zero,40425b8 <__subdf3+0x71c>
 404250c:	2984b03a 	or	r2,r5,r6
 4042510:	10008026 	beq	r2,zero,4042714 <__subdf3+0x878>
 4042514:	2807883a 	mov	r3,r5
 4042518:	3023883a 	mov	r17,r6
 404251c:	3825883a 	mov	r18,r7
 4042520:	0401ffc4 	movi	r16,2047
 4042524:	003e7e06 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042528:	3809883a 	mov	r4,r7
 404252c:	0011883a 	mov	r8,zero
 4042530:	0005883a 	mov	r2,zero
 4042534:	003ee306 	br	40420c4 <__flash_rwdata_start+0xffffcf34>
 4042538:	1c62b03a 	or	r17,r3,r17
 404253c:	8822c03a 	cmpne	r17,r17,zero
 4042540:	0005883a 	mov	r2,zero
 4042544:	003f8906 	br	404236c <__flash_rwdata_start+0xffffd1dc>
 4042548:	3809883a 	mov	r4,r7
 404254c:	4821883a 	mov	r16,r9
 4042550:	0011883a 	mov	r8,zero
 4042554:	0005883a 	mov	r2,zero
 4042558:	003eda06 	br	40420c4 <__flash_rwdata_start+0xffffcf34>
 404255c:	0101ffc4 	movi	r4,2047
 4042560:	49003b26 	beq	r9,r4,4042650 <__subdf3+0x7b4>
 4042564:	0085c83a 	sub	r2,zero,r2
 4042568:	18c02034 	orhi	r3,r3,128
 404256c:	01000e04 	movi	r4,56
 4042570:	20806e16 	blt	r4,r2,404272c <__subdf3+0x890>
 4042574:	010007c4 	movi	r4,31
 4042578:	20807716 	blt	r4,r2,4042758 <__subdf3+0x8bc>
 404257c:	01000804 	movi	r4,32
 4042580:	2089c83a 	sub	r4,r4,r2
 4042584:	1914983a 	sll	r10,r3,r4
 4042588:	8890d83a 	srl	r8,r17,r2
 404258c:	8908983a 	sll	r4,r17,r4
 4042590:	1884d83a 	srl	r2,r3,r2
 4042594:	5222b03a 	or	r17,r10,r8
 4042598:	2006c03a 	cmpne	r3,r4,zero
 404259c:	88e2b03a 	or	r17,r17,r3
 40425a0:	89a3883a 	add	r17,r17,r6
 40425a4:	1145883a 	add	r2,r2,r5
 40425a8:	898d803a 	cmpltu	r6,r17,r6
 40425ac:	3087883a 	add	r3,r6,r2
 40425b0:	4821883a 	mov	r16,r9
 40425b4:	003ed906 	br	404211c <__flash_rwdata_start+0xffffcf8c>
 40425b8:	2984b03a 	or	r2,r5,r6
 40425bc:	10004226 	beq	r2,zero,40426c8 <__subdf3+0x82c>
 40425c0:	1808d0fa 	srli	r4,r3,3
 40425c4:	8822d0fa 	srli	r17,r17,3
 40425c8:	1806977a 	slli	r3,r3,29
 40425cc:	2080022c 	andhi	r2,r4,8
 40425d0:	1c62b03a 	or	r17,r3,r17
 40425d4:	10000826 	beq	r2,zero,40425f8 <__subdf3+0x75c>
 40425d8:	2812d0fa 	srli	r9,r5,3
 40425dc:	4880022c 	andhi	r2,r9,8
 40425e0:	1000051e 	bne	r2,zero,40425f8 <__subdf3+0x75c>
 40425e4:	300cd0fa 	srli	r6,r6,3
 40425e8:	2804977a 	slli	r2,r5,29
 40425ec:	4809883a 	mov	r4,r9
 40425f0:	3825883a 	mov	r18,r7
 40425f4:	11a2b03a 	or	r17,r2,r6
 40425f8:	8806d77a 	srli	r3,r17,29
 40425fc:	200890fa 	slli	r4,r4,3
 4042600:	882290fa 	slli	r17,r17,3
 4042604:	0401ffc4 	movi	r16,2047
 4042608:	1906b03a 	or	r3,r3,r4
 404260c:	003e4406 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042610:	2984b03a 	or	r2,r5,r6
 4042614:	103e4226 	beq	r2,zero,4041f20 <__flash_rwdata_start+0xffffcd90>
 4042618:	8989c83a 	sub	r4,r17,r6
 404261c:	8911803a 	cmpltu	r8,r17,r4
 4042620:	1945c83a 	sub	r2,r3,r5
 4042624:	1205c83a 	sub	r2,r2,r8
 4042628:	1200202c 	andhi	r8,r2,128
 404262c:	403e9a26 	beq	r8,zero,4042098 <__flash_rwdata_start+0xffffcf08>
 4042630:	3463c83a 	sub	r17,r6,r17
 4042634:	28c5c83a 	sub	r2,r5,r3
 4042638:	344d803a 	cmpltu	r6,r6,r17
 404263c:	1187c83a 	sub	r3,r2,r6
 4042640:	3825883a 	mov	r18,r7
 4042644:	003e3606 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042648:	0101ffc4 	movi	r4,2047
 404264c:	493fc71e 	bne	r9,r4,404256c <__flash_rwdata_start+0xffffd3dc>
 4042650:	2807883a 	mov	r3,r5
 4042654:	3023883a 	mov	r17,r6
 4042658:	4821883a 	mov	r16,r9
 404265c:	003e3006 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042660:	10003626 	beq	r2,zero,404273c <__subdf3+0x8a0>
 4042664:	2984b03a 	or	r2,r5,r6
 4042668:	10001726 	beq	r2,zero,40426c8 <__subdf3+0x82c>
 404266c:	1808d0fa 	srli	r4,r3,3
 4042670:	8822d0fa 	srli	r17,r17,3
 4042674:	1806977a 	slli	r3,r3,29
 4042678:	2080022c 	andhi	r2,r4,8
 404267c:	1c62b03a 	or	r17,r3,r17
 4042680:	10000726 	beq	r2,zero,40426a0 <__subdf3+0x804>
 4042684:	2812d0fa 	srli	r9,r5,3
 4042688:	4880022c 	andhi	r2,r9,8
 404268c:	1000041e 	bne	r2,zero,40426a0 <__subdf3+0x804>
 4042690:	300cd0fa 	srli	r6,r6,3
 4042694:	2804977a 	slli	r2,r5,29
 4042698:	4809883a 	mov	r4,r9
 404269c:	11a2b03a 	or	r17,r2,r6
 40426a0:	8806d77a 	srli	r3,r17,29
 40426a4:	200890fa 	slli	r4,r4,3
 40426a8:	882290fa 	slli	r17,r17,3
 40426ac:	3825883a 	mov	r18,r7
 40426b0:	1906b03a 	or	r3,r3,r4
 40426b4:	0401ffc4 	movi	r16,2047
 40426b8:	003e1906 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 40426bc:	000b883a 	mov	r5,zero
 40426c0:	0005883a 	mov	r2,zero
 40426c4:	003e2e06 	br	4041f80 <__flash_rwdata_start+0xffffcdf0>
 40426c8:	0401ffc4 	movi	r16,2047
 40426cc:	003e1406 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 40426d0:	0005883a 	mov	r2,zero
 40426d4:	003f7506 	br	40424ac <__flash_rwdata_start+0xffffd31c>
 40426d8:	0005883a 	mov	r2,zero
 40426dc:	0009883a 	mov	r4,zero
 40426e0:	003e7806 	br	40420c4 <__flash_rwdata_start+0xffffcf34>
 40426e4:	123ff804 	addi	r8,r2,-32
 40426e8:	01000804 	movi	r4,32
 40426ec:	1a10d83a 	srl	r8,r3,r8
 40426f0:	11002526 	beq	r2,r4,4042788 <__subdf3+0x8ec>
 40426f4:	01001004 	movi	r4,64
 40426f8:	2085c83a 	sub	r2,r4,r2
 40426fc:	1884983a 	sll	r2,r3,r2
 4042700:	1444b03a 	or	r2,r2,r17
 4042704:	1004c03a 	cmpne	r2,r2,zero
 4042708:	40a2b03a 	or	r17,r8,r2
 404270c:	0005883a 	mov	r2,zero
 4042710:	003f1606 	br	404236c <__flash_rwdata_start+0xffffd1dc>
 4042714:	02000434 	movhi	r8,16
 4042718:	0009883a 	mov	r4,zero
 404271c:	423fffc4 	addi	r8,r8,-1
 4042720:	00bfffc4 	movi	r2,-1
 4042724:	0401ffc4 	movi	r16,2047
 4042728:	003e6606 	br	40420c4 <__flash_rwdata_start+0xffffcf34>
 404272c:	1c62b03a 	or	r17,r3,r17
 4042730:	8822c03a 	cmpne	r17,r17,zero
 4042734:	0005883a 	mov	r2,zero
 4042738:	003f9906 	br	40425a0 <__flash_rwdata_start+0xffffd410>
 404273c:	2807883a 	mov	r3,r5
 4042740:	3023883a 	mov	r17,r6
 4042744:	0401ffc4 	movi	r16,2047
 4042748:	003df506 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 404274c:	2807883a 	mov	r3,r5
 4042750:	3023883a 	mov	r17,r6
 4042754:	003df206 	br	4041f20 <__flash_rwdata_start+0xffffcd90>
 4042758:	123ff804 	addi	r8,r2,-32
 404275c:	01000804 	movi	r4,32
 4042760:	1a10d83a 	srl	r8,r3,r8
 4042764:	11000a26 	beq	r2,r4,4042790 <__subdf3+0x8f4>
 4042768:	01001004 	movi	r4,64
 404276c:	2085c83a 	sub	r2,r4,r2
 4042770:	1884983a 	sll	r2,r3,r2
 4042774:	1444b03a 	or	r2,r2,r17
 4042778:	1004c03a 	cmpne	r2,r2,zero
 404277c:	40a2b03a 	or	r17,r8,r2
 4042780:	0005883a 	mov	r2,zero
 4042784:	003f8606 	br	40425a0 <__flash_rwdata_start+0xffffd410>
 4042788:	0005883a 	mov	r2,zero
 404278c:	003fdc06 	br	4042700 <__flash_rwdata_start+0xffffd570>
 4042790:	0005883a 	mov	r2,zero
 4042794:	003ff706 	br	4042774 <__flash_rwdata_start+0xffffd5e4>

04042798 <__fixdfsi>:
 4042798:	280cd53a 	srli	r6,r5,20
 404279c:	00c00434 	movhi	r3,16
 40427a0:	18ffffc4 	addi	r3,r3,-1
 40427a4:	3181ffcc 	andi	r6,r6,2047
 40427a8:	01c0ff84 	movi	r7,1022
 40427ac:	28c6703a 	and	r3,r5,r3
 40427b0:	280ad7fa 	srli	r5,r5,31
 40427b4:	3980120e 	bge	r7,r6,4042800 <__fixdfsi+0x68>
 40427b8:	00810744 	movi	r2,1053
 40427bc:	11800c16 	blt	r2,r6,40427f0 <__fixdfsi+0x58>
 40427c0:	00810cc4 	movi	r2,1075
 40427c4:	1185c83a 	sub	r2,r2,r6
 40427c8:	01c007c4 	movi	r7,31
 40427cc:	18c00434 	orhi	r3,r3,16
 40427d0:	38800d16 	blt	r7,r2,4042808 <__fixdfsi+0x70>
 40427d4:	31befb44 	addi	r6,r6,-1043
 40427d8:	2084d83a 	srl	r2,r4,r2
 40427dc:	1986983a 	sll	r3,r3,r6
 40427e0:	1884b03a 	or	r2,r3,r2
 40427e4:	28000726 	beq	r5,zero,4042804 <__fixdfsi+0x6c>
 40427e8:	0085c83a 	sub	r2,zero,r2
 40427ec:	f800283a 	ret
 40427f0:	00a00034 	movhi	r2,32768
 40427f4:	10bfffc4 	addi	r2,r2,-1
 40427f8:	2885883a 	add	r2,r5,r2
 40427fc:	f800283a 	ret
 4042800:	0005883a 	mov	r2,zero
 4042804:	f800283a 	ret
 4042808:	008104c4 	movi	r2,1043
 404280c:	1185c83a 	sub	r2,r2,r6
 4042810:	1884d83a 	srl	r2,r3,r2
 4042814:	003ff306 	br	40427e4 <__flash_rwdata_start+0xffffd654>

04042818 <__extendsfdf2>:
 4042818:	200ad5fa 	srli	r5,r4,23
 404281c:	defffd04 	addi	sp,sp,-12
 4042820:	dc400115 	stw	r17,4(sp)
 4042824:	29403fcc 	andi	r5,r5,255
 4042828:	29800044 	addi	r6,r5,1
 404282c:	04402034 	movhi	r17,128
 4042830:	dc000015 	stw	r16,0(sp)
 4042834:	8c7fffc4 	addi	r17,r17,-1
 4042838:	dfc00215 	stw	ra,8(sp)
 404283c:	31803fcc 	andi	r6,r6,255
 4042840:	00800044 	movi	r2,1
 4042844:	8922703a 	and	r17,r17,r4
 4042848:	2020d7fa 	srli	r16,r4,31
 404284c:	1180110e 	bge	r2,r6,4042894 <__extendsfdf2+0x7c>
 4042850:	880cd0fa 	srli	r6,r17,3
 4042854:	8822977a 	slli	r17,r17,29
 4042858:	2940e004 	addi	r5,r5,896
 404285c:	2941ffcc 	andi	r5,r5,2047
 4042860:	2804953a 	slli	r2,r5,20
 4042864:	01400434 	movhi	r5,16
 4042868:	800697fa 	slli	r3,r16,31
 404286c:	297fffc4 	addi	r5,r5,-1
 4042870:	314a703a 	and	r5,r6,r5
 4042874:	288ab03a 	or	r5,r5,r2
 4042878:	28c6b03a 	or	r3,r5,r3
 404287c:	8805883a 	mov	r2,r17
 4042880:	dfc00217 	ldw	ra,8(sp)
 4042884:	dc400117 	ldw	r17,4(sp)
 4042888:	dc000017 	ldw	r16,0(sp)
 404288c:	dec00304 	addi	sp,sp,12
 4042890:	f800283a 	ret
 4042894:	2800111e 	bne	r5,zero,40428dc <__extendsfdf2+0xc4>
 4042898:	88001c26 	beq	r17,zero,404290c <__extendsfdf2+0xf4>
 404289c:	8809883a 	mov	r4,r17
 40428a0:	40429280 	call	4042928 <__clzsi2>
 40428a4:	00c00284 	movi	r3,10
 40428a8:	18801b16 	blt	r3,r2,4042918 <__extendsfdf2+0x100>
 40428ac:	018002c4 	movi	r6,11
 40428b0:	308dc83a 	sub	r6,r6,r2
 40428b4:	11000544 	addi	r4,r2,21
 40428b8:	8986d83a 	srl	r3,r17,r6
 40428bc:	8922983a 	sll	r17,r17,r4
 40428c0:	0180e244 	movi	r6,905
 40428c4:	01400434 	movhi	r5,16
 40428c8:	3085c83a 	sub	r2,r6,r2
 40428cc:	297fffc4 	addi	r5,r5,-1
 40428d0:	194c703a 	and	r6,r3,r5
 40428d4:	1141ffcc 	andi	r5,r2,2047
 40428d8:	003fe006 	br	404285c <__flash_rwdata_start+0xffffd6cc>
 40428dc:	88000826 	beq	r17,zero,4042900 <__extendsfdf2+0xe8>
 40428e0:	880cd0fa 	srli	r6,r17,3
 40428e4:	00800434 	movhi	r2,16
 40428e8:	10bfffc4 	addi	r2,r2,-1
 40428ec:	31800234 	orhi	r6,r6,8
 40428f0:	8822977a 	slli	r17,r17,29
 40428f4:	308c703a 	and	r6,r6,r2
 40428f8:	0141ffc4 	movi	r5,2047
 40428fc:	003fd706 	br	404285c <__flash_rwdata_start+0xffffd6cc>
 4042900:	0141ffc4 	movi	r5,2047
 4042904:	000d883a 	mov	r6,zero
 4042908:	003fd406 	br	404285c <__flash_rwdata_start+0xffffd6cc>
 404290c:	000b883a 	mov	r5,zero
 4042910:	000d883a 	mov	r6,zero
 4042914:	003fd106 	br	404285c <__flash_rwdata_start+0xffffd6cc>
 4042918:	11bffd44 	addi	r6,r2,-11
 404291c:	8986983a 	sll	r3,r17,r6
 4042920:	0023883a 	mov	r17,zero
 4042924:	003fe606 	br	40428c0 <__flash_rwdata_start+0xffffd730>

04042928 <__clzsi2>:
 4042928:	00bfffd4 	movui	r2,65535
 404292c:	11000536 	bltu	r2,r4,4042944 <__clzsi2+0x1c>
 4042930:	00803fc4 	movi	r2,255
 4042934:	11000f36 	bltu	r2,r4,4042974 <__clzsi2+0x4c>
 4042938:	00800804 	movi	r2,32
 404293c:	0007883a 	mov	r3,zero
 4042940:	00000506 	br	4042958 <__clzsi2+0x30>
 4042944:	00804034 	movhi	r2,256
 4042948:	10bfffc4 	addi	r2,r2,-1
 404294c:	11000c2e 	bgeu	r2,r4,4042980 <__clzsi2+0x58>
 4042950:	00800204 	movi	r2,8
 4042954:	00c00604 	movi	r3,24
 4042958:	20c8d83a 	srl	r4,r4,r3
 404295c:	00c00034 	movhi	r3,0
 4042960:	18c01304 	addi	r3,r3,76
 4042964:	1909883a 	add	r4,r3,r4
 4042968:	20c00003 	ldbu	r3,0(r4)
 404296c:	10c5c83a 	sub	r2,r2,r3
 4042970:	f800283a 	ret
 4042974:	00800604 	movi	r2,24
 4042978:	00c00204 	movi	r3,8
 404297c:	003ff606 	br	4042958 <__flash_rwdata_start+0xffffd7c8>
 4042980:	00800404 	movi	r2,16
 4042984:	1007883a 	mov	r3,r2
 4042988:	003ff306 	br	4042958 <__flash_rwdata_start+0xffffd7c8>

0404298c <__mulsi3>:
 404298c:	0005883a 	mov	r2,zero
 4042990:	20000726 	beq	r4,zero,40429b0 <__mulsi3+0x24>
 4042994:	20c0004c 	andi	r3,r4,1
 4042998:	2008d07a 	srli	r4,r4,1
 404299c:	18000126 	beq	r3,zero,40429a4 <__mulsi3+0x18>
 40429a0:	1145883a 	add	r2,r2,r5
 40429a4:	294b883a 	add	r5,r5,r5
 40429a8:	203ffa1e 	bne	r4,zero,4042994 <__flash_rwdata_start+0xffffd804>
 40429ac:	f800283a 	ret
 40429b0:	f800283a 	ret

040429b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 40429b4:	defff504 	addi	sp,sp,-44
 40429b8:	df000a15 	stw	fp,40(sp)
 40429bc:	df000a04 	addi	fp,sp,40
 40429c0:	e13ffc15 	stw	r4,-16(fp)
 40429c4:	e17ffd15 	stw	r5,-12(fp)
 40429c8:	e1bffe15 	stw	r6,-8(fp)
 40429cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40429d0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40429d4:	d0a00f17 	ldw	r2,-32708(gp)
  
  if (alt_ticks_per_second ())
 40429d8:	10003c26 	beq	r2,zero,4042acc <alt_alarm_start+0x118>
  {
    if (alarm)
 40429dc:	e0bffc17 	ldw	r2,-16(fp)
 40429e0:	10003826 	beq	r2,zero,4042ac4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40429e4:	e0bffc17 	ldw	r2,-16(fp)
 40429e8:	e0fffe17 	ldw	r3,-8(fp)
 40429ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40429f0:	e0bffc17 	ldw	r2,-16(fp)
 40429f4:	e0ffff17 	ldw	r3,-4(fp)
 40429f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40429fc:	0005303a 	rdctl	r2,status
 4042a00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4042a04:	e0fff917 	ldw	r3,-28(fp)
 4042a08:	00bfff84 	movi	r2,-2
 4042a0c:	1884703a 	and	r2,r3,r2
 4042a10:	1001703a 	wrctl	status,r2
  
  return context;
 4042a14:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4042a18:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4042a1c:	d0a01017 	ldw	r2,-32704(gp)
      
      current_nticks = alt_nticks();
 4042a20:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4042a24:	e0fffd17 	ldw	r3,-12(fp)
 4042a28:	e0bff617 	ldw	r2,-40(fp)
 4042a2c:	1885883a 	add	r2,r3,r2
 4042a30:	10c00044 	addi	r3,r2,1
 4042a34:	e0bffc17 	ldw	r2,-16(fp)
 4042a38:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4042a3c:	e0bffc17 	ldw	r2,-16(fp)
 4042a40:	10c00217 	ldw	r3,8(r2)
 4042a44:	e0bff617 	ldw	r2,-40(fp)
 4042a48:	1880042e 	bgeu	r3,r2,4042a5c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4042a4c:	e0bffc17 	ldw	r2,-16(fp)
 4042a50:	00c00044 	movi	r3,1
 4042a54:	10c00405 	stb	r3,16(r2)
 4042a58:	00000206 	br	4042a64 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4042a5c:	e0bffc17 	ldw	r2,-16(fp)
 4042a60:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4042a64:	e0bffc17 	ldw	r2,-16(fp)
 4042a68:	d0e00004 	addi	r3,gp,-32768
 4042a6c:	e0fffa15 	stw	r3,-24(fp)
 4042a70:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4042a74:	e0bffb17 	ldw	r2,-20(fp)
 4042a78:	e0fffa17 	ldw	r3,-24(fp)
 4042a7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4042a80:	e0bffa17 	ldw	r2,-24(fp)
 4042a84:	10c00017 	ldw	r3,0(r2)
 4042a88:	e0bffb17 	ldw	r2,-20(fp)
 4042a8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4042a90:	e0bffa17 	ldw	r2,-24(fp)
 4042a94:	10800017 	ldw	r2,0(r2)
 4042a98:	e0fffb17 	ldw	r3,-20(fp)
 4042a9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4042aa0:	e0bffa17 	ldw	r2,-24(fp)
 4042aa4:	e0fffb17 	ldw	r3,-20(fp)
 4042aa8:	10c00015 	stw	r3,0(r2)
 4042aac:	e0bff817 	ldw	r2,-32(fp)
 4042ab0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4042ab4:	e0bff717 	ldw	r2,-36(fp)
 4042ab8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4042abc:	0005883a 	mov	r2,zero
 4042ac0:	00000306 	br	4042ad0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4042ac4:	00bffa84 	movi	r2,-22
 4042ac8:	00000106 	br	4042ad0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4042acc:	00bfde84 	movi	r2,-134
  }
}
 4042ad0:	e037883a 	mov	sp,fp
 4042ad4:	df000017 	ldw	fp,0(sp)
 4042ad8:	dec00104 	addi	sp,sp,4
 4042adc:	f800283a 	ret

04042ae0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4042ae0:	defffc04 	addi	sp,sp,-16
 4042ae4:	df000315 	stw	fp,12(sp)
 4042ae8:	df000304 	addi	fp,sp,12
 4042aec:	e13ffd15 	stw	r4,-12(fp)
 4042af0:	e17ffe15 	stw	r5,-8(fp)
 4042af4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4042af8:	e0fffe17 	ldw	r3,-8(fp)
 4042afc:	e0bffd17 	ldw	r2,-12(fp)
 4042b00:	18800c26 	beq	r3,r2,4042b34 <alt_load_section+0x54>
  {
    while( to != end )
 4042b04:	00000806 	br	4042b28 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4042b08:	e0bffe17 	ldw	r2,-8(fp)
 4042b0c:	10c00104 	addi	r3,r2,4
 4042b10:	e0fffe15 	stw	r3,-8(fp)
 4042b14:	e0fffd17 	ldw	r3,-12(fp)
 4042b18:	19000104 	addi	r4,r3,4
 4042b1c:	e13ffd15 	stw	r4,-12(fp)
 4042b20:	18c00017 	ldw	r3,0(r3)
 4042b24:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4042b28:	e0fffe17 	ldw	r3,-8(fp)
 4042b2c:	e0bfff17 	ldw	r2,-4(fp)
 4042b30:	18bff51e 	bne	r3,r2,4042b08 <__flash_rwdata_start+0xffffd978>
    {
      *to++ = *from++;
    }
  }
}
 4042b34:	0001883a 	nop
 4042b38:	e037883a 	mov	sp,fp
 4042b3c:	df000017 	ldw	fp,0(sp)
 4042b40:	dec00104 	addi	sp,sp,4
 4042b44:	f800283a 	ret

04042b48 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4042b48:	defffe04 	addi	sp,sp,-8
 4042b4c:	dfc00115 	stw	ra,4(sp)
 4042b50:	df000015 	stw	fp,0(sp)
 4042b54:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4042b58:	01800034 	movhi	r6,0
 4042b5c:	3185f704 	addi	r6,r6,6108
 4042b60:	01400034 	movhi	r5,0
 4042b64:	29406104 	addi	r5,r5,388
 4042b68:	01010134 	movhi	r4,1028
 4042b6c:	21146404 	addi	r4,r4,20880
 4042b70:	4042ae00 	call	4042ae0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4042b74:	01810134 	movhi	r6,1028
 4042b78:	31808c04 	addi	r6,r6,560
 4042b7c:	01410134 	movhi	r5,1028
 4042b80:	29400804 	addi	r5,r5,32
 4042b84:	01010134 	movhi	r4,1028
 4042b88:	21000804 	addi	r4,r4,32
 4042b8c:	4042ae00 	call	4042ae0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4042b90:	01800034 	movhi	r6,0
 4042b94:	31806104 	addi	r6,r6,388
 4042b98:	01400034 	movhi	r5,0
 4042b9c:	29400004 	addi	r5,r5,0
 4042ba0:	01010134 	movhi	r4,1028
 4042ba4:	21140304 	addi	r4,r4,20492
 4042ba8:	4042ae00 	call	4042ae0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4042bac:	4043cb40 	call	4043cb4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4042bb0:	4043ea00 	call	4043ea0 <alt_icache_flush_all>
}
 4042bb4:	0001883a 	nop
 4042bb8:	e037883a 	mov	sp,fp
 4042bbc:	dfc00117 	ldw	ra,4(sp)
 4042bc0:	df000017 	ldw	fp,0(sp)
 4042bc4:	dec00204 	addi	sp,sp,8
 4042bc8:	f800283a 	ret

04042bcc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4042bcc:	defffd04 	addi	sp,sp,-12
 4042bd0:	dfc00215 	stw	ra,8(sp)
 4042bd4:	df000115 	stw	fp,4(sp)
 4042bd8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4042bdc:	0009883a 	mov	r4,zero
 4042be0:	4042e500 	call	4042e50 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4042be4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4042be8:	4042e880 	call	4042e88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4042bec:	01800034 	movhi	r6,0
 4042bf0:	31805304 	addi	r6,r6,332
 4042bf4:	01400034 	movhi	r5,0
 4042bf8:	29405304 	addi	r5,r5,332
 4042bfc:	01000034 	movhi	r4,0
 4042c00:	21005304 	addi	r4,r4,332
 4042c04:	40442440 	call	4044244 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4042c08:	4043de00 	call	4043de0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4042c0c:	01010134 	movhi	r4,1028
 4042c10:	210f9004 	addi	r4,r4,15936
 4042c14:	40448e40 	call	40448e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4042c18:	d0a00c17 	ldw	r2,-32720(gp)
 4042c1c:	d0e00d17 	ldw	r3,-32716(gp)
 4042c20:	d1200e17 	ldw	r4,-32712(gp)
 4042c24:	200d883a 	mov	r6,r4
 4042c28:	180b883a 	mov	r5,r3
 4042c2c:	1009883a 	mov	r4,r2
 4042c30:	40404c40 	call	40404c4 <main>
 4042c34:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4042c38:	01000044 	movi	r4,1
 4042c3c:	4043bdc0 	call	4043bdc <close>
  exit (result);
 4042c40:	e13fff17 	ldw	r4,-4(fp)
 4042c44:	40448f80 	call	40448f8 <exit>

04042c48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4042c48:	defffa04 	addi	sp,sp,-24
 4042c4c:	df000515 	stw	fp,20(sp)
 4042c50:	df000504 	addi	fp,sp,20
 4042c54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4042c58:	0005303a 	rdctl	r2,status
 4042c5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4042c60:	e0fffc17 	ldw	r3,-16(fp)
 4042c64:	00bfff84 	movi	r2,-2
 4042c68:	1884703a 	and	r2,r3,r2
 4042c6c:	1001703a 	wrctl	status,r2
  
  return context;
 4042c70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4042c74:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4042c78:	e0bfff17 	ldw	r2,-4(fp)
 4042c7c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4042c80:	e0bffd17 	ldw	r2,-12(fp)
 4042c84:	10800017 	ldw	r2,0(r2)
 4042c88:	e0fffd17 	ldw	r3,-12(fp)
 4042c8c:	18c00117 	ldw	r3,4(r3)
 4042c90:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4042c94:	e0bffd17 	ldw	r2,-12(fp)
 4042c98:	10800117 	ldw	r2,4(r2)
 4042c9c:	e0fffd17 	ldw	r3,-12(fp)
 4042ca0:	18c00017 	ldw	r3,0(r3)
 4042ca4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4042ca8:	e0bffd17 	ldw	r2,-12(fp)
 4042cac:	e0fffd17 	ldw	r3,-12(fp)
 4042cb0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4042cb4:	e0bffd17 	ldw	r2,-12(fp)
 4042cb8:	e0fffd17 	ldw	r3,-12(fp)
 4042cbc:	10c00015 	stw	r3,0(r2)
 4042cc0:	e0bffb17 	ldw	r2,-20(fp)
 4042cc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4042cc8:	e0bffe17 	ldw	r2,-8(fp)
 4042ccc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4042cd0:	0001883a 	nop
 4042cd4:	e037883a 	mov	sp,fp
 4042cd8:	df000017 	ldw	fp,0(sp)
 4042cdc:	dec00104 	addi	sp,sp,4
 4042ce0:	f800283a 	ret

04042ce4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4042ce4:	defffb04 	addi	sp,sp,-20
 4042ce8:	dfc00415 	stw	ra,16(sp)
 4042cec:	df000315 	stw	fp,12(sp)
 4042cf0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4042cf4:	d0a00017 	ldw	r2,-32768(gp)
 4042cf8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4042cfc:	d0a01017 	ldw	r2,-32704(gp)
 4042d00:	10800044 	addi	r2,r2,1
 4042d04:	d0a01015 	stw	r2,-32704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4042d08:	00002e06 	br	4042dc4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4042d0c:	e0bffd17 	ldw	r2,-12(fp)
 4042d10:	10800017 	ldw	r2,0(r2)
 4042d14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4042d18:	e0bffd17 	ldw	r2,-12(fp)
 4042d1c:	10800403 	ldbu	r2,16(r2)
 4042d20:	10803fcc 	andi	r2,r2,255
 4042d24:	10000426 	beq	r2,zero,4042d38 <alt_tick+0x54>
 4042d28:	d0a01017 	ldw	r2,-32704(gp)
 4042d2c:	1000021e 	bne	r2,zero,4042d38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4042d30:	e0bffd17 	ldw	r2,-12(fp)
 4042d34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4042d38:	e0bffd17 	ldw	r2,-12(fp)
 4042d3c:	10800217 	ldw	r2,8(r2)
 4042d40:	d0e01017 	ldw	r3,-32704(gp)
 4042d44:	18801d36 	bltu	r3,r2,4042dbc <alt_tick+0xd8>
 4042d48:	e0bffd17 	ldw	r2,-12(fp)
 4042d4c:	10800403 	ldbu	r2,16(r2)
 4042d50:	10803fcc 	andi	r2,r2,255
 4042d54:	1000191e 	bne	r2,zero,4042dbc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4042d58:	e0bffd17 	ldw	r2,-12(fp)
 4042d5c:	10800317 	ldw	r2,12(r2)
 4042d60:	e0fffd17 	ldw	r3,-12(fp)
 4042d64:	18c00517 	ldw	r3,20(r3)
 4042d68:	1809883a 	mov	r4,r3
 4042d6c:	103ee83a 	callr	r2
 4042d70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4042d74:	e0bfff17 	ldw	r2,-4(fp)
 4042d78:	1000031e 	bne	r2,zero,4042d88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4042d7c:	e13ffd17 	ldw	r4,-12(fp)
 4042d80:	4042c480 	call	4042c48 <alt_alarm_stop>
 4042d84:	00000d06 	br	4042dbc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4042d88:	e0bffd17 	ldw	r2,-12(fp)
 4042d8c:	10c00217 	ldw	r3,8(r2)
 4042d90:	e0bfff17 	ldw	r2,-4(fp)
 4042d94:	1887883a 	add	r3,r3,r2
 4042d98:	e0bffd17 	ldw	r2,-12(fp)
 4042d9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4042da0:	e0bffd17 	ldw	r2,-12(fp)
 4042da4:	10c00217 	ldw	r3,8(r2)
 4042da8:	d0a01017 	ldw	r2,-32704(gp)
 4042dac:	1880032e 	bgeu	r3,r2,4042dbc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4042db0:	e0bffd17 	ldw	r2,-12(fp)
 4042db4:	00c00044 	movi	r3,1
 4042db8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4042dbc:	e0bffe17 	ldw	r2,-8(fp)
 4042dc0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4042dc4:	e0fffd17 	ldw	r3,-12(fp)
 4042dc8:	d0a00004 	addi	r2,gp,-32768
 4042dcc:	18bfcf1e 	bne	r3,r2,4042d0c <__flash_rwdata_start+0xffffdb7c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4042dd0:	0001883a 	nop
}
 4042dd4:	0001883a 	nop
 4042dd8:	e037883a 	mov	sp,fp
 4042ddc:	dfc00117 	ldw	ra,4(sp)
 4042de0:	df000017 	ldw	fp,0(sp)
 4042de4:	dec00204 	addi	sp,sp,8
 4042de8:	f800283a 	ret

04042dec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4042dec:	defffd04 	addi	sp,sp,-12
 4042df0:	dfc00215 	stw	ra,8(sp)
 4042df4:	df000115 	stw	fp,4(sp)
 4042df8:	df000104 	addi	fp,sp,4
 4042dfc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4042e00:	e13fff17 	ldw	r4,-4(fp)
 4042e04:	4043a480 	call	4043a48 <alt_busy_sleep>
}
 4042e08:	e037883a 	mov	sp,fp
 4042e0c:	dfc00117 	ldw	ra,4(sp)
 4042e10:	df000017 	ldw	fp,0(sp)
 4042e14:	dec00204 	addi	sp,sp,8
 4042e18:	f800283a 	ret

04042e1c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4042e1c:	defffd04 	addi	sp,sp,-12
 4042e20:	dfc00215 	stw	ra,8(sp)
 4042e24:	df000115 	stw	fp,4(sp)
 4042e28:	df000104 	addi	fp,sp,4
 4042e2c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4042e30:	d1600404 	addi	r5,gp,-32752
 4042e34:	e13fff17 	ldw	r4,-4(fp)
 4042e38:	4043d3c0 	call	4043d3c <alt_dev_llist_insert>
}
 4042e3c:	e037883a 	mov	sp,fp
 4042e40:	dfc00117 	ldw	ra,4(sp)
 4042e44:	df000017 	ldw	fp,0(sp)
 4042e48:	dec00204 	addi	sp,sp,8
 4042e4c:	f800283a 	ret

04042e50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4042e50:	defffd04 	addi	sp,sp,-12
 4042e54:	dfc00215 	stw	ra,8(sp)
 4042e58:	df000115 	stw	fp,4(sp)
 4042e5c:	df000104 	addi	fp,sp,4
 4042e60:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 4042e64:	40445c80 	call	40445c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4042e68:	00800044 	movi	r2,1
 4042e6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4042e70:	0001883a 	nop
 4042e74:	e037883a 	mov	sp,fp
 4042e78:	dfc00117 	ldw	ra,4(sp)
 4042e7c:	df000017 	ldw	fp,0(sp)
 4042e80:	dec00204 	addi	sp,sp,8
 4042e84:	f800283a 	ret

04042e88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4042e88:	defffe04 	addi	sp,sp,-8
 4042e8c:	dfc00115 	stw	ra,4(sp)
 4042e90:	df000015 	stw	fp,0(sp)
 4042e94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4042e98:	01c0fa04 	movi	r7,1000
 4042e9c:	01800044 	movi	r6,1
 4042ea0:	000b883a 	mov	r5,zero
 4042ea4:	01010234 	movhi	r4,1032
 4042ea8:	21040004 	addi	r4,r4,4096
 4042eac:	40439cc0 	call	40439cc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4042eb0:	000d883a 	mov	r6,zero
 4042eb4:	000b883a 	mov	r5,zero
 4042eb8:	01000034 	movhi	r4,0
 4042ebc:	21006b04 	addi	r4,r4,428
 4042ec0:	40430500 	call	4043050 <altera_avalon_jtag_uart_init>
 4042ec4:	01000034 	movhi	r4,0
 4042ec8:	21006104 	addi	r4,r4,388
 4042ecc:	4042e1c0 	call	4042e1c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4042ed0:	0001883a 	nop
}
 4042ed4:	0001883a 	nop
 4042ed8:	e037883a 	mov	sp,fp
 4042edc:	dfc00117 	ldw	ra,4(sp)
 4042ee0:	df000017 	ldw	fp,0(sp)
 4042ee4:	dec00204 	addi	sp,sp,8
 4042ee8:	f800283a 	ret

04042eec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4042eec:	defffa04 	addi	sp,sp,-24
 4042ef0:	dfc00515 	stw	ra,20(sp)
 4042ef4:	df000415 	stw	fp,16(sp)
 4042ef8:	df000404 	addi	fp,sp,16
 4042efc:	e13ffd15 	stw	r4,-12(fp)
 4042f00:	e17ffe15 	stw	r5,-8(fp)
 4042f04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4042f08:	e0bffd17 	ldw	r2,-12(fp)
 4042f0c:	10800017 	ldw	r2,0(r2)
 4042f10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4042f14:	e0bffc17 	ldw	r2,-16(fp)
 4042f18:	10c00a04 	addi	r3,r2,40
 4042f1c:	e0bffd17 	ldw	r2,-12(fp)
 4042f20:	10800217 	ldw	r2,8(r2)
 4042f24:	100f883a 	mov	r7,r2
 4042f28:	e1bfff17 	ldw	r6,-4(fp)
 4042f2c:	e17ffe17 	ldw	r5,-8(fp)
 4042f30:	1809883a 	mov	r4,r3
 4042f34:	40435140 	call	4043514 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4042f38:	e037883a 	mov	sp,fp
 4042f3c:	dfc00117 	ldw	ra,4(sp)
 4042f40:	df000017 	ldw	fp,0(sp)
 4042f44:	dec00204 	addi	sp,sp,8
 4042f48:	f800283a 	ret

04042f4c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4042f4c:	defffa04 	addi	sp,sp,-24
 4042f50:	dfc00515 	stw	ra,20(sp)
 4042f54:	df000415 	stw	fp,16(sp)
 4042f58:	df000404 	addi	fp,sp,16
 4042f5c:	e13ffd15 	stw	r4,-12(fp)
 4042f60:	e17ffe15 	stw	r5,-8(fp)
 4042f64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4042f68:	e0bffd17 	ldw	r2,-12(fp)
 4042f6c:	10800017 	ldw	r2,0(r2)
 4042f70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4042f74:	e0bffc17 	ldw	r2,-16(fp)
 4042f78:	10c00a04 	addi	r3,r2,40
 4042f7c:	e0bffd17 	ldw	r2,-12(fp)
 4042f80:	10800217 	ldw	r2,8(r2)
 4042f84:	100f883a 	mov	r7,r2
 4042f88:	e1bfff17 	ldw	r6,-4(fp)
 4042f8c:	e17ffe17 	ldw	r5,-8(fp)
 4042f90:	1809883a 	mov	r4,r3
 4042f94:	40437300 	call	4043730 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4042f98:	e037883a 	mov	sp,fp
 4042f9c:	dfc00117 	ldw	ra,4(sp)
 4042fa0:	df000017 	ldw	fp,0(sp)
 4042fa4:	dec00204 	addi	sp,sp,8
 4042fa8:	f800283a 	ret

04042fac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4042fac:	defffc04 	addi	sp,sp,-16
 4042fb0:	dfc00315 	stw	ra,12(sp)
 4042fb4:	df000215 	stw	fp,8(sp)
 4042fb8:	df000204 	addi	fp,sp,8
 4042fbc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4042fc0:	e0bfff17 	ldw	r2,-4(fp)
 4042fc4:	10800017 	ldw	r2,0(r2)
 4042fc8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4042fcc:	e0bffe17 	ldw	r2,-8(fp)
 4042fd0:	10c00a04 	addi	r3,r2,40
 4042fd4:	e0bfff17 	ldw	r2,-4(fp)
 4042fd8:	10800217 	ldw	r2,8(r2)
 4042fdc:	100b883a 	mov	r5,r2
 4042fe0:	1809883a 	mov	r4,r3
 4042fe4:	40433bc0 	call	40433bc <altera_avalon_jtag_uart_close>
}
 4042fe8:	e037883a 	mov	sp,fp
 4042fec:	dfc00117 	ldw	ra,4(sp)
 4042ff0:	df000017 	ldw	fp,0(sp)
 4042ff4:	dec00204 	addi	sp,sp,8
 4042ff8:	f800283a 	ret

04042ffc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4042ffc:	defffa04 	addi	sp,sp,-24
 4043000:	dfc00515 	stw	ra,20(sp)
 4043004:	df000415 	stw	fp,16(sp)
 4043008:	df000404 	addi	fp,sp,16
 404300c:	e13ffd15 	stw	r4,-12(fp)
 4043010:	e17ffe15 	stw	r5,-8(fp)
 4043014:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4043018:	e0bffd17 	ldw	r2,-12(fp)
 404301c:	10800017 	ldw	r2,0(r2)
 4043020:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4043024:	e0bffc17 	ldw	r2,-16(fp)
 4043028:	10800a04 	addi	r2,r2,40
 404302c:	e1bfff17 	ldw	r6,-4(fp)
 4043030:	e17ffe17 	ldw	r5,-8(fp)
 4043034:	1009883a 	mov	r4,r2
 4043038:	40434240 	call	4043424 <altera_avalon_jtag_uart_ioctl>
}
 404303c:	e037883a 	mov	sp,fp
 4043040:	dfc00117 	ldw	ra,4(sp)
 4043044:	df000017 	ldw	fp,0(sp)
 4043048:	dec00204 	addi	sp,sp,8
 404304c:	f800283a 	ret

04043050 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4043050:	defffa04 	addi	sp,sp,-24
 4043054:	dfc00515 	stw	ra,20(sp)
 4043058:	df000415 	stw	fp,16(sp)
 404305c:	df000404 	addi	fp,sp,16
 4043060:	e13ffd15 	stw	r4,-12(fp)
 4043064:	e17ffe15 	stw	r5,-8(fp)
 4043068:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 404306c:	e0bffd17 	ldw	r2,-12(fp)
 4043070:	00c00044 	movi	r3,1
 4043074:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4043078:	e0bffd17 	ldw	r2,-12(fp)
 404307c:	10800017 	ldw	r2,0(r2)
 4043080:	10800104 	addi	r2,r2,4
 4043084:	1007883a 	mov	r3,r2
 4043088:	e0bffd17 	ldw	r2,-12(fp)
 404308c:	10800817 	ldw	r2,32(r2)
 4043090:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4043094:	e0bffe17 	ldw	r2,-8(fp)
 4043098:	e0ffff17 	ldw	r3,-4(fp)
 404309c:	d8000015 	stw	zero,0(sp)
 40430a0:	e1fffd17 	ldw	r7,-12(fp)
 40430a4:	01810134 	movhi	r6,1028
 40430a8:	318c4404 	addi	r6,r6,12560
 40430ac:	180b883a 	mov	r5,r3
 40430b0:	1009883a 	mov	r4,r2
 40430b4:	4043ec00 	call	4043ec0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40430b8:	e0bffd17 	ldw	r2,-12(fp)
 40430bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40430c0:	e0bffd17 	ldw	r2,-12(fp)
 40430c4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40430c8:	d0e00f17 	ldw	r3,-32708(gp)
 40430cc:	e1fffd17 	ldw	r7,-12(fp)
 40430d0:	01810134 	movhi	r6,1028
 40430d4:	318cc704 	addi	r6,r6,13084
 40430d8:	180b883a 	mov	r5,r3
 40430dc:	1009883a 	mov	r4,r2
 40430e0:	40429b40 	call	40429b4 <alt_alarm_start>
 40430e4:	1000040e 	bge	r2,zero,40430f8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40430e8:	e0fffd17 	ldw	r3,-12(fp)
 40430ec:	00a00034 	movhi	r2,32768
 40430f0:	10bfffc4 	addi	r2,r2,-1
 40430f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40430f8:	0001883a 	nop
 40430fc:	e037883a 	mov	sp,fp
 4043100:	dfc00117 	ldw	ra,4(sp)
 4043104:	df000017 	ldw	fp,0(sp)
 4043108:	dec00204 	addi	sp,sp,8
 404310c:	f800283a 	ret

04043110 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4043110:	defff804 	addi	sp,sp,-32
 4043114:	df000715 	stw	fp,28(sp)
 4043118:	df000704 	addi	fp,sp,28
 404311c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4043120:	e0bfff17 	ldw	r2,-4(fp)
 4043124:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4043128:	e0bffb17 	ldw	r2,-20(fp)
 404312c:	10800017 	ldw	r2,0(r2)
 4043130:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4043134:	e0bffc17 	ldw	r2,-16(fp)
 4043138:	10800104 	addi	r2,r2,4
 404313c:	10800037 	ldwio	r2,0(r2)
 4043140:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4043144:	e0bffd17 	ldw	r2,-12(fp)
 4043148:	1080c00c 	andi	r2,r2,768
 404314c:	10006d26 	beq	r2,zero,4043304 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4043150:	e0bffd17 	ldw	r2,-12(fp)
 4043154:	1080400c 	andi	r2,r2,256
 4043158:	10003526 	beq	r2,zero,4043230 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 404315c:	00800074 	movhi	r2,1
 4043160:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4043164:	e0bffb17 	ldw	r2,-20(fp)
 4043168:	10800a17 	ldw	r2,40(r2)
 404316c:	10800044 	addi	r2,r2,1
 4043170:	1081ffcc 	andi	r2,r2,2047
 4043174:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4043178:	e0bffb17 	ldw	r2,-20(fp)
 404317c:	10c00b17 	ldw	r3,44(r2)
 4043180:	e0bffe17 	ldw	r2,-8(fp)
 4043184:	18801526 	beq	r3,r2,40431dc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4043188:	e0bffc17 	ldw	r2,-16(fp)
 404318c:	10800037 	ldwio	r2,0(r2)
 4043190:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4043194:	e0bff917 	ldw	r2,-28(fp)
 4043198:	10a0000c 	andi	r2,r2,32768
 404319c:	10001126 	beq	r2,zero,40431e4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40431a0:	e0bffb17 	ldw	r2,-20(fp)
 40431a4:	10800a17 	ldw	r2,40(r2)
 40431a8:	e0fff917 	ldw	r3,-28(fp)
 40431ac:	1809883a 	mov	r4,r3
 40431b0:	e0fffb17 	ldw	r3,-20(fp)
 40431b4:	1885883a 	add	r2,r3,r2
 40431b8:	10800e04 	addi	r2,r2,56
 40431bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40431c0:	e0bffb17 	ldw	r2,-20(fp)
 40431c4:	10800a17 	ldw	r2,40(r2)
 40431c8:	10800044 	addi	r2,r2,1
 40431cc:	10c1ffcc 	andi	r3,r2,2047
 40431d0:	e0bffb17 	ldw	r2,-20(fp)
 40431d4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40431d8:	003fe206 	br	4043164 <__flash_rwdata_start+0xffffdfd4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40431dc:	0001883a 	nop
 40431e0:	00000106 	br	40431e8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40431e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40431e8:	e0bff917 	ldw	r2,-28(fp)
 40431ec:	10bfffec 	andhi	r2,r2,65535
 40431f0:	10000f26 	beq	r2,zero,4043230 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40431f4:	e0bffb17 	ldw	r2,-20(fp)
 40431f8:	10c00817 	ldw	r3,32(r2)
 40431fc:	00bfff84 	movi	r2,-2
 4043200:	1886703a 	and	r3,r3,r2
 4043204:	e0bffb17 	ldw	r2,-20(fp)
 4043208:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 404320c:	e0bffc17 	ldw	r2,-16(fp)
 4043210:	10800104 	addi	r2,r2,4
 4043214:	1007883a 	mov	r3,r2
 4043218:	e0bffb17 	ldw	r2,-20(fp)
 404321c:	10800817 	ldw	r2,32(r2)
 4043220:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4043224:	e0bffc17 	ldw	r2,-16(fp)
 4043228:	10800104 	addi	r2,r2,4
 404322c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4043230:	e0bffd17 	ldw	r2,-12(fp)
 4043234:	1080800c 	andi	r2,r2,512
 4043238:	103fbe26 	beq	r2,zero,4043134 <__flash_rwdata_start+0xffffdfa4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 404323c:	e0bffd17 	ldw	r2,-12(fp)
 4043240:	1004d43a 	srli	r2,r2,16
 4043244:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4043248:	00001406 	br	404329c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 404324c:	e0bffc17 	ldw	r2,-16(fp)
 4043250:	e0fffb17 	ldw	r3,-20(fp)
 4043254:	18c00d17 	ldw	r3,52(r3)
 4043258:	e13ffb17 	ldw	r4,-20(fp)
 404325c:	20c7883a 	add	r3,r4,r3
 4043260:	18c20e04 	addi	r3,r3,2104
 4043264:	18c00003 	ldbu	r3,0(r3)
 4043268:	18c03fcc 	andi	r3,r3,255
 404326c:	18c0201c 	xori	r3,r3,128
 4043270:	18ffe004 	addi	r3,r3,-128
 4043274:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4043278:	e0bffb17 	ldw	r2,-20(fp)
 404327c:	10800d17 	ldw	r2,52(r2)
 4043280:	10800044 	addi	r2,r2,1
 4043284:	10c1ffcc 	andi	r3,r2,2047
 4043288:	e0bffb17 	ldw	r2,-20(fp)
 404328c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4043290:	e0bffa17 	ldw	r2,-24(fp)
 4043294:	10bfffc4 	addi	r2,r2,-1
 4043298:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 404329c:	e0bffa17 	ldw	r2,-24(fp)
 40432a0:	10000526 	beq	r2,zero,40432b8 <altera_avalon_jtag_uart_irq+0x1a8>
 40432a4:	e0bffb17 	ldw	r2,-20(fp)
 40432a8:	10c00d17 	ldw	r3,52(r2)
 40432ac:	e0bffb17 	ldw	r2,-20(fp)
 40432b0:	10800c17 	ldw	r2,48(r2)
 40432b4:	18bfe51e 	bne	r3,r2,404324c <__flash_rwdata_start+0xffffe0bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40432b8:	e0bffa17 	ldw	r2,-24(fp)
 40432bc:	103f9d26 	beq	r2,zero,4043134 <__flash_rwdata_start+0xffffdfa4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40432c0:	e0bffb17 	ldw	r2,-20(fp)
 40432c4:	10c00817 	ldw	r3,32(r2)
 40432c8:	00bfff44 	movi	r2,-3
 40432cc:	1886703a 	and	r3,r3,r2
 40432d0:	e0bffb17 	ldw	r2,-20(fp)
 40432d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40432d8:	e0bffb17 	ldw	r2,-20(fp)
 40432dc:	10800017 	ldw	r2,0(r2)
 40432e0:	10800104 	addi	r2,r2,4
 40432e4:	1007883a 	mov	r3,r2
 40432e8:	e0bffb17 	ldw	r2,-20(fp)
 40432ec:	10800817 	ldw	r2,32(r2)
 40432f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40432f4:	e0bffc17 	ldw	r2,-16(fp)
 40432f8:	10800104 	addi	r2,r2,4
 40432fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4043300:	003f8c06 	br	4043134 <__flash_rwdata_start+0xffffdfa4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4043304:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4043308:	0001883a 	nop
 404330c:	e037883a 	mov	sp,fp
 4043310:	df000017 	ldw	fp,0(sp)
 4043314:	dec00104 	addi	sp,sp,4
 4043318:	f800283a 	ret

0404331c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 404331c:	defff804 	addi	sp,sp,-32
 4043320:	df000715 	stw	fp,28(sp)
 4043324:	df000704 	addi	fp,sp,28
 4043328:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 404332c:	e0bffb17 	ldw	r2,-20(fp)
 4043330:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4043334:	e0bff917 	ldw	r2,-28(fp)
 4043338:	10800017 	ldw	r2,0(r2)
 404333c:	10800104 	addi	r2,r2,4
 4043340:	10800037 	ldwio	r2,0(r2)
 4043344:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4043348:	e0bffa17 	ldw	r2,-24(fp)
 404334c:	1081000c 	andi	r2,r2,1024
 4043350:	10000b26 	beq	r2,zero,4043380 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4043354:	e0bff917 	ldw	r2,-28(fp)
 4043358:	10800017 	ldw	r2,0(r2)
 404335c:	10800104 	addi	r2,r2,4
 4043360:	1007883a 	mov	r3,r2
 4043364:	e0bff917 	ldw	r2,-28(fp)
 4043368:	10800817 	ldw	r2,32(r2)
 404336c:	10810014 	ori	r2,r2,1024
 4043370:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4043374:	e0bff917 	ldw	r2,-28(fp)
 4043378:	10000915 	stw	zero,36(r2)
 404337c:	00000a06 	br	40433a8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4043380:	e0bff917 	ldw	r2,-28(fp)
 4043384:	10c00917 	ldw	r3,36(r2)
 4043388:	00a00034 	movhi	r2,32768
 404338c:	10bfff04 	addi	r2,r2,-4
 4043390:	10c00536 	bltu	r2,r3,40433a8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4043394:	e0bff917 	ldw	r2,-28(fp)
 4043398:	10800917 	ldw	r2,36(r2)
 404339c:	10c00044 	addi	r3,r2,1
 40433a0:	e0bff917 	ldw	r2,-28(fp)
 40433a4:	10c00915 	stw	r3,36(r2)
 40433a8:	d0a00f17 	ldw	r2,-32708(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40433ac:	e037883a 	mov	sp,fp
 40433b0:	df000017 	ldw	fp,0(sp)
 40433b4:	dec00104 	addi	sp,sp,4
 40433b8:	f800283a 	ret

040433bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40433bc:	defffd04 	addi	sp,sp,-12
 40433c0:	df000215 	stw	fp,8(sp)
 40433c4:	df000204 	addi	fp,sp,8
 40433c8:	e13ffe15 	stw	r4,-8(fp)
 40433cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40433d0:	00000506 	br	40433e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40433d4:	e0bfff17 	ldw	r2,-4(fp)
 40433d8:	1090000c 	andi	r2,r2,16384
 40433dc:	10000226 	beq	r2,zero,40433e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40433e0:	00bffd44 	movi	r2,-11
 40433e4:	00000b06 	br	4043414 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40433e8:	e0bffe17 	ldw	r2,-8(fp)
 40433ec:	10c00d17 	ldw	r3,52(r2)
 40433f0:	e0bffe17 	ldw	r2,-8(fp)
 40433f4:	10800c17 	ldw	r2,48(r2)
 40433f8:	18800526 	beq	r3,r2,4043410 <altera_avalon_jtag_uart_close+0x54>
 40433fc:	e0bffe17 	ldw	r2,-8(fp)
 4043400:	10c00917 	ldw	r3,36(r2)
 4043404:	e0bffe17 	ldw	r2,-8(fp)
 4043408:	10800117 	ldw	r2,4(r2)
 404340c:	18bff136 	bltu	r3,r2,40433d4 <__flash_rwdata_start+0xffffe244>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4043410:	0005883a 	mov	r2,zero
}
 4043414:	e037883a 	mov	sp,fp
 4043418:	df000017 	ldw	fp,0(sp)
 404341c:	dec00104 	addi	sp,sp,4
 4043420:	f800283a 	ret

04043424 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4043424:	defffa04 	addi	sp,sp,-24
 4043428:	df000515 	stw	fp,20(sp)
 404342c:	df000504 	addi	fp,sp,20
 4043430:	e13ffd15 	stw	r4,-12(fp)
 4043434:	e17ffe15 	stw	r5,-8(fp)
 4043438:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 404343c:	00bff9c4 	movi	r2,-25
 4043440:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4043444:	e0bffe17 	ldw	r2,-8(fp)
 4043448:	10da8060 	cmpeqi	r3,r2,27137
 404344c:	1800031e 	bne	r3,zero,404345c <altera_avalon_jtag_uart_ioctl+0x38>
 4043450:	109a80a0 	cmpeqi	r2,r2,27138
 4043454:	1000181e 	bne	r2,zero,40434b8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4043458:	00002906 	br	4043500 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 404345c:	e0bffd17 	ldw	r2,-12(fp)
 4043460:	10c00117 	ldw	r3,4(r2)
 4043464:	00a00034 	movhi	r2,32768
 4043468:	10bfffc4 	addi	r2,r2,-1
 404346c:	18802126 	beq	r3,r2,40434f4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4043470:	e0bfff17 	ldw	r2,-4(fp)
 4043474:	10800017 	ldw	r2,0(r2)
 4043478:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 404347c:	e0bffc17 	ldw	r2,-16(fp)
 4043480:	10800090 	cmplti	r2,r2,2
 4043484:	1000061e 	bne	r2,zero,40434a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 4043488:	e0fffc17 	ldw	r3,-16(fp)
 404348c:	00a00034 	movhi	r2,32768
 4043490:	10bfffc4 	addi	r2,r2,-1
 4043494:	18800226 	beq	r3,r2,40434a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 4043498:	e0bffc17 	ldw	r2,-16(fp)
 404349c:	00000206 	br	40434a8 <altera_avalon_jtag_uart_ioctl+0x84>
 40434a0:	00a00034 	movhi	r2,32768
 40434a4:	10bfff84 	addi	r2,r2,-2
 40434a8:	e0fffd17 	ldw	r3,-12(fp)
 40434ac:	18800115 	stw	r2,4(r3)
      rc = 0;
 40434b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40434b4:	00000f06 	br	40434f4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40434b8:	e0bffd17 	ldw	r2,-12(fp)
 40434bc:	10c00117 	ldw	r3,4(r2)
 40434c0:	00a00034 	movhi	r2,32768
 40434c4:	10bfffc4 	addi	r2,r2,-1
 40434c8:	18800c26 	beq	r3,r2,40434fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40434cc:	e0bffd17 	ldw	r2,-12(fp)
 40434d0:	10c00917 	ldw	r3,36(r2)
 40434d4:	e0bffd17 	ldw	r2,-12(fp)
 40434d8:	10800117 	ldw	r2,4(r2)
 40434dc:	1885803a 	cmpltu	r2,r3,r2
 40434e0:	10c03fcc 	andi	r3,r2,255
 40434e4:	e0bfff17 	ldw	r2,-4(fp)
 40434e8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40434ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40434f0:	00000206 	br	40434fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40434f4:	0001883a 	nop
 40434f8:	00000106 	br	4043500 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 40434fc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4043500:	e0bffb17 	ldw	r2,-20(fp)
}
 4043504:	e037883a 	mov	sp,fp
 4043508:	df000017 	ldw	fp,0(sp)
 404350c:	dec00104 	addi	sp,sp,4
 4043510:	f800283a 	ret

04043514 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4043514:	defff304 	addi	sp,sp,-52
 4043518:	dfc00c15 	stw	ra,48(sp)
 404351c:	df000b15 	stw	fp,44(sp)
 4043520:	df000b04 	addi	fp,sp,44
 4043524:	e13ffc15 	stw	r4,-16(fp)
 4043528:	e17ffd15 	stw	r5,-12(fp)
 404352c:	e1bffe15 	stw	r6,-8(fp)
 4043530:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4043534:	e0bffd17 	ldw	r2,-12(fp)
 4043538:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 404353c:	00004706 	br	404365c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4043540:	e0bffc17 	ldw	r2,-16(fp)
 4043544:	10800a17 	ldw	r2,40(r2)
 4043548:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 404354c:	e0bffc17 	ldw	r2,-16(fp)
 4043550:	10800b17 	ldw	r2,44(r2)
 4043554:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4043558:	e0fff717 	ldw	r3,-36(fp)
 404355c:	e0bff817 	ldw	r2,-32(fp)
 4043560:	18800536 	bltu	r3,r2,4043578 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4043564:	e0fff717 	ldw	r3,-36(fp)
 4043568:	e0bff817 	ldw	r2,-32(fp)
 404356c:	1885c83a 	sub	r2,r3,r2
 4043570:	e0bff615 	stw	r2,-40(fp)
 4043574:	00000406 	br	4043588 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4043578:	00c20004 	movi	r3,2048
 404357c:	e0bff817 	ldw	r2,-32(fp)
 4043580:	1885c83a 	sub	r2,r3,r2
 4043584:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4043588:	e0bff617 	ldw	r2,-40(fp)
 404358c:	10001e26 	beq	r2,zero,4043608 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4043590:	e0fffe17 	ldw	r3,-8(fp)
 4043594:	e0bff617 	ldw	r2,-40(fp)
 4043598:	1880022e 	bgeu	r3,r2,40435a4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 404359c:	e0bffe17 	ldw	r2,-8(fp)
 40435a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40435a4:	e0bffc17 	ldw	r2,-16(fp)
 40435a8:	10c00e04 	addi	r3,r2,56
 40435ac:	e0bff817 	ldw	r2,-32(fp)
 40435b0:	1885883a 	add	r2,r3,r2
 40435b4:	e1bff617 	ldw	r6,-40(fp)
 40435b8:	100b883a 	mov	r5,r2
 40435bc:	e13ff517 	ldw	r4,-44(fp)
 40435c0:	40449ac0 	call	40449ac <memcpy>
      ptr   += n;
 40435c4:	e0fff517 	ldw	r3,-44(fp)
 40435c8:	e0bff617 	ldw	r2,-40(fp)
 40435cc:	1885883a 	add	r2,r3,r2
 40435d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40435d4:	e0fffe17 	ldw	r3,-8(fp)
 40435d8:	e0bff617 	ldw	r2,-40(fp)
 40435dc:	1885c83a 	sub	r2,r3,r2
 40435e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40435e4:	e0fff817 	ldw	r3,-32(fp)
 40435e8:	e0bff617 	ldw	r2,-40(fp)
 40435ec:	1885883a 	add	r2,r3,r2
 40435f0:	10c1ffcc 	andi	r3,r2,2047
 40435f4:	e0bffc17 	ldw	r2,-16(fp)
 40435f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40435fc:	e0bffe17 	ldw	r2,-8(fp)
 4043600:	00bfcf16 	blt	zero,r2,4043540 <__flash_rwdata_start+0xffffe3b0>
 4043604:	00000106 	br	404360c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4043608:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 404360c:	e0fff517 	ldw	r3,-44(fp)
 4043610:	e0bffd17 	ldw	r2,-12(fp)
 4043614:	1880141e 	bne	r3,r2,4043668 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4043618:	e0bfff17 	ldw	r2,-4(fp)
 404361c:	1090000c 	andi	r2,r2,16384
 4043620:	1000131e 	bne	r2,zero,4043670 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4043624:	0001883a 	nop
 4043628:	e0bffc17 	ldw	r2,-16(fp)
 404362c:	10c00a17 	ldw	r3,40(r2)
 4043630:	e0bff717 	ldw	r2,-36(fp)
 4043634:	1880051e 	bne	r3,r2,404364c <altera_avalon_jtag_uart_read+0x138>
 4043638:	e0bffc17 	ldw	r2,-16(fp)
 404363c:	10c00917 	ldw	r3,36(r2)
 4043640:	e0bffc17 	ldw	r2,-16(fp)
 4043644:	10800117 	ldw	r2,4(r2)
 4043648:	18bff736 	bltu	r3,r2,4043628 <__flash_rwdata_start+0xffffe498>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 404364c:	e0bffc17 	ldw	r2,-16(fp)
 4043650:	10c00a17 	ldw	r3,40(r2)
 4043654:	e0bff717 	ldw	r2,-36(fp)
 4043658:	18800726 	beq	r3,r2,4043678 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 404365c:	e0bffe17 	ldw	r2,-8(fp)
 4043660:	00bfb716 	blt	zero,r2,4043540 <__flash_rwdata_start+0xffffe3b0>
 4043664:	00000506 	br	404367c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4043668:	0001883a 	nop
 404366c:	00000306 	br	404367c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4043670:	0001883a 	nop
 4043674:	00000106 	br	404367c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4043678:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 404367c:	e0fff517 	ldw	r3,-44(fp)
 4043680:	e0bffd17 	ldw	r2,-12(fp)
 4043684:	18801826 	beq	r3,r2,40436e8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4043688:	0005303a 	rdctl	r2,status
 404368c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4043690:	e0fffb17 	ldw	r3,-20(fp)
 4043694:	00bfff84 	movi	r2,-2
 4043698:	1884703a 	and	r2,r3,r2
 404369c:	1001703a 	wrctl	status,r2
  
  return context;
 40436a0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40436a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40436a8:	e0bffc17 	ldw	r2,-16(fp)
 40436ac:	10800817 	ldw	r2,32(r2)
 40436b0:	10c00054 	ori	r3,r2,1
 40436b4:	e0bffc17 	ldw	r2,-16(fp)
 40436b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40436bc:	e0bffc17 	ldw	r2,-16(fp)
 40436c0:	10800017 	ldw	r2,0(r2)
 40436c4:	10800104 	addi	r2,r2,4
 40436c8:	1007883a 	mov	r3,r2
 40436cc:	e0bffc17 	ldw	r2,-16(fp)
 40436d0:	10800817 	ldw	r2,32(r2)
 40436d4:	18800035 	stwio	r2,0(r3)
 40436d8:	e0bffa17 	ldw	r2,-24(fp)
 40436dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40436e0:	e0bff917 	ldw	r2,-28(fp)
 40436e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40436e8:	e0fff517 	ldw	r3,-44(fp)
 40436ec:	e0bffd17 	ldw	r2,-12(fp)
 40436f0:	18800426 	beq	r3,r2,4043704 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 40436f4:	e0fff517 	ldw	r3,-44(fp)
 40436f8:	e0bffd17 	ldw	r2,-12(fp)
 40436fc:	1885c83a 	sub	r2,r3,r2
 4043700:	00000606 	br	404371c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4043704:	e0bfff17 	ldw	r2,-4(fp)
 4043708:	1090000c 	andi	r2,r2,16384
 404370c:	10000226 	beq	r2,zero,4043718 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4043710:	00bffd44 	movi	r2,-11
 4043714:	00000106 	br	404371c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4043718:	00bffec4 	movi	r2,-5
}
 404371c:	e037883a 	mov	sp,fp
 4043720:	dfc00117 	ldw	ra,4(sp)
 4043724:	df000017 	ldw	fp,0(sp)
 4043728:	dec00204 	addi	sp,sp,8
 404372c:	f800283a 	ret

04043730 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4043730:	defff304 	addi	sp,sp,-52
 4043734:	dfc00c15 	stw	ra,48(sp)
 4043738:	df000b15 	stw	fp,44(sp)
 404373c:	df000b04 	addi	fp,sp,44
 4043740:	e13ffc15 	stw	r4,-16(fp)
 4043744:	e17ffd15 	stw	r5,-12(fp)
 4043748:	e1bffe15 	stw	r6,-8(fp)
 404374c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4043750:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4043754:	e0bffd17 	ldw	r2,-12(fp)
 4043758:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 404375c:	00003706 	br	404383c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4043760:	e0bffc17 	ldw	r2,-16(fp)
 4043764:	10800c17 	ldw	r2,48(r2)
 4043768:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 404376c:	e0bffc17 	ldw	r2,-16(fp)
 4043770:	10800d17 	ldw	r2,52(r2)
 4043774:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4043778:	e0fff917 	ldw	r3,-28(fp)
 404377c:	e0bff517 	ldw	r2,-44(fp)
 4043780:	1880062e 	bgeu	r3,r2,404379c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4043784:	e0fff517 	ldw	r3,-44(fp)
 4043788:	e0bff917 	ldw	r2,-28(fp)
 404378c:	1885c83a 	sub	r2,r3,r2
 4043790:	10bfffc4 	addi	r2,r2,-1
 4043794:	e0bff615 	stw	r2,-40(fp)
 4043798:	00000b06 	br	40437c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 404379c:	e0bff517 	ldw	r2,-44(fp)
 40437a0:	10000526 	beq	r2,zero,40437b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40437a4:	00c20004 	movi	r3,2048
 40437a8:	e0bff917 	ldw	r2,-28(fp)
 40437ac:	1885c83a 	sub	r2,r3,r2
 40437b0:	e0bff615 	stw	r2,-40(fp)
 40437b4:	00000406 	br	40437c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40437b8:	00c1ffc4 	movi	r3,2047
 40437bc:	e0bff917 	ldw	r2,-28(fp)
 40437c0:	1885c83a 	sub	r2,r3,r2
 40437c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40437c8:	e0bff617 	ldw	r2,-40(fp)
 40437cc:	10001e26 	beq	r2,zero,4043848 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40437d0:	e0fffe17 	ldw	r3,-8(fp)
 40437d4:	e0bff617 	ldw	r2,-40(fp)
 40437d8:	1880022e 	bgeu	r3,r2,40437e4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40437dc:	e0bffe17 	ldw	r2,-8(fp)
 40437e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40437e4:	e0bffc17 	ldw	r2,-16(fp)
 40437e8:	10c20e04 	addi	r3,r2,2104
 40437ec:	e0bff917 	ldw	r2,-28(fp)
 40437f0:	1885883a 	add	r2,r3,r2
 40437f4:	e1bff617 	ldw	r6,-40(fp)
 40437f8:	e17ffd17 	ldw	r5,-12(fp)
 40437fc:	1009883a 	mov	r4,r2
 4043800:	40449ac0 	call	40449ac <memcpy>
      ptr   += n;
 4043804:	e0fffd17 	ldw	r3,-12(fp)
 4043808:	e0bff617 	ldw	r2,-40(fp)
 404380c:	1885883a 	add	r2,r3,r2
 4043810:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4043814:	e0fffe17 	ldw	r3,-8(fp)
 4043818:	e0bff617 	ldw	r2,-40(fp)
 404381c:	1885c83a 	sub	r2,r3,r2
 4043820:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4043824:	e0fff917 	ldw	r3,-28(fp)
 4043828:	e0bff617 	ldw	r2,-40(fp)
 404382c:	1885883a 	add	r2,r3,r2
 4043830:	10c1ffcc 	andi	r3,r2,2047
 4043834:	e0bffc17 	ldw	r2,-16(fp)
 4043838:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 404383c:	e0bffe17 	ldw	r2,-8(fp)
 4043840:	00bfc716 	blt	zero,r2,4043760 <__flash_rwdata_start+0xffffe5d0>
 4043844:	00000106 	br	404384c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4043848:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404384c:	0005303a 	rdctl	r2,status
 4043850:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4043854:	e0fffb17 	ldw	r3,-20(fp)
 4043858:	00bfff84 	movi	r2,-2
 404385c:	1884703a 	and	r2,r3,r2
 4043860:	1001703a 	wrctl	status,r2
  
  return context;
 4043864:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4043868:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 404386c:	e0bffc17 	ldw	r2,-16(fp)
 4043870:	10800817 	ldw	r2,32(r2)
 4043874:	10c00094 	ori	r3,r2,2
 4043878:	e0bffc17 	ldw	r2,-16(fp)
 404387c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4043880:	e0bffc17 	ldw	r2,-16(fp)
 4043884:	10800017 	ldw	r2,0(r2)
 4043888:	10800104 	addi	r2,r2,4
 404388c:	1007883a 	mov	r3,r2
 4043890:	e0bffc17 	ldw	r2,-16(fp)
 4043894:	10800817 	ldw	r2,32(r2)
 4043898:	18800035 	stwio	r2,0(r3)
 404389c:	e0bffa17 	ldw	r2,-24(fp)
 40438a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40438a4:	e0bff817 	ldw	r2,-32(fp)
 40438a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40438ac:	e0bffe17 	ldw	r2,-8(fp)
 40438b0:	0080100e 	bge	zero,r2,40438f4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40438b4:	e0bfff17 	ldw	r2,-4(fp)
 40438b8:	1090000c 	andi	r2,r2,16384
 40438bc:	1000101e 	bne	r2,zero,4043900 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40438c0:	0001883a 	nop
 40438c4:	e0bffc17 	ldw	r2,-16(fp)
 40438c8:	10c00d17 	ldw	r3,52(r2)
 40438cc:	e0bff517 	ldw	r2,-44(fp)
 40438d0:	1880051e 	bne	r3,r2,40438e8 <altera_avalon_jtag_uart_write+0x1b8>
 40438d4:	e0bffc17 	ldw	r2,-16(fp)
 40438d8:	10c00917 	ldw	r3,36(r2)
 40438dc:	e0bffc17 	ldw	r2,-16(fp)
 40438e0:	10800117 	ldw	r2,4(r2)
 40438e4:	18bff736 	bltu	r3,r2,40438c4 <__flash_rwdata_start+0xffffe734>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40438e8:	e0bffc17 	ldw	r2,-16(fp)
 40438ec:	10800917 	ldw	r2,36(r2)
 40438f0:	1000051e 	bne	r2,zero,4043908 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 40438f4:	e0bffe17 	ldw	r2,-8(fp)
 40438f8:	00bfd016 	blt	zero,r2,404383c <__flash_rwdata_start+0xffffe6ac>
 40438fc:	00000306 	br	404390c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4043900:	0001883a 	nop
 4043904:	00000106 	br	404390c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4043908:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 404390c:	e0fffd17 	ldw	r3,-12(fp)
 4043910:	e0bff717 	ldw	r2,-36(fp)
 4043914:	18800426 	beq	r3,r2,4043928 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4043918:	e0fffd17 	ldw	r3,-12(fp)
 404391c:	e0bff717 	ldw	r2,-36(fp)
 4043920:	1885c83a 	sub	r2,r3,r2
 4043924:	00000606 	br	4043940 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4043928:	e0bfff17 	ldw	r2,-4(fp)
 404392c:	1090000c 	andi	r2,r2,16384
 4043930:	10000226 	beq	r2,zero,404393c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4043934:	00bffd44 	movi	r2,-11
 4043938:	00000106 	br	4043940 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 404393c:	00bffec4 	movi	r2,-5
}
 4043940:	e037883a 	mov	sp,fp
 4043944:	dfc00117 	ldw	ra,4(sp)
 4043948:	df000017 	ldw	fp,0(sp)
 404394c:	dec00204 	addi	sp,sp,8
 4043950:	f800283a 	ret

04043954 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4043954:	defffa04 	addi	sp,sp,-24
 4043958:	dfc00515 	stw	ra,20(sp)
 404395c:	df000415 	stw	fp,16(sp)
 4043960:	df000404 	addi	fp,sp,16
 4043964:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4043968:	0007883a 	mov	r3,zero
 404396c:	e0bfff17 	ldw	r2,-4(fp)
 4043970:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4043974:	e0bfff17 	ldw	r2,-4(fp)
 4043978:	10800104 	addi	r2,r2,4
 404397c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4043980:	0005303a 	rdctl	r2,status
 4043984:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4043988:	e0fffd17 	ldw	r3,-12(fp)
 404398c:	00bfff84 	movi	r2,-2
 4043990:	1884703a 	and	r2,r3,r2
 4043994:	1001703a 	wrctl	status,r2
  
  return context;
 4043998:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 404399c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40439a0:	4042ce40 	call	4042ce4 <alt_tick>
 40439a4:	e0bffc17 	ldw	r2,-16(fp)
 40439a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40439ac:	e0bffe17 	ldw	r2,-8(fp)
 40439b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40439b4:	0001883a 	nop
 40439b8:	e037883a 	mov	sp,fp
 40439bc:	dfc00117 	ldw	ra,4(sp)
 40439c0:	df000017 	ldw	fp,0(sp)
 40439c4:	dec00204 	addi	sp,sp,8
 40439c8:	f800283a 	ret

040439cc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40439cc:	defff804 	addi	sp,sp,-32
 40439d0:	dfc00715 	stw	ra,28(sp)
 40439d4:	df000615 	stw	fp,24(sp)
 40439d8:	df000604 	addi	fp,sp,24
 40439dc:	e13ffc15 	stw	r4,-16(fp)
 40439e0:	e17ffd15 	stw	r5,-12(fp)
 40439e4:	e1bffe15 	stw	r6,-8(fp)
 40439e8:	e1ffff15 	stw	r7,-4(fp)
 40439ec:	e0bfff17 	ldw	r2,-4(fp)
 40439f0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40439f4:	d0a00f17 	ldw	r2,-32708(gp)
 40439f8:	1000021e 	bne	r2,zero,4043a04 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 40439fc:	e0bffb17 	ldw	r2,-20(fp)
 4043a00:	d0a00f15 	stw	r2,-32708(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4043a04:	e0bffc17 	ldw	r2,-16(fp)
 4043a08:	10800104 	addi	r2,r2,4
 4043a0c:	00c001c4 	movi	r3,7
 4043a10:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4043a14:	d8000015 	stw	zero,0(sp)
 4043a18:	e1fffc17 	ldw	r7,-16(fp)
 4043a1c:	01810134 	movhi	r6,1028
 4043a20:	318e5504 	addi	r6,r6,14676
 4043a24:	e17ffe17 	ldw	r5,-8(fp)
 4043a28:	e13ffd17 	ldw	r4,-12(fp)
 4043a2c:	4043ec00 	call	4043ec0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4043a30:	0001883a 	nop
 4043a34:	e037883a 	mov	sp,fp
 4043a38:	dfc00117 	ldw	ra,4(sp)
 4043a3c:	df000017 	ldw	fp,0(sp)
 4043a40:	dec00204 	addi	sp,sp,8
 4043a44:	f800283a 	ret

04043a48 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4043a48:	defffa04 	addi	sp,sp,-24
 4043a4c:	dfc00515 	stw	ra,20(sp)
 4043a50:	df000415 	stw	fp,16(sp)
 4043a54:	df000404 	addi	fp,sp,16
 4043a58:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4043a5c:	00800244 	movi	r2,9
 4043a60:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4043a64:	014003f4 	movhi	r5,15
 4043a68:	29509004 	addi	r5,r5,16960
 4043a6c:	e13ffd17 	ldw	r4,-12(fp)
 4043a70:	404298c0 	call	404298c <__mulsi3>
 4043a74:	100b883a 	mov	r5,r2
 4043a78:	0100bef4 	movhi	r4,763
 4043a7c:	213c2004 	addi	r4,r4,-3968
 4043a80:	4044f1c0 	call	4044f1c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4043a84:	100b883a 	mov	r5,r2
 4043a88:	01200034 	movhi	r4,32768
 4043a8c:	213fffc4 	addi	r4,r4,-1
 4043a90:	4044f1c0 	call	4044f1c <__udivsi3>
 4043a94:	100b883a 	mov	r5,r2
 4043a98:	e13fff17 	ldw	r4,-4(fp)
 4043a9c:	4044f1c0 	call	4044f1c <__udivsi3>
 4043aa0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4043aa4:	e0bffe17 	ldw	r2,-8(fp)
 4043aa8:	10002a26 	beq	r2,zero,4043b54 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4043aac:	e03ffc15 	stw	zero,-16(fp)
 4043ab0:	00001706 	br	4043b10 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4043ab4:	00a00034 	movhi	r2,32768
 4043ab8:	10bfffc4 	addi	r2,r2,-1
 4043abc:	10bfffc4 	addi	r2,r2,-1
 4043ac0:	103ffe1e 	bne	r2,zero,4043abc <__flash_rwdata_start+0xffffe92c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4043ac4:	014003f4 	movhi	r5,15
 4043ac8:	29509004 	addi	r5,r5,16960
 4043acc:	e13ffd17 	ldw	r4,-12(fp)
 4043ad0:	404298c0 	call	404298c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4043ad4:	100b883a 	mov	r5,r2
 4043ad8:	0100bef4 	movhi	r4,763
 4043adc:	213c2004 	addi	r4,r4,-3968
 4043ae0:	4044f1c0 	call	4044f1c <__udivsi3>
 4043ae4:	100b883a 	mov	r5,r2
 4043ae8:	01200034 	movhi	r4,32768
 4043aec:	213fffc4 	addi	r4,r4,-1
 4043af0:	4044f1c0 	call	4044f1c <__udivsi3>
 4043af4:	1007883a 	mov	r3,r2
 4043af8:	e0bfff17 	ldw	r2,-4(fp)
 4043afc:	10c5c83a 	sub	r2,r2,r3
 4043b00:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4043b04:	e0bffc17 	ldw	r2,-16(fp)
 4043b08:	10800044 	addi	r2,r2,1
 4043b0c:	e0bffc15 	stw	r2,-16(fp)
 4043b10:	e0fffc17 	ldw	r3,-16(fp)
 4043b14:	e0bffe17 	ldw	r2,-8(fp)
 4043b18:	18bfe616 	blt	r3,r2,4043ab4 <__flash_rwdata_start+0xffffe924>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4043b1c:	014003f4 	movhi	r5,15
 4043b20:	29509004 	addi	r5,r5,16960
 4043b24:	e13ffd17 	ldw	r4,-12(fp)
 4043b28:	404298c0 	call	404298c <__mulsi3>
 4043b2c:	100b883a 	mov	r5,r2
 4043b30:	0100bef4 	movhi	r4,763
 4043b34:	213c2004 	addi	r4,r4,-3968
 4043b38:	4044f1c0 	call	4044f1c <__udivsi3>
 4043b3c:	e17fff17 	ldw	r5,-4(fp)
 4043b40:	1009883a 	mov	r4,r2
 4043b44:	404298c0 	call	404298c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4043b48:	10bfffc4 	addi	r2,r2,-1
 4043b4c:	103ffe1e 	bne	r2,zero,4043b48 <__flash_rwdata_start+0xffffe9b8>
 4043b50:	00000d06 	br	4043b88 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4043b54:	014003f4 	movhi	r5,15
 4043b58:	29509004 	addi	r5,r5,16960
 4043b5c:	e13ffd17 	ldw	r4,-12(fp)
 4043b60:	404298c0 	call	404298c <__mulsi3>
 4043b64:	100b883a 	mov	r5,r2
 4043b68:	0100bef4 	movhi	r4,763
 4043b6c:	213c2004 	addi	r4,r4,-3968
 4043b70:	4044f1c0 	call	4044f1c <__udivsi3>
 4043b74:	e17fff17 	ldw	r5,-4(fp)
 4043b78:	1009883a 	mov	r4,r2
 4043b7c:	404298c0 	call	404298c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4043b80:	10bfffc4 	addi	r2,r2,-1
 4043b84:	00bffe16 	blt	zero,r2,4043b80 <__flash_rwdata_start+0xffffe9f0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4043b88:	0005883a 	mov	r2,zero
}
 4043b8c:	e037883a 	mov	sp,fp
 4043b90:	dfc00117 	ldw	ra,4(sp)
 4043b94:	df000017 	ldw	fp,0(sp)
 4043b98:	dec00204 	addi	sp,sp,8
 4043b9c:	f800283a 	ret

04043ba0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4043ba0:	defffe04 	addi	sp,sp,-8
 4043ba4:	dfc00115 	stw	ra,4(sp)
 4043ba8:	df000015 	stw	fp,0(sp)
 4043bac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4043bb0:	d0a00717 	ldw	r2,-32740(gp)
 4043bb4:	10000326 	beq	r2,zero,4043bc4 <alt_get_errno+0x24>
 4043bb8:	d0a00717 	ldw	r2,-32740(gp)
 4043bbc:	103ee83a 	callr	r2
 4043bc0:	00000106 	br	4043bc8 <alt_get_errno+0x28>
 4043bc4:	d0a01304 	addi	r2,gp,-32692
}
 4043bc8:	e037883a 	mov	sp,fp
 4043bcc:	dfc00117 	ldw	ra,4(sp)
 4043bd0:	df000017 	ldw	fp,0(sp)
 4043bd4:	dec00204 	addi	sp,sp,8
 4043bd8:	f800283a 	ret

04043bdc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4043bdc:	defffb04 	addi	sp,sp,-20
 4043be0:	dfc00415 	stw	ra,16(sp)
 4043be4:	df000315 	stw	fp,12(sp)
 4043be8:	df000304 	addi	fp,sp,12
 4043bec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4043bf0:	e0bfff17 	ldw	r2,-4(fp)
 4043bf4:	10000816 	blt	r2,zero,4043c18 <close+0x3c>
 4043bf8:	01400304 	movi	r5,12
 4043bfc:	e13fff17 	ldw	r4,-4(fp)
 4043c00:	404298c0 	call	404298c <__mulsi3>
 4043c04:	1007883a 	mov	r3,r2
 4043c08:	00800034 	movhi	r2,0
 4043c0c:	10848304 	addi	r2,r2,4620
 4043c10:	1885883a 	add	r2,r3,r2
 4043c14:	00000106 	br	4043c1c <close+0x40>
 4043c18:	0005883a 	mov	r2,zero
 4043c1c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4043c20:	e0bffd17 	ldw	r2,-12(fp)
 4043c24:	10001926 	beq	r2,zero,4043c8c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4043c28:	e0bffd17 	ldw	r2,-12(fp)
 4043c2c:	10800017 	ldw	r2,0(r2)
 4043c30:	10800417 	ldw	r2,16(r2)
 4043c34:	10000626 	beq	r2,zero,4043c50 <close+0x74>
 4043c38:	e0bffd17 	ldw	r2,-12(fp)
 4043c3c:	10800017 	ldw	r2,0(r2)
 4043c40:	10800417 	ldw	r2,16(r2)
 4043c44:	e13ffd17 	ldw	r4,-12(fp)
 4043c48:	103ee83a 	callr	r2
 4043c4c:	00000106 	br	4043c54 <close+0x78>
 4043c50:	0005883a 	mov	r2,zero
 4043c54:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4043c58:	e13fff17 	ldw	r4,-4(fp)
 4043c5c:	40445440 	call	4044544 <alt_release_fd>
    if (rval < 0)
 4043c60:	e0bffe17 	ldw	r2,-8(fp)
 4043c64:	1000070e 	bge	r2,zero,4043c84 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4043c68:	4043ba00 	call	4043ba0 <alt_get_errno>
 4043c6c:	1007883a 	mov	r3,r2
 4043c70:	e0bffe17 	ldw	r2,-8(fp)
 4043c74:	0085c83a 	sub	r2,zero,r2
 4043c78:	18800015 	stw	r2,0(r3)
      return -1;
 4043c7c:	00bfffc4 	movi	r2,-1
 4043c80:	00000706 	br	4043ca0 <close+0xc4>
    }
    return 0;
 4043c84:	0005883a 	mov	r2,zero
 4043c88:	00000506 	br	4043ca0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4043c8c:	4043ba00 	call	4043ba0 <alt_get_errno>
 4043c90:	1007883a 	mov	r3,r2
 4043c94:	00801444 	movi	r2,81
 4043c98:	18800015 	stw	r2,0(r3)
    return -1;
 4043c9c:	00bfffc4 	movi	r2,-1
  }
}
 4043ca0:	e037883a 	mov	sp,fp
 4043ca4:	dfc00117 	ldw	ra,4(sp)
 4043ca8:	df000017 	ldw	fp,0(sp)
 4043cac:	dec00204 	addi	sp,sp,8
 4043cb0:	f800283a 	ret

04043cb4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4043cb4:	deffff04 	addi	sp,sp,-4
 4043cb8:	df000015 	stw	fp,0(sp)
 4043cbc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4043cc0:	0001883a 	nop
 4043cc4:	e037883a 	mov	sp,fp
 4043cc8:	df000017 	ldw	fp,0(sp)
 4043ccc:	dec00104 	addi	sp,sp,4
 4043cd0:	f800283a 	ret

04043cd4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4043cd4:	defffc04 	addi	sp,sp,-16
 4043cd8:	df000315 	stw	fp,12(sp)
 4043cdc:	df000304 	addi	fp,sp,12
 4043ce0:	e13ffd15 	stw	r4,-12(fp)
 4043ce4:	e17ffe15 	stw	r5,-8(fp)
 4043ce8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4043cec:	e0bfff17 	ldw	r2,-4(fp)
}
 4043cf0:	e037883a 	mov	sp,fp
 4043cf4:	df000017 	ldw	fp,0(sp)
 4043cf8:	dec00104 	addi	sp,sp,4
 4043cfc:	f800283a 	ret

04043d00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4043d00:	defffe04 	addi	sp,sp,-8
 4043d04:	dfc00115 	stw	ra,4(sp)
 4043d08:	df000015 	stw	fp,0(sp)
 4043d0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4043d10:	d0a00717 	ldw	r2,-32740(gp)
 4043d14:	10000326 	beq	r2,zero,4043d24 <alt_get_errno+0x24>
 4043d18:	d0a00717 	ldw	r2,-32740(gp)
 4043d1c:	103ee83a 	callr	r2
 4043d20:	00000106 	br	4043d28 <alt_get_errno+0x28>
 4043d24:	d0a01304 	addi	r2,gp,-32692
}
 4043d28:	e037883a 	mov	sp,fp
 4043d2c:	dfc00117 	ldw	ra,4(sp)
 4043d30:	df000017 	ldw	fp,0(sp)
 4043d34:	dec00204 	addi	sp,sp,8
 4043d38:	f800283a 	ret

04043d3c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4043d3c:	defffa04 	addi	sp,sp,-24
 4043d40:	dfc00515 	stw	ra,20(sp)
 4043d44:	df000415 	stw	fp,16(sp)
 4043d48:	df000404 	addi	fp,sp,16
 4043d4c:	e13ffe15 	stw	r4,-8(fp)
 4043d50:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4043d54:	e0bffe17 	ldw	r2,-8(fp)
 4043d58:	10000326 	beq	r2,zero,4043d68 <alt_dev_llist_insert+0x2c>
 4043d5c:	e0bffe17 	ldw	r2,-8(fp)
 4043d60:	10800217 	ldw	r2,8(r2)
 4043d64:	1000061e 	bne	r2,zero,4043d80 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4043d68:	4043d000 	call	4043d00 <alt_get_errno>
 4043d6c:	1007883a 	mov	r3,r2
 4043d70:	00800584 	movi	r2,22
 4043d74:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4043d78:	00bffa84 	movi	r2,-22
 4043d7c:	00001306 	br	4043dcc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4043d80:	e0bffe17 	ldw	r2,-8(fp)
 4043d84:	e0ffff17 	ldw	r3,-4(fp)
 4043d88:	e0fffc15 	stw	r3,-16(fp)
 4043d8c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4043d90:	e0bffd17 	ldw	r2,-12(fp)
 4043d94:	e0fffc17 	ldw	r3,-16(fp)
 4043d98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4043d9c:	e0bffc17 	ldw	r2,-16(fp)
 4043da0:	10c00017 	ldw	r3,0(r2)
 4043da4:	e0bffd17 	ldw	r2,-12(fp)
 4043da8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4043dac:	e0bffc17 	ldw	r2,-16(fp)
 4043db0:	10800017 	ldw	r2,0(r2)
 4043db4:	e0fffd17 	ldw	r3,-12(fp)
 4043db8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4043dbc:	e0bffc17 	ldw	r2,-16(fp)
 4043dc0:	e0fffd17 	ldw	r3,-12(fp)
 4043dc4:	10c00015 	stw	r3,0(r2)

  return 0;  
 4043dc8:	0005883a 	mov	r2,zero
}
 4043dcc:	e037883a 	mov	sp,fp
 4043dd0:	dfc00117 	ldw	ra,4(sp)
 4043dd4:	df000017 	ldw	fp,0(sp)
 4043dd8:	dec00204 	addi	sp,sp,8
 4043ddc:	f800283a 	ret

04043de0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4043de0:	defffd04 	addi	sp,sp,-12
 4043de4:	dfc00215 	stw	ra,8(sp)
 4043de8:	df000115 	stw	fp,4(sp)
 4043dec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4043df0:	00810134 	movhi	r2,1028
 4043df4:	10940204 	addi	r2,r2,20488
 4043df8:	e0bfff15 	stw	r2,-4(fp)
 4043dfc:	00000606 	br	4043e18 <_do_ctors+0x38>
        (*ctor) (); 
 4043e00:	e0bfff17 	ldw	r2,-4(fp)
 4043e04:	10800017 	ldw	r2,0(r2)
 4043e08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4043e0c:	e0bfff17 	ldw	r2,-4(fp)
 4043e10:	10bfff04 	addi	r2,r2,-4
 4043e14:	e0bfff15 	stw	r2,-4(fp)
 4043e18:	e0ffff17 	ldw	r3,-4(fp)
 4043e1c:	00810134 	movhi	r2,1028
 4043e20:	10940304 	addi	r2,r2,20492
 4043e24:	18bff62e 	bgeu	r3,r2,4043e00 <__flash_rwdata_start+0xffffec70>
        (*ctor) (); 
}
 4043e28:	0001883a 	nop
 4043e2c:	e037883a 	mov	sp,fp
 4043e30:	dfc00117 	ldw	ra,4(sp)
 4043e34:	df000017 	ldw	fp,0(sp)
 4043e38:	dec00204 	addi	sp,sp,8
 4043e3c:	f800283a 	ret

04043e40 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4043e40:	defffd04 	addi	sp,sp,-12
 4043e44:	dfc00215 	stw	ra,8(sp)
 4043e48:	df000115 	stw	fp,4(sp)
 4043e4c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4043e50:	00810134 	movhi	r2,1028
 4043e54:	10940204 	addi	r2,r2,20488
 4043e58:	e0bfff15 	stw	r2,-4(fp)
 4043e5c:	00000606 	br	4043e78 <_do_dtors+0x38>
        (*dtor) (); 
 4043e60:	e0bfff17 	ldw	r2,-4(fp)
 4043e64:	10800017 	ldw	r2,0(r2)
 4043e68:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4043e6c:	e0bfff17 	ldw	r2,-4(fp)
 4043e70:	10bfff04 	addi	r2,r2,-4
 4043e74:	e0bfff15 	stw	r2,-4(fp)
 4043e78:	e0ffff17 	ldw	r3,-4(fp)
 4043e7c:	00810134 	movhi	r2,1028
 4043e80:	10940304 	addi	r2,r2,20492
 4043e84:	18bff62e 	bgeu	r3,r2,4043e60 <__flash_rwdata_start+0xffffecd0>
        (*dtor) (); 
}
 4043e88:	0001883a 	nop
 4043e8c:	e037883a 	mov	sp,fp
 4043e90:	dfc00117 	ldw	ra,4(sp)
 4043e94:	df000017 	ldw	fp,0(sp)
 4043e98:	dec00204 	addi	sp,sp,8
 4043e9c:	f800283a 	ret

04043ea0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4043ea0:	deffff04 	addi	sp,sp,-4
 4043ea4:	df000015 	stw	fp,0(sp)
 4043ea8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4043eac:	0001883a 	nop
 4043eb0:	e037883a 	mov	sp,fp
 4043eb4:	df000017 	ldw	fp,0(sp)
 4043eb8:	dec00104 	addi	sp,sp,4
 4043ebc:	f800283a 	ret

04043ec0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4043ec0:	defff904 	addi	sp,sp,-28
 4043ec4:	dfc00615 	stw	ra,24(sp)
 4043ec8:	df000515 	stw	fp,20(sp)
 4043ecc:	df000504 	addi	fp,sp,20
 4043ed0:	e13ffc15 	stw	r4,-16(fp)
 4043ed4:	e17ffd15 	stw	r5,-12(fp)
 4043ed8:	e1bffe15 	stw	r6,-8(fp)
 4043edc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4043ee0:	e0800217 	ldw	r2,8(fp)
 4043ee4:	d8800015 	stw	r2,0(sp)
 4043ee8:	e1ffff17 	ldw	r7,-4(fp)
 4043eec:	e1bffe17 	ldw	r6,-8(fp)
 4043ef0:	e17ffd17 	ldw	r5,-12(fp)
 4043ef4:	e13ffc17 	ldw	r4,-16(fp)
 4043ef8:	40440700 	call	4044070 <alt_iic_isr_register>
}  
 4043efc:	e037883a 	mov	sp,fp
 4043f00:	dfc00117 	ldw	ra,4(sp)
 4043f04:	df000017 	ldw	fp,0(sp)
 4043f08:	dec00204 	addi	sp,sp,8
 4043f0c:	f800283a 	ret

04043f10 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4043f10:	defff904 	addi	sp,sp,-28
 4043f14:	df000615 	stw	fp,24(sp)
 4043f18:	df000604 	addi	fp,sp,24
 4043f1c:	e13ffe15 	stw	r4,-8(fp)
 4043f20:	e17fff15 	stw	r5,-4(fp)
 4043f24:	e0bfff17 	ldw	r2,-4(fp)
 4043f28:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4043f2c:	0005303a 	rdctl	r2,status
 4043f30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4043f34:	e0fffb17 	ldw	r3,-20(fp)
 4043f38:	00bfff84 	movi	r2,-2
 4043f3c:	1884703a 	and	r2,r3,r2
 4043f40:	1001703a 	wrctl	status,r2
  
  return context;
 4043f44:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4043f48:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4043f4c:	00c00044 	movi	r3,1
 4043f50:	e0bffa17 	ldw	r2,-24(fp)
 4043f54:	1884983a 	sll	r2,r3,r2
 4043f58:	1007883a 	mov	r3,r2
 4043f5c:	d0a01117 	ldw	r2,-32700(gp)
 4043f60:	1884b03a 	or	r2,r3,r2
 4043f64:	d0a01115 	stw	r2,-32700(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4043f68:	d0a01117 	ldw	r2,-32700(gp)
 4043f6c:	100170fa 	wrctl	ienable,r2
 4043f70:	e0bffc17 	ldw	r2,-16(fp)
 4043f74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4043f78:	e0bffd17 	ldw	r2,-12(fp)
 4043f7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4043f80:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4043f84:	0001883a 	nop
}
 4043f88:	e037883a 	mov	sp,fp
 4043f8c:	df000017 	ldw	fp,0(sp)
 4043f90:	dec00104 	addi	sp,sp,4
 4043f94:	f800283a 	ret

04043f98 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4043f98:	defff904 	addi	sp,sp,-28
 4043f9c:	df000615 	stw	fp,24(sp)
 4043fa0:	df000604 	addi	fp,sp,24
 4043fa4:	e13ffe15 	stw	r4,-8(fp)
 4043fa8:	e17fff15 	stw	r5,-4(fp)
 4043fac:	e0bfff17 	ldw	r2,-4(fp)
 4043fb0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4043fb4:	0005303a 	rdctl	r2,status
 4043fb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4043fbc:	e0fffb17 	ldw	r3,-20(fp)
 4043fc0:	00bfff84 	movi	r2,-2
 4043fc4:	1884703a 	and	r2,r3,r2
 4043fc8:	1001703a 	wrctl	status,r2
  
  return context;
 4043fcc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4043fd0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4043fd4:	00c00044 	movi	r3,1
 4043fd8:	e0bffa17 	ldw	r2,-24(fp)
 4043fdc:	1884983a 	sll	r2,r3,r2
 4043fe0:	0084303a 	nor	r2,zero,r2
 4043fe4:	1007883a 	mov	r3,r2
 4043fe8:	d0a01117 	ldw	r2,-32700(gp)
 4043fec:	1884703a 	and	r2,r3,r2
 4043ff0:	d0a01115 	stw	r2,-32700(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4043ff4:	d0a01117 	ldw	r2,-32700(gp)
 4043ff8:	100170fa 	wrctl	ienable,r2
 4043ffc:	e0bffc17 	ldw	r2,-16(fp)
 4044000:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4044004:	e0bffd17 	ldw	r2,-12(fp)
 4044008:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 404400c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4044010:	0001883a 	nop
}
 4044014:	e037883a 	mov	sp,fp
 4044018:	df000017 	ldw	fp,0(sp)
 404401c:	dec00104 	addi	sp,sp,4
 4044020:	f800283a 	ret

04044024 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4044024:	defffc04 	addi	sp,sp,-16
 4044028:	df000315 	stw	fp,12(sp)
 404402c:	df000304 	addi	fp,sp,12
 4044030:	e13ffe15 	stw	r4,-8(fp)
 4044034:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4044038:	000530fa 	rdctl	r2,ienable
 404403c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4044040:	00c00044 	movi	r3,1
 4044044:	e0bfff17 	ldw	r2,-4(fp)
 4044048:	1884983a 	sll	r2,r3,r2
 404404c:	1007883a 	mov	r3,r2
 4044050:	e0bffd17 	ldw	r2,-12(fp)
 4044054:	1884703a 	and	r2,r3,r2
 4044058:	1004c03a 	cmpne	r2,r2,zero
 404405c:	10803fcc 	andi	r2,r2,255
}
 4044060:	e037883a 	mov	sp,fp
 4044064:	df000017 	ldw	fp,0(sp)
 4044068:	dec00104 	addi	sp,sp,4
 404406c:	f800283a 	ret

04044070 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4044070:	defff504 	addi	sp,sp,-44
 4044074:	dfc00a15 	stw	ra,40(sp)
 4044078:	df000915 	stw	fp,36(sp)
 404407c:	df000904 	addi	fp,sp,36
 4044080:	e13ffc15 	stw	r4,-16(fp)
 4044084:	e17ffd15 	stw	r5,-12(fp)
 4044088:	e1bffe15 	stw	r6,-8(fp)
 404408c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4044090:	00bffa84 	movi	r2,-22
 4044094:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4044098:	e0bffd17 	ldw	r2,-12(fp)
 404409c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40440a0:	e0bff817 	ldw	r2,-32(fp)
 40440a4:	10800808 	cmpgei	r2,r2,32
 40440a8:	1000271e 	bne	r2,zero,4044148 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40440ac:	0005303a 	rdctl	r2,status
 40440b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40440b4:	e0fffb17 	ldw	r3,-20(fp)
 40440b8:	00bfff84 	movi	r2,-2
 40440bc:	1884703a 	and	r2,r3,r2
 40440c0:	1001703a 	wrctl	status,r2
  
  return context;
 40440c4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40440c8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40440cc:	00800034 	movhi	r2,0
 40440d0:	10860604 	addi	r2,r2,6168
 40440d4:	e0fff817 	ldw	r3,-32(fp)
 40440d8:	180690fa 	slli	r3,r3,3
 40440dc:	10c5883a 	add	r2,r2,r3
 40440e0:	e0fffe17 	ldw	r3,-8(fp)
 40440e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40440e8:	00800034 	movhi	r2,0
 40440ec:	10860604 	addi	r2,r2,6168
 40440f0:	e0fff817 	ldw	r3,-32(fp)
 40440f4:	180690fa 	slli	r3,r3,3
 40440f8:	10c5883a 	add	r2,r2,r3
 40440fc:	10800104 	addi	r2,r2,4
 4044100:	e0ffff17 	ldw	r3,-4(fp)
 4044104:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4044108:	e0bffe17 	ldw	r2,-8(fp)
 404410c:	10000526 	beq	r2,zero,4044124 <alt_iic_isr_register+0xb4>
 4044110:	e0bff817 	ldw	r2,-32(fp)
 4044114:	100b883a 	mov	r5,r2
 4044118:	e13ffc17 	ldw	r4,-16(fp)
 404411c:	4043f100 	call	4043f10 <alt_ic_irq_enable>
 4044120:	00000406 	br	4044134 <alt_iic_isr_register+0xc4>
 4044124:	e0bff817 	ldw	r2,-32(fp)
 4044128:	100b883a 	mov	r5,r2
 404412c:	e13ffc17 	ldw	r4,-16(fp)
 4044130:	4043f980 	call	4043f98 <alt_ic_irq_disable>
 4044134:	e0bff715 	stw	r2,-36(fp)
 4044138:	e0bffa17 	ldw	r2,-24(fp)
 404413c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4044140:	e0bff917 	ldw	r2,-28(fp)
 4044144:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4044148:	e0bff717 	ldw	r2,-36(fp)
}
 404414c:	e037883a 	mov	sp,fp
 4044150:	dfc00117 	ldw	ra,4(sp)
 4044154:	df000017 	ldw	fp,0(sp)
 4044158:	dec00204 	addi	sp,sp,8
 404415c:	f800283a 	ret

04044160 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4044160:	defff804 	addi	sp,sp,-32
 4044164:	dfc00715 	stw	ra,28(sp)
 4044168:	df000615 	stw	fp,24(sp)
 404416c:	dc000515 	stw	r16,20(sp)
 4044170:	df000604 	addi	fp,sp,24
 4044174:	e13ffb15 	stw	r4,-20(fp)
 4044178:	e17ffc15 	stw	r5,-16(fp)
 404417c:	e1bffd15 	stw	r6,-12(fp)
 4044180:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4044184:	e1bffe17 	ldw	r6,-8(fp)
 4044188:	e17ffd17 	ldw	r5,-12(fp)
 404418c:	e13ffc17 	ldw	r4,-16(fp)
 4044190:	40443e80 	call	40443e8 <open>
 4044194:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4044198:	e0bffa17 	ldw	r2,-24(fp)
 404419c:	10002216 	blt	r2,zero,4044228 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40441a0:	04000034 	movhi	r16,0
 40441a4:	84048304 	addi	r16,r16,4620
 40441a8:	e0bffa17 	ldw	r2,-24(fp)
 40441ac:	01400304 	movi	r5,12
 40441b0:	1009883a 	mov	r4,r2
 40441b4:	404298c0 	call	404298c <__mulsi3>
 40441b8:	8085883a 	add	r2,r16,r2
 40441bc:	10c00017 	ldw	r3,0(r2)
 40441c0:	e0bffb17 	ldw	r2,-20(fp)
 40441c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40441c8:	04000034 	movhi	r16,0
 40441cc:	84048304 	addi	r16,r16,4620
 40441d0:	e0bffa17 	ldw	r2,-24(fp)
 40441d4:	01400304 	movi	r5,12
 40441d8:	1009883a 	mov	r4,r2
 40441dc:	404298c0 	call	404298c <__mulsi3>
 40441e0:	8085883a 	add	r2,r16,r2
 40441e4:	10800104 	addi	r2,r2,4
 40441e8:	10c00017 	ldw	r3,0(r2)
 40441ec:	e0bffb17 	ldw	r2,-20(fp)
 40441f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40441f4:	04000034 	movhi	r16,0
 40441f8:	84048304 	addi	r16,r16,4620
 40441fc:	e0bffa17 	ldw	r2,-24(fp)
 4044200:	01400304 	movi	r5,12
 4044204:	1009883a 	mov	r4,r2
 4044208:	404298c0 	call	404298c <__mulsi3>
 404420c:	8085883a 	add	r2,r16,r2
 4044210:	10800204 	addi	r2,r2,8
 4044214:	10c00017 	ldw	r3,0(r2)
 4044218:	e0bffb17 	ldw	r2,-20(fp)
 404421c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4044220:	e13ffa17 	ldw	r4,-24(fp)
 4044224:	40445440 	call	4044544 <alt_release_fd>
  }
} 
 4044228:	0001883a 	nop
 404422c:	e6ffff04 	addi	sp,fp,-4
 4044230:	dfc00217 	ldw	ra,8(sp)
 4044234:	df000117 	ldw	fp,4(sp)
 4044238:	dc000017 	ldw	r16,0(sp)
 404423c:	dec00304 	addi	sp,sp,12
 4044240:	f800283a 	ret

04044244 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4044244:	defffb04 	addi	sp,sp,-20
 4044248:	dfc00415 	stw	ra,16(sp)
 404424c:	df000315 	stw	fp,12(sp)
 4044250:	df000304 	addi	fp,sp,12
 4044254:	e13ffd15 	stw	r4,-12(fp)
 4044258:	e17ffe15 	stw	r5,-8(fp)
 404425c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4044260:	01c07fc4 	movi	r7,511
 4044264:	01800044 	movi	r6,1
 4044268:	e17ffd17 	ldw	r5,-12(fp)
 404426c:	01000034 	movhi	r4,0
 4044270:	21048604 	addi	r4,r4,4632
 4044274:	40441600 	call	4044160 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4044278:	01c07fc4 	movi	r7,511
 404427c:	000d883a 	mov	r6,zero
 4044280:	e17ffe17 	ldw	r5,-8(fp)
 4044284:	01000034 	movhi	r4,0
 4044288:	21048304 	addi	r4,r4,4620
 404428c:	40441600 	call	4044160 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4044290:	01c07fc4 	movi	r7,511
 4044294:	01800044 	movi	r6,1
 4044298:	e17fff17 	ldw	r5,-4(fp)
 404429c:	01000034 	movhi	r4,0
 40442a0:	21048904 	addi	r4,r4,4644
 40442a4:	40441600 	call	4044160 <alt_open_fd>
}  
 40442a8:	0001883a 	nop
 40442ac:	e037883a 	mov	sp,fp
 40442b0:	dfc00117 	ldw	ra,4(sp)
 40442b4:	df000017 	ldw	fp,0(sp)
 40442b8:	dec00204 	addi	sp,sp,8
 40442bc:	f800283a 	ret

040442c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40442c0:	defffe04 	addi	sp,sp,-8
 40442c4:	dfc00115 	stw	ra,4(sp)
 40442c8:	df000015 	stw	fp,0(sp)
 40442cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40442d0:	d0a00717 	ldw	r2,-32740(gp)
 40442d4:	10000326 	beq	r2,zero,40442e4 <alt_get_errno+0x24>
 40442d8:	d0a00717 	ldw	r2,-32740(gp)
 40442dc:	103ee83a 	callr	r2
 40442e0:	00000106 	br	40442e8 <alt_get_errno+0x28>
 40442e4:	d0a01304 	addi	r2,gp,-32692
}
 40442e8:	e037883a 	mov	sp,fp
 40442ec:	dfc00117 	ldw	ra,4(sp)
 40442f0:	df000017 	ldw	fp,0(sp)
 40442f4:	dec00204 	addi	sp,sp,8
 40442f8:	f800283a 	ret

040442fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40442fc:	defffb04 	addi	sp,sp,-20
 4044300:	dfc00415 	stw	ra,16(sp)
 4044304:	df000315 	stw	fp,12(sp)
 4044308:	dc000215 	stw	r16,8(sp)
 404430c:	df000304 	addi	fp,sp,12
 4044310:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4044314:	e0bffe17 	ldw	r2,-8(fp)
 4044318:	10800217 	ldw	r2,8(r2)
 404431c:	10d00034 	orhi	r3,r2,16384
 4044320:	e0bffe17 	ldw	r2,-8(fp)
 4044324:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4044328:	e03ffd15 	stw	zero,-12(fp)
 404432c:	00002306 	br	40443bc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4044330:	04000034 	movhi	r16,0
 4044334:	84048304 	addi	r16,r16,4620
 4044338:	e0bffd17 	ldw	r2,-12(fp)
 404433c:	01400304 	movi	r5,12
 4044340:	1009883a 	mov	r4,r2
 4044344:	404298c0 	call	404298c <__mulsi3>
 4044348:	8085883a 	add	r2,r16,r2
 404434c:	10c00017 	ldw	r3,0(r2)
 4044350:	e0bffe17 	ldw	r2,-8(fp)
 4044354:	10800017 	ldw	r2,0(r2)
 4044358:	1880151e 	bne	r3,r2,40443b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 404435c:	04000034 	movhi	r16,0
 4044360:	84048304 	addi	r16,r16,4620
 4044364:	e0bffd17 	ldw	r2,-12(fp)
 4044368:	01400304 	movi	r5,12
 404436c:	1009883a 	mov	r4,r2
 4044370:	404298c0 	call	404298c <__mulsi3>
 4044374:	8085883a 	add	r2,r16,r2
 4044378:	10800204 	addi	r2,r2,8
 404437c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4044380:	10000b0e 	bge	r2,zero,40443b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4044384:	01400304 	movi	r5,12
 4044388:	e13ffd17 	ldw	r4,-12(fp)
 404438c:	404298c0 	call	404298c <__mulsi3>
 4044390:	1007883a 	mov	r3,r2
 4044394:	00800034 	movhi	r2,0
 4044398:	10848304 	addi	r2,r2,4620
 404439c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40443a0:	e0bffe17 	ldw	r2,-8(fp)
 40443a4:	18800226 	beq	r3,r2,40443b0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40443a8:	00bffcc4 	movi	r2,-13
 40443ac:	00000806 	br	40443d0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40443b0:	e0bffd17 	ldw	r2,-12(fp)
 40443b4:	10800044 	addi	r2,r2,1
 40443b8:	e0bffd15 	stw	r2,-12(fp)
 40443bc:	d0a00617 	ldw	r2,-32744(gp)
 40443c0:	1007883a 	mov	r3,r2
 40443c4:	e0bffd17 	ldw	r2,-12(fp)
 40443c8:	18bfd92e 	bgeu	r3,r2,4044330 <__flash_rwdata_start+0xfffff1a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40443cc:	0005883a 	mov	r2,zero
}
 40443d0:	e6ffff04 	addi	sp,fp,-4
 40443d4:	dfc00217 	ldw	ra,8(sp)
 40443d8:	df000117 	ldw	fp,4(sp)
 40443dc:	dc000017 	ldw	r16,0(sp)
 40443e0:	dec00304 	addi	sp,sp,12
 40443e4:	f800283a 	ret

040443e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40443e8:	defff604 	addi	sp,sp,-40
 40443ec:	dfc00915 	stw	ra,36(sp)
 40443f0:	df000815 	stw	fp,32(sp)
 40443f4:	df000804 	addi	fp,sp,32
 40443f8:	e13ffd15 	stw	r4,-12(fp)
 40443fc:	e17ffe15 	stw	r5,-8(fp)
 4044400:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4044404:	00bfffc4 	movi	r2,-1
 4044408:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 404440c:	00bffb44 	movi	r2,-19
 4044410:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4044414:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4044418:	d1600404 	addi	r5,gp,-32752
 404441c:	e13ffd17 	ldw	r4,-12(fp)
 4044420:	40445ec0 	call	40445ec <alt_find_dev>
 4044424:	e0bff815 	stw	r2,-32(fp)
 4044428:	e0bff817 	ldw	r2,-32(fp)
 404442c:	1000051e 	bne	r2,zero,4044444 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4044430:	e13ffd17 	ldw	r4,-12(fp)
 4044434:	404467c0 	call	404467c <alt_find_file>
 4044438:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 404443c:	00800044 	movi	r2,1
 4044440:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4044444:	e0bff817 	ldw	r2,-32(fp)
 4044448:	10002b26 	beq	r2,zero,40444f8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 404444c:	e13ff817 	ldw	r4,-32(fp)
 4044450:	40447840 	call	4044784 <alt_get_fd>
 4044454:	e0bff915 	stw	r2,-28(fp)
 4044458:	e0bff917 	ldw	r2,-28(fp)
 404445c:	1000030e 	bge	r2,zero,404446c <open+0x84>
    {
      status = index;
 4044460:	e0bff917 	ldw	r2,-28(fp)
 4044464:	e0bffa15 	stw	r2,-24(fp)
 4044468:	00002506 	br	4044500 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 404446c:	01400304 	movi	r5,12
 4044470:	e13ff917 	ldw	r4,-28(fp)
 4044474:	404298c0 	call	404298c <__mulsi3>
 4044478:	1007883a 	mov	r3,r2
 404447c:	00800034 	movhi	r2,0
 4044480:	10848304 	addi	r2,r2,4620
 4044484:	1885883a 	add	r2,r3,r2
 4044488:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 404448c:	e0fffe17 	ldw	r3,-8(fp)
 4044490:	00900034 	movhi	r2,16384
 4044494:	10bfffc4 	addi	r2,r2,-1
 4044498:	1886703a 	and	r3,r3,r2
 404449c:	e0bffc17 	ldw	r2,-16(fp)
 40444a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40444a4:	e0bffb17 	ldw	r2,-20(fp)
 40444a8:	1000051e 	bne	r2,zero,40444c0 <open+0xd8>
 40444ac:	e13ffc17 	ldw	r4,-16(fp)
 40444b0:	40442fc0 	call	40442fc <alt_file_locked>
 40444b4:	e0bffa15 	stw	r2,-24(fp)
 40444b8:	e0bffa17 	ldw	r2,-24(fp)
 40444bc:	10001016 	blt	r2,zero,4044500 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40444c0:	e0bff817 	ldw	r2,-32(fp)
 40444c4:	10800317 	ldw	r2,12(r2)
 40444c8:	10000826 	beq	r2,zero,40444ec <open+0x104>
 40444cc:	e0bff817 	ldw	r2,-32(fp)
 40444d0:	10800317 	ldw	r2,12(r2)
 40444d4:	e1ffff17 	ldw	r7,-4(fp)
 40444d8:	e1bffe17 	ldw	r6,-8(fp)
 40444dc:	e17ffd17 	ldw	r5,-12(fp)
 40444e0:	e13ffc17 	ldw	r4,-16(fp)
 40444e4:	103ee83a 	callr	r2
 40444e8:	00000106 	br	40444f0 <open+0x108>
 40444ec:	0005883a 	mov	r2,zero
 40444f0:	e0bffa15 	stw	r2,-24(fp)
 40444f4:	00000206 	br	4044500 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40444f8:	00bffb44 	movi	r2,-19
 40444fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4044500:	e0bffa17 	ldw	r2,-24(fp)
 4044504:	1000090e 	bge	r2,zero,404452c <open+0x144>
  {
    alt_release_fd (index);  
 4044508:	e13ff917 	ldw	r4,-28(fp)
 404450c:	40445440 	call	4044544 <alt_release_fd>
    ALT_ERRNO = -status;
 4044510:	40442c00 	call	40442c0 <alt_get_errno>
 4044514:	1007883a 	mov	r3,r2
 4044518:	e0bffa17 	ldw	r2,-24(fp)
 404451c:	0085c83a 	sub	r2,zero,r2
 4044520:	18800015 	stw	r2,0(r3)
    return -1;
 4044524:	00bfffc4 	movi	r2,-1
 4044528:	00000106 	br	4044530 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 404452c:	e0bff917 	ldw	r2,-28(fp)
}
 4044530:	e037883a 	mov	sp,fp
 4044534:	dfc00117 	ldw	ra,4(sp)
 4044538:	df000017 	ldw	fp,0(sp)
 404453c:	dec00204 	addi	sp,sp,8
 4044540:	f800283a 	ret

04044544 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4044544:	defffc04 	addi	sp,sp,-16
 4044548:	dfc00315 	stw	ra,12(sp)
 404454c:	df000215 	stw	fp,8(sp)
 4044550:	dc000115 	stw	r16,4(sp)
 4044554:	df000204 	addi	fp,sp,8
 4044558:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 404455c:	e0bffe17 	ldw	r2,-8(fp)
 4044560:	108000d0 	cmplti	r2,r2,3
 4044564:	1000111e 	bne	r2,zero,40445ac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4044568:	04000034 	movhi	r16,0
 404456c:	84048304 	addi	r16,r16,4620
 4044570:	e0bffe17 	ldw	r2,-8(fp)
 4044574:	01400304 	movi	r5,12
 4044578:	1009883a 	mov	r4,r2
 404457c:	404298c0 	call	404298c <__mulsi3>
 4044580:	8085883a 	add	r2,r16,r2
 4044584:	10800204 	addi	r2,r2,8
 4044588:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 404458c:	04000034 	movhi	r16,0
 4044590:	84048304 	addi	r16,r16,4620
 4044594:	e0bffe17 	ldw	r2,-8(fp)
 4044598:	01400304 	movi	r5,12
 404459c:	1009883a 	mov	r4,r2
 40445a0:	404298c0 	call	404298c <__mulsi3>
 40445a4:	8085883a 	add	r2,r16,r2
 40445a8:	10000015 	stw	zero,0(r2)
  }
}
 40445ac:	0001883a 	nop
 40445b0:	e6ffff04 	addi	sp,fp,-4
 40445b4:	dfc00217 	ldw	ra,8(sp)
 40445b8:	df000117 	ldw	fp,4(sp)
 40445bc:	dc000017 	ldw	r16,0(sp)
 40445c0:	dec00304 	addi	sp,sp,12
 40445c4:	f800283a 	ret

040445c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40445c8:	deffff04 	addi	sp,sp,-4
 40445cc:	df000015 	stw	fp,0(sp)
 40445d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40445d4:	000170fa 	wrctl	ienable,zero
}
 40445d8:	0001883a 	nop
 40445dc:	e037883a 	mov	sp,fp
 40445e0:	df000017 	ldw	fp,0(sp)
 40445e4:	dec00104 	addi	sp,sp,4
 40445e8:	f800283a 	ret

040445ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40445ec:	defffa04 	addi	sp,sp,-24
 40445f0:	dfc00515 	stw	ra,20(sp)
 40445f4:	df000415 	stw	fp,16(sp)
 40445f8:	df000404 	addi	fp,sp,16
 40445fc:	e13ffe15 	stw	r4,-8(fp)
 4044600:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4044604:	e0bfff17 	ldw	r2,-4(fp)
 4044608:	10800017 	ldw	r2,0(r2)
 404460c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4044610:	e13ffe17 	ldw	r4,-8(fp)
 4044614:	4044af40 	call	4044af4 <strlen>
 4044618:	10800044 	addi	r2,r2,1
 404461c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4044620:	00000d06 	br	4044658 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4044624:	e0bffc17 	ldw	r2,-16(fp)
 4044628:	10800217 	ldw	r2,8(r2)
 404462c:	e0fffd17 	ldw	r3,-12(fp)
 4044630:	180d883a 	mov	r6,r3
 4044634:	e17ffe17 	ldw	r5,-8(fp)
 4044638:	1009883a 	mov	r4,r2
 404463c:	40449300 	call	4044930 <memcmp>
 4044640:	1000021e 	bne	r2,zero,404464c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4044644:	e0bffc17 	ldw	r2,-16(fp)
 4044648:	00000706 	br	4044668 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 404464c:	e0bffc17 	ldw	r2,-16(fp)
 4044650:	10800017 	ldw	r2,0(r2)
 4044654:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4044658:	e0fffc17 	ldw	r3,-16(fp)
 404465c:	e0bfff17 	ldw	r2,-4(fp)
 4044660:	18bff01e 	bne	r3,r2,4044624 <__flash_rwdata_start+0xfffff494>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4044664:	0005883a 	mov	r2,zero
}
 4044668:	e037883a 	mov	sp,fp
 404466c:	dfc00117 	ldw	ra,4(sp)
 4044670:	df000017 	ldw	fp,0(sp)
 4044674:	dec00204 	addi	sp,sp,8
 4044678:	f800283a 	ret

0404467c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 404467c:	defffb04 	addi	sp,sp,-20
 4044680:	dfc00415 	stw	ra,16(sp)
 4044684:	df000315 	stw	fp,12(sp)
 4044688:	df000304 	addi	fp,sp,12
 404468c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4044690:	d0a00217 	ldw	r2,-32760(gp)
 4044694:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4044698:	00003106 	br	4044760 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 404469c:	e0bffd17 	ldw	r2,-12(fp)
 40446a0:	10800217 	ldw	r2,8(r2)
 40446a4:	1009883a 	mov	r4,r2
 40446a8:	4044af40 	call	4044af4 <strlen>
 40446ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40446b0:	e0bffd17 	ldw	r2,-12(fp)
 40446b4:	10c00217 	ldw	r3,8(r2)
 40446b8:	e0bffe17 	ldw	r2,-8(fp)
 40446bc:	10bfffc4 	addi	r2,r2,-1
 40446c0:	1885883a 	add	r2,r3,r2
 40446c4:	10800003 	ldbu	r2,0(r2)
 40446c8:	10803fcc 	andi	r2,r2,255
 40446cc:	1080201c 	xori	r2,r2,128
 40446d0:	10bfe004 	addi	r2,r2,-128
 40446d4:	10800bd8 	cmpnei	r2,r2,47
 40446d8:	1000031e 	bne	r2,zero,40446e8 <alt_find_file+0x6c>
    {
      len -= 1;
 40446dc:	e0bffe17 	ldw	r2,-8(fp)
 40446e0:	10bfffc4 	addi	r2,r2,-1
 40446e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40446e8:	e0bffe17 	ldw	r2,-8(fp)
 40446ec:	e0ffff17 	ldw	r3,-4(fp)
 40446f0:	1885883a 	add	r2,r3,r2
 40446f4:	10800003 	ldbu	r2,0(r2)
 40446f8:	10803fcc 	andi	r2,r2,255
 40446fc:	1080201c 	xori	r2,r2,128
 4044700:	10bfe004 	addi	r2,r2,-128
 4044704:	10800be0 	cmpeqi	r2,r2,47
 4044708:	1000081e 	bne	r2,zero,404472c <alt_find_file+0xb0>
 404470c:	e0bffe17 	ldw	r2,-8(fp)
 4044710:	e0ffff17 	ldw	r3,-4(fp)
 4044714:	1885883a 	add	r2,r3,r2
 4044718:	10800003 	ldbu	r2,0(r2)
 404471c:	10803fcc 	andi	r2,r2,255
 4044720:	1080201c 	xori	r2,r2,128
 4044724:	10bfe004 	addi	r2,r2,-128
 4044728:	10000a1e 	bne	r2,zero,4044754 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 404472c:	e0bffd17 	ldw	r2,-12(fp)
 4044730:	10800217 	ldw	r2,8(r2)
 4044734:	e0fffe17 	ldw	r3,-8(fp)
 4044738:	180d883a 	mov	r6,r3
 404473c:	e17fff17 	ldw	r5,-4(fp)
 4044740:	1009883a 	mov	r4,r2
 4044744:	40449300 	call	4044930 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4044748:	1000021e 	bne	r2,zero,4044754 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 404474c:	e0bffd17 	ldw	r2,-12(fp)
 4044750:	00000706 	br	4044770 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4044754:	e0bffd17 	ldw	r2,-12(fp)
 4044758:	10800017 	ldw	r2,0(r2)
 404475c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4044760:	e0fffd17 	ldw	r3,-12(fp)
 4044764:	d0a00204 	addi	r2,gp,-32760
 4044768:	18bfcc1e 	bne	r3,r2,404469c <__flash_rwdata_start+0xfffff50c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 404476c:	0005883a 	mov	r2,zero
}
 4044770:	e037883a 	mov	sp,fp
 4044774:	dfc00117 	ldw	ra,4(sp)
 4044778:	df000017 	ldw	fp,0(sp)
 404477c:	dec00204 	addi	sp,sp,8
 4044780:	f800283a 	ret

04044784 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4044784:	defffa04 	addi	sp,sp,-24
 4044788:	dfc00515 	stw	ra,20(sp)
 404478c:	df000415 	stw	fp,16(sp)
 4044790:	dc000315 	stw	r16,12(sp)
 4044794:	df000404 	addi	fp,sp,16
 4044798:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 404479c:	00bffa04 	movi	r2,-24
 40447a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40447a4:	e03ffc15 	stw	zero,-16(fp)
 40447a8:	00001d06 	br	4044820 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 40447ac:	04000034 	movhi	r16,0
 40447b0:	84048304 	addi	r16,r16,4620
 40447b4:	e0bffc17 	ldw	r2,-16(fp)
 40447b8:	01400304 	movi	r5,12
 40447bc:	1009883a 	mov	r4,r2
 40447c0:	404298c0 	call	404298c <__mulsi3>
 40447c4:	8085883a 	add	r2,r16,r2
 40447c8:	10800017 	ldw	r2,0(r2)
 40447cc:	1000111e 	bne	r2,zero,4044814 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 40447d0:	04000034 	movhi	r16,0
 40447d4:	84048304 	addi	r16,r16,4620
 40447d8:	e0bffc17 	ldw	r2,-16(fp)
 40447dc:	01400304 	movi	r5,12
 40447e0:	1009883a 	mov	r4,r2
 40447e4:	404298c0 	call	404298c <__mulsi3>
 40447e8:	8085883a 	add	r2,r16,r2
 40447ec:	e0fffe17 	ldw	r3,-8(fp)
 40447f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40447f4:	d0e00617 	ldw	r3,-32744(gp)
 40447f8:	e0bffc17 	ldw	r2,-16(fp)
 40447fc:	1880020e 	bge	r3,r2,4044808 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4044800:	e0bffc17 	ldw	r2,-16(fp)
 4044804:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
 4044808:	e0bffc17 	ldw	r2,-16(fp)
 404480c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4044810:	00000606 	br	404482c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4044814:	e0bffc17 	ldw	r2,-16(fp)
 4044818:	10800044 	addi	r2,r2,1
 404481c:	e0bffc15 	stw	r2,-16(fp)
 4044820:	e0bffc17 	ldw	r2,-16(fp)
 4044824:	10800810 	cmplti	r2,r2,32
 4044828:	103fe01e 	bne	r2,zero,40447ac <__flash_rwdata_start+0xfffff61c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 404482c:	e0bffd17 	ldw	r2,-12(fp)
}
 4044830:	e6ffff04 	addi	sp,fp,-4
 4044834:	dfc00217 	ldw	ra,8(sp)
 4044838:	df000117 	ldw	fp,4(sp)
 404483c:	dc000017 	ldw	r16,0(sp)
 4044840:	dec00304 	addi	sp,sp,12
 4044844:	f800283a 	ret

04044848 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4044848:	defffe04 	addi	sp,sp,-8
 404484c:	df000115 	stw	fp,4(sp)
 4044850:	df000104 	addi	fp,sp,4
 4044854:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4044858:	e0bfff17 	ldw	r2,-4(fp)
 404485c:	10bffe84 	addi	r2,r2,-6
 4044860:	10c00428 	cmpgeui	r3,r2,16
 4044864:	18001a1e 	bne	r3,zero,40448d0 <alt_exception_cause_generated_bad_addr+0x88>
 4044868:	100690ba 	slli	r3,r2,2
 404486c:	00810134 	movhi	r2,1028
 4044870:	10922004 	addi	r2,r2,18560
 4044874:	1885883a 	add	r2,r3,r2
 4044878:	10800017 	ldw	r2,0(r2)
 404487c:	1000683a 	jmp	r2
 4044880:	040448c0 	call	40448c <_gp+0x3facdc>
 4044884:	040448c0 	call	40448c <_gp+0x3facdc>
 4044888:	040448d0 	cmplti	r16,zero,4387
 404488c:	040448d0 	cmplti	r16,zero,4387
 4044890:	040448d0 	cmplti	r16,zero,4387
 4044894:	040448c0 	call	40448c <_gp+0x3facdc>
 4044898:	040448c8 	cmpgei	r16,zero,4387
 404489c:	040448d0 	cmplti	r16,zero,4387
 40448a0:	040448c0 	call	40448c <_gp+0x3facdc>
 40448a4:	040448c0 	call	40448c <_gp+0x3facdc>
 40448a8:	040448d0 	cmplti	r16,zero,4387
 40448ac:	040448c0 	call	40448c <_gp+0x3facdc>
 40448b0:	040448c8 	cmpgei	r16,zero,4387
 40448b4:	040448d0 	cmplti	r16,zero,4387
 40448b8:	040448d0 	cmplti	r16,zero,4387
 40448bc:	040448c0 	call	40448c <_gp+0x3facdc>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 40448c0:	00800044 	movi	r2,1
 40448c4:	00000306 	br	40448d4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 40448c8:	0005883a 	mov	r2,zero
 40448cc:	00000106 	br	40448d4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40448d0:	0005883a 	mov	r2,zero
  }
}
 40448d4:	e037883a 	mov	sp,fp
 40448d8:	df000017 	ldw	fp,0(sp)
 40448dc:	dec00104 	addi	sp,sp,4
 40448e0:	f800283a 	ret

040448e4 <atexit>:
 40448e4:	200b883a 	mov	r5,r4
 40448e8:	000f883a 	mov	r7,zero
 40448ec:	000d883a 	mov	r6,zero
 40448f0:	0009883a 	mov	r4,zero
 40448f4:	4044b8c1 	jmpi	4044b8c <__register_exitproc>

040448f8 <exit>:
 40448f8:	defffe04 	addi	sp,sp,-8
 40448fc:	000b883a 	mov	r5,zero
 4044900:	dc000015 	stw	r16,0(sp)
 4044904:	dfc00115 	stw	ra,4(sp)
 4044908:	2021883a 	mov	r16,r4
 404490c:	4044ca40 	call	4044ca4 <__call_exitprocs>
 4044910:	00800034 	movhi	r2,0
 4044914:	1085f504 	addi	r2,r2,6100
 4044918:	11000017 	ldw	r4,0(r2)
 404491c:	20800f17 	ldw	r2,60(r4)
 4044920:	10000126 	beq	r2,zero,4044928 <exit+0x30>
 4044924:	103ee83a 	callr	r2
 4044928:	8009883a 	mov	r4,r16
 404492c:	4044fd80 	call	4044fd8 <_exit>

04044930 <memcmp>:
 4044930:	01c000c4 	movi	r7,3
 4044934:	3980192e 	bgeu	r7,r6,404499c <memcmp+0x6c>
 4044938:	2144b03a 	or	r2,r4,r5
 404493c:	11c4703a 	and	r2,r2,r7
 4044940:	10000f26 	beq	r2,zero,4044980 <memcmp+0x50>
 4044944:	20800003 	ldbu	r2,0(r4)
 4044948:	28c00003 	ldbu	r3,0(r5)
 404494c:	10c0151e 	bne	r2,r3,40449a4 <memcmp+0x74>
 4044950:	31bfff84 	addi	r6,r6,-2
 4044954:	01ffffc4 	movi	r7,-1
 4044958:	00000406 	br	404496c <memcmp+0x3c>
 404495c:	20800003 	ldbu	r2,0(r4)
 4044960:	28c00003 	ldbu	r3,0(r5)
 4044964:	31bfffc4 	addi	r6,r6,-1
 4044968:	10c00e1e 	bne	r2,r3,40449a4 <memcmp+0x74>
 404496c:	21000044 	addi	r4,r4,1
 4044970:	29400044 	addi	r5,r5,1
 4044974:	31fff91e 	bne	r6,r7,404495c <__flash_rwdata_start+0xfffff7cc>
 4044978:	0005883a 	mov	r2,zero
 404497c:	f800283a 	ret
 4044980:	20c00017 	ldw	r3,0(r4)
 4044984:	28800017 	ldw	r2,0(r5)
 4044988:	18bfee1e 	bne	r3,r2,4044944 <__flash_rwdata_start+0xfffff7b4>
 404498c:	31bfff04 	addi	r6,r6,-4
 4044990:	21000104 	addi	r4,r4,4
 4044994:	29400104 	addi	r5,r5,4
 4044998:	39bff936 	bltu	r7,r6,4044980 <__flash_rwdata_start+0xfffff7f0>
 404499c:	303fe91e 	bne	r6,zero,4044944 <__flash_rwdata_start+0xfffff7b4>
 40449a0:	003ff506 	br	4044978 <__flash_rwdata_start+0xfffff7e8>
 40449a4:	10c5c83a 	sub	r2,r2,r3
 40449a8:	f800283a 	ret

040449ac <memcpy>:
 40449ac:	defffd04 	addi	sp,sp,-12
 40449b0:	dfc00215 	stw	ra,8(sp)
 40449b4:	dc400115 	stw	r17,4(sp)
 40449b8:	dc000015 	stw	r16,0(sp)
 40449bc:	00c003c4 	movi	r3,15
 40449c0:	2005883a 	mov	r2,r4
 40449c4:	1980452e 	bgeu	r3,r6,4044adc <memcpy+0x130>
 40449c8:	2906b03a 	or	r3,r5,r4
 40449cc:	18c000cc 	andi	r3,r3,3
 40449d0:	1800441e 	bne	r3,zero,4044ae4 <memcpy+0x138>
 40449d4:	347ffc04 	addi	r17,r6,-16
 40449d8:	8822d13a 	srli	r17,r17,4
 40449dc:	28c00104 	addi	r3,r5,4
 40449e0:	23400104 	addi	r13,r4,4
 40449e4:	8820913a 	slli	r16,r17,4
 40449e8:	2b000204 	addi	r12,r5,8
 40449ec:	22c00204 	addi	r11,r4,8
 40449f0:	84000504 	addi	r16,r16,20
 40449f4:	2a800304 	addi	r10,r5,12
 40449f8:	22400304 	addi	r9,r4,12
 40449fc:	2c21883a 	add	r16,r5,r16
 4044a00:	2811883a 	mov	r8,r5
 4044a04:	200f883a 	mov	r7,r4
 4044a08:	41000017 	ldw	r4,0(r8)
 4044a0c:	1fc00017 	ldw	ra,0(r3)
 4044a10:	63c00017 	ldw	r15,0(r12)
 4044a14:	39000015 	stw	r4,0(r7)
 4044a18:	53800017 	ldw	r14,0(r10)
 4044a1c:	6fc00015 	stw	ra,0(r13)
 4044a20:	5bc00015 	stw	r15,0(r11)
 4044a24:	4b800015 	stw	r14,0(r9)
 4044a28:	18c00404 	addi	r3,r3,16
 4044a2c:	39c00404 	addi	r7,r7,16
 4044a30:	42000404 	addi	r8,r8,16
 4044a34:	6b400404 	addi	r13,r13,16
 4044a38:	63000404 	addi	r12,r12,16
 4044a3c:	5ac00404 	addi	r11,r11,16
 4044a40:	52800404 	addi	r10,r10,16
 4044a44:	4a400404 	addi	r9,r9,16
 4044a48:	1c3fef1e 	bne	r3,r16,4044a08 <__flash_rwdata_start+0xfffff878>
 4044a4c:	89c00044 	addi	r7,r17,1
 4044a50:	380e913a 	slli	r7,r7,4
 4044a54:	310003cc 	andi	r4,r6,15
 4044a58:	02c000c4 	movi	r11,3
 4044a5c:	11c7883a 	add	r3,r2,r7
 4044a60:	29cb883a 	add	r5,r5,r7
 4044a64:	5900212e 	bgeu	r11,r4,4044aec <memcpy+0x140>
 4044a68:	1813883a 	mov	r9,r3
 4044a6c:	2811883a 	mov	r8,r5
 4044a70:	200f883a 	mov	r7,r4
 4044a74:	42800017 	ldw	r10,0(r8)
 4044a78:	4a400104 	addi	r9,r9,4
 4044a7c:	39ffff04 	addi	r7,r7,-4
 4044a80:	4abfff15 	stw	r10,-4(r9)
 4044a84:	42000104 	addi	r8,r8,4
 4044a88:	59fffa36 	bltu	r11,r7,4044a74 <__flash_rwdata_start+0xfffff8e4>
 4044a8c:	213fff04 	addi	r4,r4,-4
 4044a90:	2008d0ba 	srli	r4,r4,2
 4044a94:	318000cc 	andi	r6,r6,3
 4044a98:	21000044 	addi	r4,r4,1
 4044a9c:	2109883a 	add	r4,r4,r4
 4044aa0:	2109883a 	add	r4,r4,r4
 4044aa4:	1907883a 	add	r3,r3,r4
 4044aa8:	290b883a 	add	r5,r5,r4
 4044aac:	30000626 	beq	r6,zero,4044ac8 <memcpy+0x11c>
 4044ab0:	198d883a 	add	r6,r3,r6
 4044ab4:	29c00003 	ldbu	r7,0(r5)
 4044ab8:	18c00044 	addi	r3,r3,1
 4044abc:	29400044 	addi	r5,r5,1
 4044ac0:	19ffffc5 	stb	r7,-1(r3)
 4044ac4:	19bffb1e 	bne	r3,r6,4044ab4 <__flash_rwdata_start+0xfffff924>
 4044ac8:	dfc00217 	ldw	ra,8(sp)
 4044acc:	dc400117 	ldw	r17,4(sp)
 4044ad0:	dc000017 	ldw	r16,0(sp)
 4044ad4:	dec00304 	addi	sp,sp,12
 4044ad8:	f800283a 	ret
 4044adc:	2007883a 	mov	r3,r4
 4044ae0:	003ff206 	br	4044aac <__flash_rwdata_start+0xfffff91c>
 4044ae4:	2007883a 	mov	r3,r4
 4044ae8:	003ff106 	br	4044ab0 <__flash_rwdata_start+0xfffff920>
 4044aec:	200d883a 	mov	r6,r4
 4044af0:	003fee06 	br	4044aac <__flash_rwdata_start+0xfffff91c>

04044af4 <strlen>:
 4044af4:	208000cc 	andi	r2,r4,3
 4044af8:	10002026 	beq	r2,zero,4044b7c <strlen+0x88>
 4044afc:	20800007 	ldb	r2,0(r4)
 4044b00:	10002026 	beq	r2,zero,4044b84 <strlen+0x90>
 4044b04:	2005883a 	mov	r2,r4
 4044b08:	00000206 	br	4044b14 <strlen+0x20>
 4044b0c:	10c00007 	ldb	r3,0(r2)
 4044b10:	18001826 	beq	r3,zero,4044b74 <strlen+0x80>
 4044b14:	10800044 	addi	r2,r2,1
 4044b18:	10c000cc 	andi	r3,r2,3
 4044b1c:	183ffb1e 	bne	r3,zero,4044b0c <__flash_rwdata_start+0xfffff97c>
 4044b20:	10c00017 	ldw	r3,0(r2)
 4044b24:	01ffbff4 	movhi	r7,65279
 4044b28:	39ffbfc4 	addi	r7,r7,-257
 4044b2c:	00ca303a 	nor	r5,zero,r3
 4044b30:	01a02074 	movhi	r6,32897
 4044b34:	19c7883a 	add	r3,r3,r7
 4044b38:	31a02004 	addi	r6,r6,-32640
 4044b3c:	1946703a 	and	r3,r3,r5
 4044b40:	1986703a 	and	r3,r3,r6
 4044b44:	1800091e 	bne	r3,zero,4044b6c <strlen+0x78>
 4044b48:	10800104 	addi	r2,r2,4
 4044b4c:	10c00017 	ldw	r3,0(r2)
 4044b50:	19cb883a 	add	r5,r3,r7
 4044b54:	00c6303a 	nor	r3,zero,r3
 4044b58:	28c6703a 	and	r3,r5,r3
 4044b5c:	1986703a 	and	r3,r3,r6
 4044b60:	183ff926 	beq	r3,zero,4044b48 <__flash_rwdata_start+0xfffff9b8>
 4044b64:	00000106 	br	4044b6c <strlen+0x78>
 4044b68:	10800044 	addi	r2,r2,1
 4044b6c:	10c00007 	ldb	r3,0(r2)
 4044b70:	183ffd1e 	bne	r3,zero,4044b68 <__flash_rwdata_start+0xfffff9d8>
 4044b74:	1105c83a 	sub	r2,r2,r4
 4044b78:	f800283a 	ret
 4044b7c:	2005883a 	mov	r2,r4
 4044b80:	003fe706 	br	4044b20 <__flash_rwdata_start+0xfffff990>
 4044b84:	0005883a 	mov	r2,zero
 4044b88:	f800283a 	ret

04044b8c <__register_exitproc>:
 4044b8c:	defffa04 	addi	sp,sp,-24
 4044b90:	dc000315 	stw	r16,12(sp)
 4044b94:	04000034 	movhi	r16,0
 4044b98:	8405f504 	addi	r16,r16,6100
 4044b9c:	80c00017 	ldw	r3,0(r16)
 4044ba0:	dc400415 	stw	r17,16(sp)
 4044ba4:	dfc00515 	stw	ra,20(sp)
 4044ba8:	18805217 	ldw	r2,328(r3)
 4044bac:	2023883a 	mov	r17,r4
 4044bb0:	10003726 	beq	r2,zero,4044c90 <__register_exitproc+0x104>
 4044bb4:	10c00117 	ldw	r3,4(r2)
 4044bb8:	010007c4 	movi	r4,31
 4044bbc:	20c00e16 	blt	r4,r3,4044bf8 <__register_exitproc+0x6c>
 4044bc0:	1a000044 	addi	r8,r3,1
 4044bc4:	8800221e 	bne	r17,zero,4044c50 <__register_exitproc+0xc4>
 4044bc8:	18c00084 	addi	r3,r3,2
 4044bcc:	18c7883a 	add	r3,r3,r3
 4044bd0:	18c7883a 	add	r3,r3,r3
 4044bd4:	12000115 	stw	r8,4(r2)
 4044bd8:	10c7883a 	add	r3,r2,r3
 4044bdc:	19400015 	stw	r5,0(r3)
 4044be0:	0005883a 	mov	r2,zero
 4044be4:	dfc00517 	ldw	ra,20(sp)
 4044be8:	dc400417 	ldw	r17,16(sp)
 4044bec:	dc000317 	ldw	r16,12(sp)
 4044bf0:	dec00604 	addi	sp,sp,24
 4044bf4:	f800283a 	ret
 4044bf8:	00800034 	movhi	r2,0
 4044bfc:	10800004 	addi	r2,r2,0
 4044c00:	10002626 	beq	r2,zero,4044c9c <__register_exitproc+0x110>
 4044c04:	01006404 	movi	r4,400
 4044c08:	d9400015 	stw	r5,0(sp)
 4044c0c:	d9800115 	stw	r6,4(sp)
 4044c10:	d9c00215 	stw	r7,8(sp)
 4044c14:	00000000 	call	0 <__alt_mem_DMEM>
 4044c18:	d9400017 	ldw	r5,0(sp)
 4044c1c:	d9800117 	ldw	r6,4(sp)
 4044c20:	d9c00217 	ldw	r7,8(sp)
 4044c24:	10001d26 	beq	r2,zero,4044c9c <__register_exitproc+0x110>
 4044c28:	81000017 	ldw	r4,0(r16)
 4044c2c:	10000115 	stw	zero,4(r2)
 4044c30:	02000044 	movi	r8,1
 4044c34:	22405217 	ldw	r9,328(r4)
 4044c38:	0007883a 	mov	r3,zero
 4044c3c:	12400015 	stw	r9,0(r2)
 4044c40:	20805215 	stw	r2,328(r4)
 4044c44:	10006215 	stw	zero,392(r2)
 4044c48:	10006315 	stw	zero,396(r2)
 4044c4c:	883fde26 	beq	r17,zero,4044bc8 <__flash_rwdata_start+0xfffffa38>
 4044c50:	18c9883a 	add	r4,r3,r3
 4044c54:	2109883a 	add	r4,r4,r4
 4044c58:	1109883a 	add	r4,r2,r4
 4044c5c:	21802215 	stw	r6,136(r4)
 4044c60:	01800044 	movi	r6,1
 4044c64:	12406217 	ldw	r9,392(r2)
 4044c68:	30cc983a 	sll	r6,r6,r3
 4044c6c:	4992b03a 	or	r9,r9,r6
 4044c70:	12406215 	stw	r9,392(r2)
 4044c74:	21c04215 	stw	r7,264(r4)
 4044c78:	01000084 	movi	r4,2
 4044c7c:	893fd21e 	bne	r17,r4,4044bc8 <__flash_rwdata_start+0xfffffa38>
 4044c80:	11006317 	ldw	r4,396(r2)
 4044c84:	218cb03a 	or	r6,r4,r6
 4044c88:	11806315 	stw	r6,396(r2)
 4044c8c:	003fce06 	br	4044bc8 <__flash_rwdata_start+0xfffffa38>
 4044c90:	18805304 	addi	r2,r3,332
 4044c94:	18805215 	stw	r2,328(r3)
 4044c98:	003fc606 	br	4044bb4 <__flash_rwdata_start+0xfffffa24>
 4044c9c:	00bfffc4 	movi	r2,-1
 4044ca0:	003fd006 	br	4044be4 <__flash_rwdata_start+0xfffffa54>

04044ca4 <__call_exitprocs>:
 4044ca4:	defff504 	addi	sp,sp,-44
 4044ca8:	df000915 	stw	fp,36(sp)
 4044cac:	dd400615 	stw	r21,24(sp)
 4044cb0:	dc800315 	stw	r18,12(sp)
 4044cb4:	dfc00a15 	stw	ra,40(sp)
 4044cb8:	ddc00815 	stw	r23,32(sp)
 4044cbc:	dd800715 	stw	r22,28(sp)
 4044cc0:	dd000515 	stw	r20,20(sp)
 4044cc4:	dcc00415 	stw	r19,16(sp)
 4044cc8:	dc400215 	stw	r17,8(sp)
 4044ccc:	dc000115 	stw	r16,4(sp)
 4044cd0:	d9000015 	stw	r4,0(sp)
 4044cd4:	2839883a 	mov	fp,r5
 4044cd8:	04800044 	movi	r18,1
 4044cdc:	057fffc4 	movi	r21,-1
 4044ce0:	00800034 	movhi	r2,0
 4044ce4:	1085f504 	addi	r2,r2,6100
 4044ce8:	12000017 	ldw	r8,0(r2)
 4044cec:	45005217 	ldw	r20,328(r8)
 4044cf0:	44c05204 	addi	r19,r8,328
 4044cf4:	a0001c26 	beq	r20,zero,4044d68 <__call_exitprocs+0xc4>
 4044cf8:	a0800117 	ldw	r2,4(r20)
 4044cfc:	15ffffc4 	addi	r23,r2,-1
 4044d00:	b8000d16 	blt	r23,zero,4044d38 <__call_exitprocs+0x94>
 4044d04:	14000044 	addi	r16,r2,1
 4044d08:	8421883a 	add	r16,r16,r16
 4044d0c:	8421883a 	add	r16,r16,r16
 4044d10:	84402004 	addi	r17,r16,128
 4044d14:	a463883a 	add	r17,r20,r17
 4044d18:	a421883a 	add	r16,r20,r16
 4044d1c:	e0001e26 	beq	fp,zero,4044d98 <__call_exitprocs+0xf4>
 4044d20:	80804017 	ldw	r2,256(r16)
 4044d24:	e0801c26 	beq	fp,r2,4044d98 <__call_exitprocs+0xf4>
 4044d28:	bdffffc4 	addi	r23,r23,-1
 4044d2c:	843fff04 	addi	r16,r16,-4
 4044d30:	8c7fff04 	addi	r17,r17,-4
 4044d34:	bd7ff91e 	bne	r23,r21,4044d1c <__flash_rwdata_start+0xfffffb8c>
 4044d38:	00800034 	movhi	r2,0
 4044d3c:	10800004 	addi	r2,r2,0
 4044d40:	10000926 	beq	r2,zero,4044d68 <__call_exitprocs+0xc4>
 4044d44:	a0800117 	ldw	r2,4(r20)
 4044d48:	1000301e 	bne	r2,zero,4044e0c <__call_exitprocs+0x168>
 4044d4c:	a0800017 	ldw	r2,0(r20)
 4044d50:	10003226 	beq	r2,zero,4044e1c <__call_exitprocs+0x178>
 4044d54:	a009883a 	mov	r4,r20
 4044d58:	98800015 	stw	r2,0(r19)
 4044d5c:	00000000 	call	0 <__alt_mem_DMEM>
 4044d60:	9d000017 	ldw	r20,0(r19)
 4044d64:	a03fe41e 	bne	r20,zero,4044cf8 <__flash_rwdata_start+0xfffffb68>
 4044d68:	dfc00a17 	ldw	ra,40(sp)
 4044d6c:	df000917 	ldw	fp,36(sp)
 4044d70:	ddc00817 	ldw	r23,32(sp)
 4044d74:	dd800717 	ldw	r22,28(sp)
 4044d78:	dd400617 	ldw	r21,24(sp)
 4044d7c:	dd000517 	ldw	r20,20(sp)
 4044d80:	dcc00417 	ldw	r19,16(sp)
 4044d84:	dc800317 	ldw	r18,12(sp)
 4044d88:	dc400217 	ldw	r17,8(sp)
 4044d8c:	dc000117 	ldw	r16,4(sp)
 4044d90:	dec00b04 	addi	sp,sp,44
 4044d94:	f800283a 	ret
 4044d98:	a0800117 	ldw	r2,4(r20)
 4044d9c:	80c00017 	ldw	r3,0(r16)
 4044da0:	10bfffc4 	addi	r2,r2,-1
 4044da4:	15c01426 	beq	r2,r23,4044df8 <__call_exitprocs+0x154>
 4044da8:	80000015 	stw	zero,0(r16)
 4044dac:	183fde26 	beq	r3,zero,4044d28 <__flash_rwdata_start+0xfffffb98>
 4044db0:	95c8983a 	sll	r4,r18,r23
 4044db4:	a0806217 	ldw	r2,392(r20)
 4044db8:	a5800117 	ldw	r22,4(r20)
 4044dbc:	2084703a 	and	r2,r4,r2
 4044dc0:	10000b26 	beq	r2,zero,4044df0 <__call_exitprocs+0x14c>
 4044dc4:	a0806317 	ldw	r2,396(r20)
 4044dc8:	2088703a 	and	r4,r4,r2
 4044dcc:	20000c1e 	bne	r4,zero,4044e00 <__call_exitprocs+0x15c>
 4044dd0:	89400017 	ldw	r5,0(r17)
 4044dd4:	d9000017 	ldw	r4,0(sp)
 4044dd8:	183ee83a 	callr	r3
 4044ddc:	a0800117 	ldw	r2,4(r20)
 4044de0:	15bfbf1e 	bne	r2,r22,4044ce0 <__flash_rwdata_start+0xfffffb50>
 4044de4:	98800017 	ldw	r2,0(r19)
 4044de8:	153fcf26 	beq	r2,r20,4044d28 <__flash_rwdata_start+0xfffffb98>
 4044dec:	003fbc06 	br	4044ce0 <__flash_rwdata_start+0xfffffb50>
 4044df0:	183ee83a 	callr	r3
 4044df4:	003ff906 	br	4044ddc <__flash_rwdata_start+0xfffffc4c>
 4044df8:	a5c00115 	stw	r23,4(r20)
 4044dfc:	003feb06 	br	4044dac <__flash_rwdata_start+0xfffffc1c>
 4044e00:	89000017 	ldw	r4,0(r17)
 4044e04:	183ee83a 	callr	r3
 4044e08:	003ff406 	br	4044ddc <__flash_rwdata_start+0xfffffc4c>
 4044e0c:	a0800017 	ldw	r2,0(r20)
 4044e10:	a027883a 	mov	r19,r20
 4044e14:	1029883a 	mov	r20,r2
 4044e18:	003fb606 	br	4044cf4 <__flash_rwdata_start+0xfffffb64>
 4044e1c:	0005883a 	mov	r2,zero
 4044e20:	003ffb06 	br	4044e10 <__flash_rwdata_start+0xfffffc80>

04044e24 <__divsi3>:
 4044e24:	20001b16 	blt	r4,zero,4044e94 <__divsi3+0x70>
 4044e28:	000f883a 	mov	r7,zero
 4044e2c:	28001616 	blt	r5,zero,4044e88 <__divsi3+0x64>
 4044e30:	200d883a 	mov	r6,r4
 4044e34:	29001a2e 	bgeu	r5,r4,4044ea0 <__divsi3+0x7c>
 4044e38:	00800804 	movi	r2,32
 4044e3c:	00c00044 	movi	r3,1
 4044e40:	00000106 	br	4044e48 <__divsi3+0x24>
 4044e44:	10000d26 	beq	r2,zero,4044e7c <__divsi3+0x58>
 4044e48:	294b883a 	add	r5,r5,r5
 4044e4c:	10bfffc4 	addi	r2,r2,-1
 4044e50:	18c7883a 	add	r3,r3,r3
 4044e54:	293ffb36 	bltu	r5,r4,4044e44 <__flash_rwdata_start+0xfffffcb4>
 4044e58:	0005883a 	mov	r2,zero
 4044e5c:	18000726 	beq	r3,zero,4044e7c <__divsi3+0x58>
 4044e60:	0005883a 	mov	r2,zero
 4044e64:	31400236 	bltu	r6,r5,4044e70 <__divsi3+0x4c>
 4044e68:	314dc83a 	sub	r6,r6,r5
 4044e6c:	10c4b03a 	or	r2,r2,r3
 4044e70:	1806d07a 	srli	r3,r3,1
 4044e74:	280ad07a 	srli	r5,r5,1
 4044e78:	183ffa1e 	bne	r3,zero,4044e64 <__flash_rwdata_start+0xfffffcd4>
 4044e7c:	38000126 	beq	r7,zero,4044e84 <__divsi3+0x60>
 4044e80:	0085c83a 	sub	r2,zero,r2
 4044e84:	f800283a 	ret
 4044e88:	014bc83a 	sub	r5,zero,r5
 4044e8c:	39c0005c 	xori	r7,r7,1
 4044e90:	003fe706 	br	4044e30 <__flash_rwdata_start+0xfffffca0>
 4044e94:	0109c83a 	sub	r4,zero,r4
 4044e98:	01c00044 	movi	r7,1
 4044e9c:	003fe306 	br	4044e2c <__flash_rwdata_start+0xfffffc9c>
 4044ea0:	00c00044 	movi	r3,1
 4044ea4:	003fee06 	br	4044e60 <__flash_rwdata_start+0xfffffcd0>

04044ea8 <__modsi3>:
 4044ea8:	20001716 	blt	r4,zero,4044f08 <__modsi3+0x60>
 4044eac:	000f883a 	mov	r7,zero
 4044eb0:	2005883a 	mov	r2,r4
 4044eb4:	28001216 	blt	r5,zero,4044f00 <__modsi3+0x58>
 4044eb8:	2900162e 	bgeu	r5,r4,4044f14 <__modsi3+0x6c>
 4044ebc:	01800804 	movi	r6,32
 4044ec0:	00c00044 	movi	r3,1
 4044ec4:	00000106 	br	4044ecc <__modsi3+0x24>
 4044ec8:	30000a26 	beq	r6,zero,4044ef4 <__modsi3+0x4c>
 4044ecc:	294b883a 	add	r5,r5,r5
 4044ed0:	31bfffc4 	addi	r6,r6,-1
 4044ed4:	18c7883a 	add	r3,r3,r3
 4044ed8:	293ffb36 	bltu	r5,r4,4044ec8 <__flash_rwdata_start+0xfffffd38>
 4044edc:	18000526 	beq	r3,zero,4044ef4 <__modsi3+0x4c>
 4044ee0:	1806d07a 	srli	r3,r3,1
 4044ee4:	11400136 	bltu	r2,r5,4044eec <__modsi3+0x44>
 4044ee8:	1145c83a 	sub	r2,r2,r5
 4044eec:	280ad07a 	srli	r5,r5,1
 4044ef0:	183ffb1e 	bne	r3,zero,4044ee0 <__flash_rwdata_start+0xfffffd50>
 4044ef4:	38000126 	beq	r7,zero,4044efc <__modsi3+0x54>
 4044ef8:	0085c83a 	sub	r2,zero,r2
 4044efc:	f800283a 	ret
 4044f00:	014bc83a 	sub	r5,zero,r5
 4044f04:	003fec06 	br	4044eb8 <__flash_rwdata_start+0xfffffd28>
 4044f08:	0109c83a 	sub	r4,zero,r4
 4044f0c:	01c00044 	movi	r7,1
 4044f10:	003fe706 	br	4044eb0 <__flash_rwdata_start+0xfffffd20>
 4044f14:	00c00044 	movi	r3,1
 4044f18:	003ff106 	br	4044ee0 <__flash_rwdata_start+0xfffffd50>

04044f1c <__udivsi3>:
 4044f1c:	200d883a 	mov	r6,r4
 4044f20:	2900152e 	bgeu	r5,r4,4044f78 <__udivsi3+0x5c>
 4044f24:	28001416 	blt	r5,zero,4044f78 <__udivsi3+0x5c>
 4044f28:	00800804 	movi	r2,32
 4044f2c:	00c00044 	movi	r3,1
 4044f30:	00000206 	br	4044f3c <__udivsi3+0x20>
 4044f34:	10000e26 	beq	r2,zero,4044f70 <__udivsi3+0x54>
 4044f38:	28000516 	blt	r5,zero,4044f50 <__udivsi3+0x34>
 4044f3c:	294b883a 	add	r5,r5,r5
 4044f40:	10bfffc4 	addi	r2,r2,-1
 4044f44:	18c7883a 	add	r3,r3,r3
 4044f48:	293ffa36 	bltu	r5,r4,4044f34 <__flash_rwdata_start+0xfffffda4>
 4044f4c:	18000826 	beq	r3,zero,4044f70 <__udivsi3+0x54>
 4044f50:	0005883a 	mov	r2,zero
 4044f54:	31400236 	bltu	r6,r5,4044f60 <__udivsi3+0x44>
 4044f58:	314dc83a 	sub	r6,r6,r5
 4044f5c:	10c4b03a 	or	r2,r2,r3
 4044f60:	1806d07a 	srli	r3,r3,1
 4044f64:	280ad07a 	srli	r5,r5,1
 4044f68:	183ffa1e 	bne	r3,zero,4044f54 <__flash_rwdata_start+0xfffffdc4>
 4044f6c:	f800283a 	ret
 4044f70:	0005883a 	mov	r2,zero
 4044f74:	f800283a 	ret
 4044f78:	00c00044 	movi	r3,1
 4044f7c:	003ff406 	br	4044f50 <__flash_rwdata_start+0xfffffdc0>

04044f80 <__umodsi3>:
 4044f80:	2005883a 	mov	r2,r4
 4044f84:	2900122e 	bgeu	r5,r4,4044fd0 <__umodsi3+0x50>
 4044f88:	28001116 	blt	r5,zero,4044fd0 <__umodsi3+0x50>
 4044f8c:	01800804 	movi	r6,32
 4044f90:	00c00044 	movi	r3,1
 4044f94:	00000206 	br	4044fa0 <__umodsi3+0x20>
 4044f98:	30000c26 	beq	r6,zero,4044fcc <__umodsi3+0x4c>
 4044f9c:	28000516 	blt	r5,zero,4044fb4 <__umodsi3+0x34>
 4044fa0:	294b883a 	add	r5,r5,r5
 4044fa4:	31bfffc4 	addi	r6,r6,-1
 4044fa8:	18c7883a 	add	r3,r3,r3
 4044fac:	293ffa36 	bltu	r5,r4,4044f98 <__flash_rwdata_start+0xfffffe08>
 4044fb0:	18000626 	beq	r3,zero,4044fcc <__umodsi3+0x4c>
 4044fb4:	1806d07a 	srli	r3,r3,1
 4044fb8:	11400136 	bltu	r2,r5,4044fc0 <__umodsi3+0x40>
 4044fbc:	1145c83a 	sub	r2,r2,r5
 4044fc0:	280ad07a 	srli	r5,r5,1
 4044fc4:	183ffb1e 	bne	r3,zero,4044fb4 <__flash_rwdata_start+0xfffffe24>
 4044fc8:	f800283a 	ret
 4044fcc:	f800283a 	ret
 4044fd0:	00c00044 	movi	r3,1
 4044fd4:	003ff706 	br	4044fb4 <__flash_rwdata_start+0xfffffe24>

04044fd8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4044fd8:	defffd04 	addi	sp,sp,-12
 4044fdc:	df000215 	stw	fp,8(sp)
 4044fe0:	df000204 	addi	fp,sp,8
 4044fe4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4044fe8:	0001883a 	nop
 4044fec:	e0bfff17 	ldw	r2,-4(fp)
 4044ff0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4044ff4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4044ff8:	10000226 	beq	r2,zero,4045004 <_exit+0x2c>
    ALT_SIM_FAIL();
 4044ffc:	002af070 	cmpltui	zero,zero,43969
 4045000:	00000106 	br	4045008 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4045004:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4045008:	003fff06 	br	4045008 <__flash_rwdata_start+0xfffffe78>
