module FPU
#(parameter n = 9)
(
	input [n-1:0] DATAIN_1, DATAIN_2,
	output [n-1:0] DATAOUT,
	input AddSubF
);
	reg [4:0] larger_fract, smaller_fract;
	reg [2:0] exp_A, exp_B;
	reg [3:0] exp_Diff;
	reg [4:0] fract_Diff;
	reg [5:0] shifted_fract;
	reg [5:0] pre_out;
	reg [2:0] exp_com;
	reg [3:0] OUT1,OUT2;
	
	always @(DATAIN_1[7:4], DATAIN_2[7:4]) begin
		exp_A = (DATAIN_1[7] == 0)?DATAIN_1[6:4]:~DATAIN_1[6:4];
		exp_B = (DATAIN_2[7] == 0)?DATAIN_2[6:4]:~DATAIN_2[6:4];
	end
	
	assign exp_Diff = exp_A - exp_B;
	assign fract_Diff = DATAIN_1[3:0] - DATAIN_2[3:0];
	
	always @(exp_Diff, fract_Diff) begin
		if(exp_Diff[3] == 0) begin
			if(exp_Diff[2:0] != 0) begin
				larger_fract = {2'b01,DATAIN_1[3:0]};
				smaller_fract = {1'b1,DATAIN_2[3:0]};
				exp_com = exp_A;
			end
			else
				if(fract_Diff[4] == 0) begin
					larger_fract = {2'b01,DATAIN_1[3:0]};
					smaller_fract = {1'b1,DATAIN_2[3:0]};
					exp_com = exp_A;
				end
				else
					larger_fract = {2'b01,DATAIN_2[3:0]};
					smaller_fract = {1'b1,DATAIN_1[3:0]};
					exp_com = exp_B;
		end
		else
			larger_fract = {2'b01,DATAIN_2[3:0]};
			smaller_fract = {1'b1,DATAIN_1[3:0]};
			exp_com = exp_B;
	end

	Shifter S1 (smaller_fract, exp_Diff[2:0], shifted_fract);
	
	always @(AddSubF) begin
		if(AddSubF == 0) begin
			pre_out = larger_fract + shifted_fract;
		end
	end
	
	Normalize N1 (pre_out, exp_com, OUT1, OUT2);
	
	assign DATAOUT[7:4] = OUT1;
	assign DATAOUT[3:0] = OUT2;
	
	always @(exp_Diff,fract_Diff) begin
		if (exp_Diff[3] == 0) begin
			if(exp_Diff[2:0] != 0) begin
				Result_sign = DATAIN_1[8];
			end
			else
				if (fract_Dif[4] == 0) begin
					Result_sign = DATAIN_1[8];
				end
				else
					Result_sign = DATAIN_2[8];
		end
		else
			Result_sign = DATAIN_2[8];
	end
	
	assign DATAOUT[8] = Result_sign;
endmodule