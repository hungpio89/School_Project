// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2023 21:01:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AddSubF;
reg [8:0] DATAIN_1;
reg [8:0] DATAIN_2;
// wires                                               
wire [8:0] DATAOUT;
wire [3:0] exp_Diff;
wire [3:0] larger_fract;
wire [5:0] pre_fract;
wire [5:0] pre_out;
wire [5:0] shifted_fract;
wire [3:0] smaller_fract;

// assign statements (if any)                          
FPU i1 (
// port map - connection between master ports and signals/registers   
	.AddSubF(AddSubF),
	.DATAIN_1(DATAIN_1),
	.DATAIN_2(DATAIN_2),
	.DATAOUT(DATAOUT),
	.exp_Diff(exp_Diff),
	.larger_fract(larger_fract),
	.pre_fract(pre_fract),
	.pre_out(pre_out),
	.shifted_fract(shifted_fract),
	.smaller_fract(smaller_fract)
);
initial 
begin 
#1000000 $finish;
end 

// AddSubF
initial
begin
	AddSubF = 1'b1;
	AddSubF = #10000 1'b0;
	AddSubF = #40000 1'b1;
	AddSubF = #120000 1'b0;
	AddSubF = #40000 1'b1;
	AddSubF = #40000 1'b0;
	AddSubF = #40000 1'b1;
	AddSubF = #40000 1'b0;
	AddSubF = #40000 1'b1;
end 
// DATAIN_1[ 8 ]
initial
begin
	DATAIN_1[8] = 1'b0;
	DATAIN_1[8] = #10000 1'b1;
	DATAIN_1[8] = #40000 1'b0;
	DATAIN_1[8] = #40000 1'b1;
	DATAIN_1[8] = #40000 1'b0;
end 
// DATAIN_1[ 7 ]
initial
begin
	DATAIN_1[7] = 1'b0;
end 
// DATAIN_1[ 6 ]
initial
begin
	DATAIN_1[6] = 1'b0;
	DATAIN_1[6] = #250000 1'b1;
	DATAIN_1[6] = #40000 1'b0;
	DATAIN_1[6] = #40000 1'b1;
	DATAIN_1[6] = #40000 1'b0;
end 
// DATAIN_1[ 5 ]
initial
begin
	DATAIN_1[5] = 1'b0;
	DATAIN_1[5] = #10000 1'b1;
	DATAIN_1[5] = #40000 1'b0;
	DATAIN_1[5] = #40000 1'b1;
	DATAIN_1[5] = #40000 1'b0;
	DATAIN_1[5] = #40000 1'b1;
	DATAIN_1[5] = #40000 1'b0;
	DATAIN_1[5] = #40000 1'b1;
	DATAIN_1[5] = #40000 1'b0;
	DATAIN_1[5] = #40000 1'b1;
	DATAIN_1[5] = #40000 1'b0;
end 
// DATAIN_1[ 4 ]
initial
begin
	DATAIN_1[4] = 1'b0;
	DATAIN_1[4] = #170000 1'b1;
	DATAIN_1[4] = #40000 1'b0;
	DATAIN_1[4] = #40000 1'b1;
	DATAIN_1[4] = #40000 1'b0;
	DATAIN_1[4] = #40000 1'b1;
	DATAIN_1[4] = #40000 1'b0;
end 
// DATAIN_1[ 3 ]
initial
begin
	DATAIN_1[3] = 1'b0;
	DATAIN_1[3] = #10000 1'b1;
	DATAIN_1[3] = #40000 1'b0;
	DATAIN_1[3] = #40000 1'b1;
	DATAIN_1[3] = #40000 1'b0;
	DATAIN_1[3] = #40000 1'b1;
	DATAIN_1[3] = #40000 1'b0;
end 
// DATAIN_1[ 2 ]
initial
begin
	DATAIN_1[2] = 1'b0;
	DATAIN_1[2] = #10000 1'b1;
	DATAIN_1[2] = #40000 1'b0;
	DATAIN_1[2] = #40000 1'b1;
	DATAIN_1[2] = #40000 1'b0;
	DATAIN_1[2] = #40000 1'b1;
	DATAIN_1[2] = #40000 1'b0;
end 
// DATAIN_1[ 1 ]
initial
begin
	DATAIN_1[1] = 1'b0;
	DATAIN_1[1] = #250000 1'b1;
	DATAIN_1[1] = #40000 1'b0;
	DATAIN_1[1] = #40000 1'b1;
	DATAIN_1[1] = #40000 1'b0;
end 
// DATAIN_1[ 0 ]
initial
begin
	DATAIN_1[0] = 1'b0;
	DATAIN_1[0] = #250000 1'b1;
	DATAIN_1[0] = #40000 1'b0;
	DATAIN_1[0] = #40000 1'b1;
	DATAIN_1[0] = #40000 1'b0;
end 
// DATAIN_2[ 8 ]
initial
begin
	DATAIN_2[8] = 1'b0;
	DATAIN_2[8] = #10000 1'b1;
	DATAIN_2[8] = #40000 1'b0;
end 
// DATAIN_2[ 7 ]
initial
begin
	DATAIN_2[7] = 1'b0;
end 
// DATAIN_2[ 6 ]
initial
begin
	DATAIN_2[6] = 1'b0;
end 
// DATAIN_2[ 5 ]
initial
begin
	DATAIN_2[5] = 1'b0;
	DATAIN_2[5] = #10000 1'b1;
	DATAIN_2[5] = #40000 1'b0;
	DATAIN_2[5] = #120000 1'b1;
	DATAIN_2[5] = #40000 1'b0;
end 
// DATAIN_2[ 4 ]
initial
begin
	DATAIN_2[4] = 1'b0;
end 
// DATAIN_2[ 3 ]
initial
begin
	DATAIN_2[3] = 1'b0;
	DATAIN_2[3] = #10000 1'b1;
	DATAIN_2[3] = #40000 1'b0;
	DATAIN_2[3] = #280000 1'b1;
	DATAIN_2[3] = #40000 1'b0;
end 
// DATAIN_2[ 2 ]
initial
begin
	DATAIN_2[2] = 1'b0;
	DATAIN_2[2] = #10000 1'b1;
	DATAIN_2[2] = #40000 1'b0;
end 
// DATAIN_2[ 1 ]
initial
begin
	DATAIN_2[1] = 1'b0;
	DATAIN_2[1] = #250000 1'b1;
	DATAIN_2[1] = #40000 1'b0;
	DATAIN_2[1] = #40000 1'b1;
	DATAIN_2[1] = #40000 1'b0;
end 
// DATAIN_2[ 0 ]
initial
begin
	DATAIN_2[0] = 1'b0;
	DATAIN_2[0] = #250000 1'b1;
	DATAIN_2[0] = #40000 1'b0;
end 
endmodule

